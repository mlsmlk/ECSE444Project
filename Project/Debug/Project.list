
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bb4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08007d48  08007d48  00017d48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e40  08007e40  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  08007e40  08007e40  00017e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e48  08007e48  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e48  08007e48  00017e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e4c  08007e4c  00017e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08007e50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  200000a8  08007ef8  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000360  08007ef8  00020360  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017cd4  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b46  00000000  00000000  00037dac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015a8  00000000  00000000  0003a8f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001440  00000000  00000000  0003bea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028d6c  00000000  00000000  0003d2e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000112cf  00000000  00000000  0006604c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fb955  00000000  00000000  0007731b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00172c70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000634c  00000000  00000000  00172cec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007d2c 	.word	0x08007d2c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	08007d2c 	.word	0x08007d2c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b972 	b.w	8000e94 <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9e08      	ldr	r6, [sp, #32]
 8000bce:	4604      	mov	r4, r0
 8000bd0:	4688      	mov	r8, r1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d14b      	bne.n	8000c6e <__udivmoddi4+0xa6>
 8000bd6:	428a      	cmp	r2, r1
 8000bd8:	4615      	mov	r5, r2
 8000bda:	d967      	bls.n	8000cac <__udivmoddi4+0xe4>
 8000bdc:	fab2 f282 	clz	r2, r2
 8000be0:	b14a      	cbz	r2, 8000bf6 <__udivmoddi4+0x2e>
 8000be2:	f1c2 0720 	rsb	r7, r2, #32
 8000be6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bea:	fa20 f707 	lsr.w	r7, r0, r7
 8000bee:	4095      	lsls	r5, r2
 8000bf0:	ea47 0803 	orr.w	r8, r7, r3
 8000bf4:	4094      	lsls	r4, r2
 8000bf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bfa:	0c23      	lsrs	r3, r4, #16
 8000bfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c00:	fa1f fc85 	uxth.w	ip, r5
 8000c04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c10:	4299      	cmp	r1, r3
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x60>
 8000c14:	18eb      	adds	r3, r5, r3
 8000c16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c1a:	f080 811b 	bcs.w	8000e54 <__udivmoddi4+0x28c>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 8118 	bls.w	8000e54 <__udivmoddi4+0x28c>
 8000c24:	3f02      	subs	r7, #2
 8000c26:	442b      	add	r3, r5
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	b2a4      	uxth	r4, r4
 8000c2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c3c:	45a4      	cmp	ip, r4
 8000c3e:	d909      	bls.n	8000c54 <__udivmoddi4+0x8c>
 8000c40:	192c      	adds	r4, r5, r4
 8000c42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c46:	f080 8107 	bcs.w	8000e58 <__udivmoddi4+0x290>
 8000c4a:	45a4      	cmp	ip, r4
 8000c4c:	f240 8104 	bls.w	8000e58 <__udivmoddi4+0x290>
 8000c50:	3802      	subs	r0, #2
 8000c52:	442c      	add	r4, r5
 8000c54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c58:	eba4 040c 	sub.w	r4, r4, ip
 8000c5c:	2700      	movs	r7, #0
 8000c5e:	b11e      	cbz	r6, 8000c68 <__udivmoddi4+0xa0>
 8000c60:	40d4      	lsrs	r4, r2
 8000c62:	2300      	movs	r3, #0
 8000c64:	e9c6 4300 	strd	r4, r3, [r6]
 8000c68:	4639      	mov	r1, r7
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0xbe>
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	f000 80eb 	beq.w	8000e4e <__udivmoddi4+0x286>
 8000c78:	2700      	movs	r7, #0
 8000c7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c7e:	4638      	mov	r0, r7
 8000c80:	4639      	mov	r1, r7
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	fab3 f783 	clz	r7, r3
 8000c8a:	2f00      	cmp	r7, #0
 8000c8c:	d147      	bne.n	8000d1e <__udivmoddi4+0x156>
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d302      	bcc.n	8000c98 <__udivmoddi4+0xd0>
 8000c92:	4282      	cmp	r2, r0
 8000c94:	f200 80fa 	bhi.w	8000e8c <__udivmoddi4+0x2c4>
 8000c98:	1a84      	subs	r4, r0, r2
 8000c9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	4698      	mov	r8, r3
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d0e0      	beq.n	8000c68 <__udivmoddi4+0xa0>
 8000ca6:	e9c6 4800 	strd	r4, r8, [r6]
 8000caa:	e7dd      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000cac:	b902      	cbnz	r2, 8000cb0 <__udivmoddi4+0xe8>
 8000cae:	deff      	udf	#255	; 0xff
 8000cb0:	fab2 f282 	clz	r2, r2
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f040 808f 	bne.w	8000dd8 <__udivmoddi4+0x210>
 8000cba:	1b49      	subs	r1, r1, r5
 8000cbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cc0:	fa1f f885 	uxth.w	r8, r5
 8000cc4:	2701      	movs	r7, #1
 8000cc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cca:	0c23      	lsrs	r3, r4, #16
 8000ccc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cd8:	4299      	cmp	r1, r3
 8000cda:	d907      	bls.n	8000cec <__udivmoddi4+0x124>
 8000cdc:	18eb      	adds	r3, r5, r3
 8000cde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x122>
 8000ce4:	4299      	cmp	r1, r3
 8000ce6:	f200 80cd 	bhi.w	8000e84 <__udivmoddi4+0x2bc>
 8000cea:	4684      	mov	ip, r0
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	b2a3      	uxth	r3, r4
 8000cf0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cf4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cf8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cfc:	fb08 f800 	mul.w	r8, r8, r0
 8000d00:	45a0      	cmp	r8, r4
 8000d02:	d907      	bls.n	8000d14 <__udivmoddi4+0x14c>
 8000d04:	192c      	adds	r4, r5, r4
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x14a>
 8000d0c:	45a0      	cmp	r8, r4
 8000d0e:	f200 80b6 	bhi.w	8000e7e <__udivmoddi4+0x2b6>
 8000d12:	4618      	mov	r0, r3
 8000d14:	eba4 0408 	sub.w	r4, r4, r8
 8000d18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d1c:	e79f      	b.n	8000c5e <__udivmoddi4+0x96>
 8000d1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d22:	40bb      	lsls	r3, r7
 8000d24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d3c:	4325      	orrs	r5, r4
 8000d3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d42:	0c2c      	lsrs	r4, r5, #16
 8000d44:	fb08 3319 	mls	r3, r8, r9, r3
 8000d48:	fa1f fa8e 	uxth.w	sl, lr
 8000d4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d50:	fb09 f40a 	mul.w	r4, r9, sl
 8000d54:	429c      	cmp	r4, r3
 8000d56:	fa02 f207 	lsl.w	r2, r2, r7
 8000d5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b0>
 8000d60:	eb1e 0303 	adds.w	r3, lr, r3
 8000d64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d68:	f080 8087 	bcs.w	8000e7a <__udivmoddi4+0x2b2>
 8000d6c:	429c      	cmp	r4, r3
 8000d6e:	f240 8084 	bls.w	8000e7a <__udivmoddi4+0x2b2>
 8000d72:	f1a9 0902 	sub.w	r9, r9, #2
 8000d76:	4473      	add	r3, lr
 8000d78:	1b1b      	subs	r3, r3, r4
 8000d7a:	b2ad      	uxth	r5, r5
 8000d7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d80:	fb08 3310 	mls	r3, r8, r0, r3
 8000d84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d8c:	45a2      	cmp	sl, r4
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1da>
 8000d90:	eb1e 0404 	adds.w	r4, lr, r4
 8000d94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d98:	d26b      	bcs.n	8000e72 <__udivmoddi4+0x2aa>
 8000d9a:	45a2      	cmp	sl, r4
 8000d9c:	d969      	bls.n	8000e72 <__udivmoddi4+0x2aa>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	4474      	add	r4, lr
 8000da2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000da6:	fba0 8902 	umull	r8, r9, r0, r2
 8000daa:	eba4 040a 	sub.w	r4, r4, sl
 8000dae:	454c      	cmp	r4, r9
 8000db0:	46c2      	mov	sl, r8
 8000db2:	464b      	mov	r3, r9
 8000db4:	d354      	bcc.n	8000e60 <__udivmoddi4+0x298>
 8000db6:	d051      	beq.n	8000e5c <__udivmoddi4+0x294>
 8000db8:	2e00      	cmp	r6, #0
 8000dba:	d069      	beq.n	8000e90 <__udivmoddi4+0x2c8>
 8000dbc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dc0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dc4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dc8:	40fd      	lsrs	r5, r7
 8000dca:	40fc      	lsrs	r4, r7
 8000dcc:	ea4c 0505 	orr.w	r5, ip, r5
 8000dd0:	e9c6 5400 	strd	r5, r4, [r6]
 8000dd4:	2700      	movs	r7, #0
 8000dd6:	e747      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000dd8:	f1c2 0320 	rsb	r3, r2, #32
 8000ddc:	fa20 f703 	lsr.w	r7, r0, r3
 8000de0:	4095      	lsls	r5, r2
 8000de2:	fa01 f002 	lsl.w	r0, r1, r2
 8000de6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dee:	4338      	orrs	r0, r7
 8000df0:	0c01      	lsrs	r1, r0, #16
 8000df2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000df6:	fa1f f885 	uxth.w	r8, r5
 8000dfa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dfe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e02:	fb07 f308 	mul.w	r3, r7, r8
 8000e06:	428b      	cmp	r3, r1
 8000e08:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0c:	d907      	bls.n	8000e1e <__udivmoddi4+0x256>
 8000e0e:	1869      	adds	r1, r5, r1
 8000e10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e14:	d22f      	bcs.n	8000e76 <__udivmoddi4+0x2ae>
 8000e16:	428b      	cmp	r3, r1
 8000e18:	d92d      	bls.n	8000e76 <__udivmoddi4+0x2ae>
 8000e1a:	3f02      	subs	r7, #2
 8000e1c:	4429      	add	r1, r5
 8000e1e:	1acb      	subs	r3, r1, r3
 8000e20:	b281      	uxth	r1, r0
 8000e22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e2e:	fb00 f308 	mul.w	r3, r0, r8
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d907      	bls.n	8000e46 <__udivmoddi4+0x27e>
 8000e36:	1869      	adds	r1, r5, r1
 8000e38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e3c:	d217      	bcs.n	8000e6e <__udivmoddi4+0x2a6>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d915      	bls.n	8000e6e <__udivmoddi4+0x2a6>
 8000e42:	3802      	subs	r0, #2
 8000e44:	4429      	add	r1, r5
 8000e46:	1ac9      	subs	r1, r1, r3
 8000e48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e4c:	e73b      	b.n	8000cc6 <__udivmoddi4+0xfe>
 8000e4e:	4637      	mov	r7, r6
 8000e50:	4630      	mov	r0, r6
 8000e52:	e709      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000e54:	4607      	mov	r7, r0
 8000e56:	e6e7      	b.n	8000c28 <__udivmoddi4+0x60>
 8000e58:	4618      	mov	r0, r3
 8000e5a:	e6fb      	b.n	8000c54 <__udivmoddi4+0x8c>
 8000e5c:	4541      	cmp	r1, r8
 8000e5e:	d2ab      	bcs.n	8000db8 <__udivmoddi4+0x1f0>
 8000e60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e64:	eb69 020e 	sbc.w	r2, r9, lr
 8000e68:	3801      	subs	r0, #1
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	e7a4      	b.n	8000db8 <__udivmoddi4+0x1f0>
 8000e6e:	4660      	mov	r0, ip
 8000e70:	e7e9      	b.n	8000e46 <__udivmoddi4+0x27e>
 8000e72:	4618      	mov	r0, r3
 8000e74:	e795      	b.n	8000da2 <__udivmoddi4+0x1da>
 8000e76:	4667      	mov	r7, ip
 8000e78:	e7d1      	b.n	8000e1e <__udivmoddi4+0x256>
 8000e7a:	4681      	mov	r9, r0
 8000e7c:	e77c      	b.n	8000d78 <__udivmoddi4+0x1b0>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	442c      	add	r4, r5
 8000e82:	e747      	b.n	8000d14 <__udivmoddi4+0x14c>
 8000e84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e88:	442b      	add	r3, r5
 8000e8a:	e72f      	b.n	8000cec <__udivmoddi4+0x124>
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	e708      	b.n	8000ca2 <__udivmoddi4+0xda>
 8000e90:	4637      	mov	r7, r6
 8000e92:	e6e9      	b.n	8000c68 <__udivmoddi4+0xa0>

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea2:	2003      	movs	r0, #3
 8000ea4:	f000 f95e 	bl	8001164 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f000 f80d 	bl	8000ec8 <HAL_InitTick>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d002      	beq.n	8000eba <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	71fb      	strb	r3, [r7, #7]
 8000eb8:	e001      	b.n	8000ebe <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000eba:	f004 ffd1 	bl	8005e60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ed4:	4b17      	ldr	r3, [pc, #92]	; (8000f34 <HAL_InitTick+0x6c>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d023      	beq.n	8000f24 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000edc:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <HAL_InitTick+0x70>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <HAL_InitTick+0x6c>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f000 f96b 	bl	80011ce <HAL_SYSTICK_Config>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d10f      	bne.n	8000f1e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d809      	bhi.n	8000f18 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f04:	2200      	movs	r2, #0
 8000f06:	6879      	ldr	r1, [r7, #4]
 8000f08:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0c:	f000 f935 	bl	800117a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f10:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <HAL_InitTick+0x74>)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6013      	str	r3, [r2, #0]
 8000f16:	e007      	b.n	8000f28 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	73fb      	strb	r3, [r7, #15]
 8000f1c:	e004      	b.n	8000f28 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	73fb      	strb	r3, [r7, #15]
 8000f22:	e001      	b.n	8000f28 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000004 	.word	0x20000004
 8000f38:	2000003c 	.word	0x2000003c
 8000f3c:	20000000 	.word	0x20000000

08000f40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f44:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <HAL_IncTick+0x20>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <HAL_IncTick+0x24>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4413      	add	r3, r2
 8000f50:	4a04      	ldr	r2, [pc, #16]	; (8000f64 <HAL_IncTick+0x24>)
 8000f52:	6013      	str	r3, [r2, #0]
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	20000004 	.word	0x20000004
 8000f64:	200000d4 	.word	0x200000d4

08000f68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f6c:	4b03      	ldr	r3, [pc, #12]	; (8000f7c <HAL_GetTick+0x14>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	200000d4 	.word	0x200000d4

08000f80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f88:	f7ff ffee 	bl	8000f68 <HAL_GetTick>
 8000f8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f98:	d005      	beq.n	8000fa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f9a:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <HAL_Delay+0x40>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fa6:	bf00      	nop
 8000fa8:	f7ff ffde 	bl	8000f68 <HAL_GetTick>
 8000fac:	4602      	mov	r2, r0
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d8f7      	bhi.n	8000fa8 <HAL_Delay+0x28>
  {
  }
}
 8000fb8:	bf00      	nop
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000004 	.word	0x20000004

08000fc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fda:	68ba      	ldr	r2, [r7, #8]
 8000fdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ff6:	4a04      	ldr	r2, [pc, #16]	; (8001008 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	60d3      	str	r3, [r2, #12]
}
 8000ffc:	bf00      	nop
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001010:	4b04      	ldr	r3, [pc, #16]	; (8001024 <__NVIC_GetPriorityGrouping+0x18>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	0a1b      	lsrs	r3, r3, #8
 8001016:	f003 0307 	and.w	r3, r3, #7
}
 800101a:	4618      	mov	r0, r3
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	2b00      	cmp	r3, #0
 8001038:	db0b      	blt.n	8001052 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	f003 021f 	and.w	r2, r3, #31
 8001040:	4907      	ldr	r1, [pc, #28]	; (8001060 <__NVIC_EnableIRQ+0x38>)
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	095b      	lsrs	r3, r3, #5
 8001048:	2001      	movs	r0, #1
 800104a:	fa00 f202 	lsl.w	r2, r0, r2
 800104e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	e000e100 	.word	0xe000e100

08001064 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	6039      	str	r1, [r7, #0]
 800106e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001074:	2b00      	cmp	r3, #0
 8001076:	db0a      	blt.n	800108e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	b2da      	uxtb	r2, r3
 800107c:	490c      	ldr	r1, [pc, #48]	; (80010b0 <__NVIC_SetPriority+0x4c>)
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	0112      	lsls	r2, r2, #4
 8001084:	b2d2      	uxtb	r2, r2
 8001086:	440b      	add	r3, r1
 8001088:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800108c:	e00a      	b.n	80010a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	b2da      	uxtb	r2, r3
 8001092:	4908      	ldr	r1, [pc, #32]	; (80010b4 <__NVIC_SetPriority+0x50>)
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	f003 030f 	and.w	r3, r3, #15
 800109a:	3b04      	subs	r3, #4
 800109c:	0112      	lsls	r2, r2, #4
 800109e:	b2d2      	uxtb	r2, r2
 80010a0:	440b      	add	r3, r1
 80010a2:	761a      	strb	r2, [r3, #24]
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000e100 	.word	0xe000e100
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b089      	sub	sp, #36	; 0x24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	f1c3 0307 	rsb	r3, r3, #7
 80010d2:	2b04      	cmp	r3, #4
 80010d4:	bf28      	it	cs
 80010d6:	2304      	movcs	r3, #4
 80010d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	3304      	adds	r3, #4
 80010de:	2b06      	cmp	r3, #6
 80010e0:	d902      	bls.n	80010e8 <NVIC_EncodePriority+0x30>
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	3b03      	subs	r3, #3
 80010e6:	e000      	b.n	80010ea <NVIC_EncodePriority+0x32>
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ec:	f04f 32ff 	mov.w	r2, #4294967295
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43da      	mvns	r2, r3
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	401a      	ands	r2, r3
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001100:	f04f 31ff 	mov.w	r1, #4294967295
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	fa01 f303 	lsl.w	r3, r1, r3
 800110a:	43d9      	mvns	r1, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001110:	4313      	orrs	r3, r2
         );
}
 8001112:	4618      	mov	r0, r3
 8001114:	3724      	adds	r7, #36	; 0x24
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
	...

08001120 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3b01      	subs	r3, #1
 800112c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001130:	d301      	bcc.n	8001136 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001132:	2301      	movs	r3, #1
 8001134:	e00f      	b.n	8001156 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001136:	4a0a      	ldr	r2, [pc, #40]	; (8001160 <SysTick_Config+0x40>)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3b01      	subs	r3, #1
 800113c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800113e:	210f      	movs	r1, #15
 8001140:	f04f 30ff 	mov.w	r0, #4294967295
 8001144:	f7ff ff8e 	bl	8001064 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001148:	4b05      	ldr	r3, [pc, #20]	; (8001160 <SysTick_Config+0x40>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800114e:	4b04      	ldr	r3, [pc, #16]	; (8001160 <SysTick_Config+0x40>)
 8001150:	2207      	movs	r2, #7
 8001152:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	e000e010 	.word	0xe000e010

08001164 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff ff29 	bl	8000fc4 <__NVIC_SetPriorityGrouping>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b086      	sub	sp, #24
 800117e:	af00      	add	r7, sp, #0
 8001180:	4603      	mov	r3, r0
 8001182:	60b9      	str	r1, [r7, #8]
 8001184:	607a      	str	r2, [r7, #4]
 8001186:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800118c:	f7ff ff3e 	bl	800100c <__NVIC_GetPriorityGrouping>
 8001190:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	68b9      	ldr	r1, [r7, #8]
 8001196:	6978      	ldr	r0, [r7, #20]
 8001198:	f7ff ff8e 	bl	80010b8 <NVIC_EncodePriority>
 800119c:	4602      	mov	r2, r0
 800119e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a2:	4611      	mov	r1, r2
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff5d 	bl	8001064 <__NVIC_SetPriority>
}
 80011aa:	bf00      	nop
 80011ac:	3718      	adds	r7, #24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	4603      	mov	r3, r0
 80011ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ff31 	bl	8001028 <__NVIC_EnableIRQ>
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b082      	sub	sp, #8
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff ffa2 	bl	8001120 <SysTick_Config>
 80011dc:	4603      	mov	r3, r0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d101      	bne.n	80011f8 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e014      	b.n	8001222 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	791b      	ldrb	r3, [r3, #4]
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d105      	bne.n	800120e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f004 fe4d 	bl	8005ea8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2202      	movs	r2, #2
 8001212:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2201      	movs	r2, #1
 800121e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b088      	sub	sp, #32
 800122e:	af00      	add	r7, sp, #0
 8001230:	60f8      	str	r0, [r7, #12]
 8001232:	60b9      	str	r1, [r7, #8]
 8001234:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	795b      	ldrb	r3, [r3, #5]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d101      	bne.n	8001246 <HAL_DAC_ConfigChannel+0x1c>
 8001242:	2302      	movs	r3, #2
 8001244:	e107      	b.n	8001456 <HAL_DAC_ConfigChannel+0x22c>
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	2201      	movs	r2, #1
 800124a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	2202      	movs	r2, #2
 8001250:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2b04      	cmp	r3, #4
 8001258:	d174      	bne.n	8001344 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800125a:	f7ff fe85 	bl	8000f68 <HAL_GetTick>
 800125e:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d134      	bne.n	80012d0 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001266:	e011      	b.n	800128c <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001268:	f7ff fe7e 	bl	8000f68 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b01      	cmp	r3, #1
 8001274:	d90a      	bls.n	800128c <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	691b      	ldr	r3, [r3, #16]
 800127a:	f043 0208 	orr.w	r2, r3, #8
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	2203      	movs	r2, #3
 8001286:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e0e4      	b.n	8001456 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001292:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1e6      	bne.n	8001268 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800129a:	2001      	movs	r0, #1
 800129c:	f7ff fe70 	bl	8000f80 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	68ba      	ldr	r2, [r7, #8]
 80012a6:	6992      	ldr	r2, [r2, #24]
 80012a8:	641a      	str	r2, [r3, #64]	; 0x40
 80012aa:	e01e      	b.n	80012ea <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80012ac:	f7ff fe5c 	bl	8000f68 <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d90a      	bls.n	80012d0 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	691b      	ldr	r3, [r3, #16]
 80012be:	f043 0208 	orr.w	r2, r3, #8
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	2203      	movs	r2, #3
 80012ca:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e0c2      	b.n	8001456 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	dbe8      	blt.n	80012ac <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80012da:	2001      	movs	r0, #1
 80012dc:	f7ff fe50 	bl	8000f80 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	68ba      	ldr	r2, [r7, #8]
 80012e6:	6992      	ldr	r2, [r2, #24]
 80012e8:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f003 0310 	and.w	r3, r3, #16
 80012f6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80012fa:	fa01 f303 	lsl.w	r3, r1, r3
 80012fe:	43db      	mvns	r3, r3
 8001300:	ea02 0103 	and.w	r1, r2, r3
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	69da      	ldr	r2, [r3, #28]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f003 0310 	and.w	r3, r3, #16
 800130e:	409a      	lsls	r2, r3
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	430a      	orrs	r2, r1
 8001316:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	f003 0310 	and.w	r3, r3, #16
 8001324:	21ff      	movs	r1, #255	; 0xff
 8001326:	fa01 f303 	lsl.w	r3, r1, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	ea02 0103 	and.w	r1, r2, r3
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	6a1a      	ldr	r2, [r3, #32]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f003 0310 	and.w	r3, r3, #16
 800133a:	409a      	lsls	r2, r3
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	430a      	orrs	r2, r1
 8001342:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	691b      	ldr	r3, [r3, #16]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d11d      	bne.n	8001388 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001352:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f003 0310 	and.w	r3, r3, #16
 800135a:	221f      	movs	r2, #31
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f003 0310 	and.w	r3, r3, #16
 8001374:	697a      	ldr	r2, [r7, #20]
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4313      	orrs	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800138e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f003 0310 	and.w	r3, r3, #16
 8001396:	2207      	movs	r2, #7
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	431a      	orrs	r2, r3
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f003 0310 	and.w	r3, r3, #16
 80013bc:	697a      	ldr	r2, [r7, #20]
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	6819      	ldr	r1, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f003 0310 	and.w	r3, r3, #16
 80013dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43da      	mvns	r2, r3
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	400a      	ands	r2, r1
 80013ec:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f003 0310 	and.w	r3, r3, #16
 80013fc:	f640 72fc 	movw	r2, #4092	; 0xffc
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	43db      	mvns	r3, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4013      	ands	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f003 0310 	and.w	r3, r3, #16
 8001418:	697a      	ldr	r2, [r7, #20]
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4313      	orrs	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	6819      	ldr	r1, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f003 0310 	and.w	r3, r3, #16
 8001438:	22c0      	movs	r2, #192	; 0xc0
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43da      	mvns	r2, r3
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	400a      	ands	r2, r1
 8001446:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2201      	movs	r2, #1
 800144c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	2200      	movs	r2, #0
 8001452:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3720      	adds	r7, #32
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
	...

08001460 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d101      	bne.n	8001472 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e098      	b.n	80015a4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	461a      	mov	r2, r3
 8001478:	4b4d      	ldr	r3, [pc, #308]	; (80015b0 <HAL_DMA_Init+0x150>)
 800147a:	429a      	cmp	r2, r3
 800147c:	d80f      	bhi.n	800149e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	461a      	mov	r2, r3
 8001484:	4b4b      	ldr	r3, [pc, #300]	; (80015b4 <HAL_DMA_Init+0x154>)
 8001486:	4413      	add	r3, r2
 8001488:	4a4b      	ldr	r2, [pc, #300]	; (80015b8 <HAL_DMA_Init+0x158>)
 800148a:	fba2 2303 	umull	r2, r3, r2, r3
 800148e:	091b      	lsrs	r3, r3, #4
 8001490:	009a      	lsls	r2, r3, #2
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a48      	ldr	r2, [pc, #288]	; (80015bc <HAL_DMA_Init+0x15c>)
 800149a:	641a      	str	r2, [r3, #64]	; 0x40
 800149c:	e00e      	b.n	80014bc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	461a      	mov	r2, r3
 80014a4:	4b46      	ldr	r3, [pc, #280]	; (80015c0 <HAL_DMA_Init+0x160>)
 80014a6:	4413      	add	r3, r2
 80014a8:	4a43      	ldr	r2, [pc, #268]	; (80015b8 <HAL_DMA_Init+0x158>)
 80014aa:	fba2 2303 	umull	r2, r3, r2, r3
 80014ae:	091b      	lsrs	r3, r3, #4
 80014b0:	009a      	lsls	r2, r3, #2
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a42      	ldr	r2, [pc, #264]	; (80015c4 <HAL_DMA_Init+0x164>)
 80014ba:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2202      	movs	r2, #2
 80014c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80014d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80014e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a1b      	ldr	r3, [r3, #32]
 80014fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001500:	68fa      	ldr	r2, [r7, #12]
 8001502:	4313      	orrs	r3, r2
 8001504:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001516:	d039      	beq.n	800158c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151c:	4a27      	ldr	r2, [pc, #156]	; (80015bc <HAL_DMA_Init+0x15c>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d11a      	bne.n	8001558 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001522:	4b29      	ldr	r3, [pc, #164]	; (80015c8 <HAL_DMA_Init+0x168>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152a:	f003 031c 	and.w	r3, r3, #28
 800152e:	210f      	movs	r1, #15
 8001530:	fa01 f303 	lsl.w	r3, r1, r3
 8001534:	43db      	mvns	r3, r3
 8001536:	4924      	ldr	r1, [pc, #144]	; (80015c8 <HAL_DMA_Init+0x168>)
 8001538:	4013      	ands	r3, r2
 800153a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800153c:	4b22      	ldr	r3, [pc, #136]	; (80015c8 <HAL_DMA_Init+0x168>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6859      	ldr	r1, [r3, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001548:	f003 031c 	and.w	r3, r3, #28
 800154c:	fa01 f303 	lsl.w	r3, r1, r3
 8001550:	491d      	ldr	r1, [pc, #116]	; (80015c8 <HAL_DMA_Init+0x168>)
 8001552:	4313      	orrs	r3, r2
 8001554:	600b      	str	r3, [r1, #0]
 8001556:	e019      	b.n	800158c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001558:	4b1c      	ldr	r3, [pc, #112]	; (80015cc <HAL_DMA_Init+0x16c>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001560:	f003 031c 	and.w	r3, r3, #28
 8001564:	210f      	movs	r1, #15
 8001566:	fa01 f303 	lsl.w	r3, r1, r3
 800156a:	43db      	mvns	r3, r3
 800156c:	4917      	ldr	r1, [pc, #92]	; (80015cc <HAL_DMA_Init+0x16c>)
 800156e:	4013      	ands	r3, r2
 8001570:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001572:	4b16      	ldr	r3, [pc, #88]	; (80015cc <HAL_DMA_Init+0x16c>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6859      	ldr	r1, [r3, #4]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157e:	f003 031c 	and.w	r3, r3, #28
 8001582:	fa01 f303 	lsl.w	r3, r1, r3
 8001586:	4911      	ldr	r1, [pc, #68]	; (80015cc <HAL_DMA_Init+0x16c>)
 8001588:	4313      	orrs	r3, r2
 800158a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2201      	movs	r2, #1
 8001596:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	40020407 	.word	0x40020407
 80015b4:	bffdfff8 	.word	0xbffdfff8
 80015b8:	cccccccd 	.word	0xcccccccd
 80015bc:	40020000 	.word	0x40020000
 80015c0:	bffdfbf8 	.word	0xbffdfbf8
 80015c4:	40020400 	.word	0x40020400
 80015c8:	400200a8 	.word	0x400200a8
 80015cc:	400204a8 	.word	0x400204a8

080015d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ec:	f003 031c 	and.w	r3, r3, #28
 80015f0:	2204      	movs	r2, #4
 80015f2:	409a      	lsls	r2, r3
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	4013      	ands	r3, r2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d026      	beq.n	800164a <HAL_DMA_IRQHandler+0x7a>
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	f003 0304 	and.w	r3, r3, #4
 8001602:	2b00      	cmp	r3, #0
 8001604:	d021      	beq.n	800164a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0320 	and.w	r3, r3, #32
 8001610:	2b00      	cmp	r3, #0
 8001612:	d107      	bne.n	8001624 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f022 0204 	bic.w	r2, r2, #4
 8001622:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001628:	f003 021c 	and.w	r2, r3, #28
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001630:	2104      	movs	r1, #4
 8001632:	fa01 f202 	lsl.w	r2, r1, r2
 8001636:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163c:	2b00      	cmp	r3, #0
 800163e:	d071      	beq.n	8001724 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001648:	e06c      	b.n	8001724 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164e:	f003 031c 	and.w	r3, r3, #28
 8001652:	2202      	movs	r2, #2
 8001654:	409a      	lsls	r2, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	4013      	ands	r3, r2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d02e      	beq.n	80016bc <HAL_DMA_IRQHandler+0xec>
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d029      	beq.n	80016bc <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0320 	and.w	r3, r3, #32
 8001672:	2b00      	cmp	r3, #0
 8001674:	d10b      	bne.n	800168e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f022 020a 	bic.w	r2, r2, #10
 8001684:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2201      	movs	r2, #1
 800168a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001692:	f003 021c 	and.w	r2, r3, #28
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	2102      	movs	r1, #2
 800169c:	fa01 f202 	lsl.w	r2, r1, r2
 80016a0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d038      	beq.n	8001724 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80016ba:	e033      	b.n	8001724 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c0:	f003 031c 	and.w	r3, r3, #28
 80016c4:	2208      	movs	r2, #8
 80016c6:	409a      	lsls	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	4013      	ands	r3, r2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d02a      	beq.n	8001726 <HAL_DMA_IRQHandler+0x156>
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	f003 0308 	and.w	r3, r3, #8
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d025      	beq.n	8001726 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 020e 	bic.w	r2, r2, #14
 80016e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ee:	f003 021c 	and.w	r2, r3, #28
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	2101      	movs	r1, #1
 80016f8:	fa01 f202 	lsl.w	r2, r1, r2
 80016fc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2201      	movs	r2, #1
 8001702:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2201      	movs	r2, #1
 8001708:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001718:	2b00      	cmp	r3, #0
 800171a:	d004      	beq.n	8001726 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001724:	bf00      	nop
 8001726:	bf00      	nop
}
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
	...

08001730 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001730:	b480      	push	{r7}
 8001732:	b087      	sub	sp, #28
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800173a:	2300      	movs	r3, #0
 800173c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800173e:	e17f      	b.n	8001a40 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	2101      	movs	r1, #1
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	fa01 f303 	lsl.w	r3, r1, r3
 800174c:	4013      	ands	r3, r2
 800174e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2b00      	cmp	r3, #0
 8001754:	f000 8171 	beq.w	8001a3a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d00b      	beq.n	8001778 <HAL_GPIO_Init+0x48>
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	2b02      	cmp	r3, #2
 8001766:	d007      	beq.n	8001778 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800176c:	2b11      	cmp	r3, #17
 800176e:	d003      	beq.n	8001778 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	2b12      	cmp	r3, #18
 8001776:	d130      	bne.n	80017da <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	2203      	movs	r2, #3
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	43db      	mvns	r3, r3
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	4013      	ands	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	68da      	ldr	r2, [r3, #12]
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	4313      	orrs	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017ae:	2201      	movs	r2, #1
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43db      	mvns	r3, r3
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	4013      	ands	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	091b      	lsrs	r3, r3, #4
 80017c4:	f003 0201 	and.w	r2, r3, #1
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f003 0303 	and.w	r3, r3, #3
 80017e2:	2b03      	cmp	r3, #3
 80017e4:	d118      	bne.n	8001818 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80017ec:	2201      	movs	r2, #1
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	4013      	ands	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	08db      	lsrs	r3, r3, #3
 8001802:	f003 0201 	and.w	r2, r3, #1
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	4313      	orrs	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	2203      	movs	r2, #3
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	43db      	mvns	r3, r3
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	4013      	ands	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	4313      	orrs	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	2b02      	cmp	r3, #2
 800184e:	d003      	beq.n	8001858 <HAL_GPIO_Init+0x128>
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	2b12      	cmp	r3, #18
 8001856:	d123      	bne.n	80018a0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	08da      	lsrs	r2, r3, #3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3208      	adds	r2, #8
 8001860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001864:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	220f      	movs	r2, #15
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	4013      	ands	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	691a      	ldr	r2, [r3, #16]
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	4313      	orrs	r3, r2
 8001890:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	08da      	lsrs	r2, r3, #3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	3208      	adds	r2, #8
 800189a:	6939      	ldr	r1, [r7, #16]
 800189c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	2203      	movs	r2, #3
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	43db      	mvns	r3, r3
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	4013      	ands	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 0203 	and.w	r2, r3, #3
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f000 80ac 	beq.w	8001a3a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e2:	4b5e      	ldr	r3, [pc, #376]	; (8001a5c <HAL_GPIO_Init+0x32c>)
 80018e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018e6:	4a5d      	ldr	r2, [pc, #372]	; (8001a5c <HAL_GPIO_Init+0x32c>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	6613      	str	r3, [r2, #96]	; 0x60
 80018ee:	4b5b      	ldr	r3, [pc, #364]	; (8001a5c <HAL_GPIO_Init+0x32c>)
 80018f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	60bb      	str	r3, [r7, #8]
 80018f8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018fa:	4a59      	ldr	r2, [pc, #356]	; (8001a60 <HAL_GPIO_Init+0x330>)
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	089b      	lsrs	r3, r3, #2
 8001900:	3302      	adds	r3, #2
 8001902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001906:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	f003 0303 	and.w	r3, r3, #3
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	220f      	movs	r2, #15
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43db      	mvns	r3, r3
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	4013      	ands	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001924:	d025      	beq.n	8001972 <HAL_GPIO_Init+0x242>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a4e      	ldr	r2, [pc, #312]	; (8001a64 <HAL_GPIO_Init+0x334>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d01f      	beq.n	800196e <HAL_GPIO_Init+0x23e>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a4d      	ldr	r2, [pc, #308]	; (8001a68 <HAL_GPIO_Init+0x338>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d019      	beq.n	800196a <HAL_GPIO_Init+0x23a>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a4c      	ldr	r2, [pc, #304]	; (8001a6c <HAL_GPIO_Init+0x33c>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d013      	beq.n	8001966 <HAL_GPIO_Init+0x236>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a4b      	ldr	r2, [pc, #300]	; (8001a70 <HAL_GPIO_Init+0x340>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d00d      	beq.n	8001962 <HAL_GPIO_Init+0x232>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a4a      	ldr	r2, [pc, #296]	; (8001a74 <HAL_GPIO_Init+0x344>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d007      	beq.n	800195e <HAL_GPIO_Init+0x22e>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a49      	ldr	r2, [pc, #292]	; (8001a78 <HAL_GPIO_Init+0x348>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d101      	bne.n	800195a <HAL_GPIO_Init+0x22a>
 8001956:	2306      	movs	r3, #6
 8001958:	e00c      	b.n	8001974 <HAL_GPIO_Init+0x244>
 800195a:	2307      	movs	r3, #7
 800195c:	e00a      	b.n	8001974 <HAL_GPIO_Init+0x244>
 800195e:	2305      	movs	r3, #5
 8001960:	e008      	b.n	8001974 <HAL_GPIO_Init+0x244>
 8001962:	2304      	movs	r3, #4
 8001964:	e006      	b.n	8001974 <HAL_GPIO_Init+0x244>
 8001966:	2303      	movs	r3, #3
 8001968:	e004      	b.n	8001974 <HAL_GPIO_Init+0x244>
 800196a:	2302      	movs	r3, #2
 800196c:	e002      	b.n	8001974 <HAL_GPIO_Init+0x244>
 800196e:	2301      	movs	r3, #1
 8001970:	e000      	b.n	8001974 <HAL_GPIO_Init+0x244>
 8001972:	2300      	movs	r3, #0
 8001974:	697a      	ldr	r2, [r7, #20]
 8001976:	f002 0203 	and.w	r2, r2, #3
 800197a:	0092      	lsls	r2, r2, #2
 800197c:	4093      	lsls	r3, r2
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	4313      	orrs	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001984:	4936      	ldr	r1, [pc, #216]	; (8001a60 <HAL_GPIO_Init+0x330>)
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	089b      	lsrs	r3, r3, #2
 800198a:	3302      	adds	r3, #2
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001992:	4b3a      	ldr	r3, [pc, #232]	; (8001a7c <HAL_GPIO_Init+0x34c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	43db      	mvns	r3, r3
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	4013      	ands	r3, r2
 80019a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d003      	beq.n	80019b6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019b6:	4a31      	ldr	r2, [pc, #196]	; (8001a7c <HAL_GPIO_Init+0x34c>)
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80019bc:	4b2f      	ldr	r3, [pc, #188]	; (8001a7c <HAL_GPIO_Init+0x34c>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	43db      	mvns	r3, r3
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	4013      	ands	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d003      	beq.n	80019e0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	4313      	orrs	r3, r2
 80019de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019e0:	4a26      	ldr	r2, [pc, #152]	; (8001a7c <HAL_GPIO_Init+0x34c>)
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019e6:	4b25      	ldr	r3, [pc, #148]	; (8001a7c <HAL_GPIO_Init+0x34c>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	43db      	mvns	r3, r3
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	4013      	ands	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d003      	beq.n	8001a0a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a0a:	4a1c      	ldr	r2, [pc, #112]	; (8001a7c <HAL_GPIO_Init+0x34c>)
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a10:	4b1a      	ldr	r3, [pc, #104]	; (8001a7c <HAL_GPIO_Init+0x34c>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d003      	beq.n	8001a34 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a34:	4a11      	ldr	r2, [pc, #68]	; (8001a7c <HAL_GPIO_Init+0x34c>)
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	fa22 f303 	lsr.w	r3, r2, r3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f47f ae78 	bne.w	8001740 <HAL_GPIO_Init+0x10>
  }
}
 8001a50:	bf00      	nop
 8001a52:	371c      	adds	r7, #28
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	40010000 	.word	0x40010000
 8001a64:	48000400 	.word	0x48000400
 8001a68:	48000800 	.word	0x48000800
 8001a6c:	48000c00 	.word	0x48000c00
 8001a70:	48001000 	.word	0x48001000
 8001a74:	48001400 	.word	0x48001400
 8001a78:	48001800 	.word	0x48001800
 8001a7c:	40010400 	.word	0x40010400

08001a80 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b087      	sub	sp, #28
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001a8e:	e0cd      	b.n	8001c2c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001a90:	2201      	movs	r2, #1
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f000 80c0 	beq.w	8001c26 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001aa6:	4a68      	ldr	r2, [pc, #416]	; (8001c48 <HAL_GPIO_DeInit+0x1c8>)
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	089b      	lsrs	r3, r3, #2
 8001aac:	3302      	adds	r3, #2
 8001aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	f003 0303 	and.w	r3, r3, #3
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	220f      	movs	r2, #15
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ace:	d025      	beq.n	8001b1c <HAL_GPIO_DeInit+0x9c>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4a5e      	ldr	r2, [pc, #376]	; (8001c4c <HAL_GPIO_DeInit+0x1cc>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d01f      	beq.n	8001b18 <HAL_GPIO_DeInit+0x98>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4a5d      	ldr	r2, [pc, #372]	; (8001c50 <HAL_GPIO_DeInit+0x1d0>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d019      	beq.n	8001b14 <HAL_GPIO_DeInit+0x94>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4a5c      	ldr	r2, [pc, #368]	; (8001c54 <HAL_GPIO_DeInit+0x1d4>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d013      	beq.n	8001b10 <HAL_GPIO_DeInit+0x90>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4a5b      	ldr	r2, [pc, #364]	; (8001c58 <HAL_GPIO_DeInit+0x1d8>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d00d      	beq.n	8001b0c <HAL_GPIO_DeInit+0x8c>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a5a      	ldr	r2, [pc, #360]	; (8001c5c <HAL_GPIO_DeInit+0x1dc>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d007      	beq.n	8001b08 <HAL_GPIO_DeInit+0x88>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a59      	ldr	r2, [pc, #356]	; (8001c60 <HAL_GPIO_DeInit+0x1e0>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d101      	bne.n	8001b04 <HAL_GPIO_DeInit+0x84>
 8001b00:	2306      	movs	r3, #6
 8001b02:	e00c      	b.n	8001b1e <HAL_GPIO_DeInit+0x9e>
 8001b04:	2307      	movs	r3, #7
 8001b06:	e00a      	b.n	8001b1e <HAL_GPIO_DeInit+0x9e>
 8001b08:	2305      	movs	r3, #5
 8001b0a:	e008      	b.n	8001b1e <HAL_GPIO_DeInit+0x9e>
 8001b0c:	2304      	movs	r3, #4
 8001b0e:	e006      	b.n	8001b1e <HAL_GPIO_DeInit+0x9e>
 8001b10:	2303      	movs	r3, #3
 8001b12:	e004      	b.n	8001b1e <HAL_GPIO_DeInit+0x9e>
 8001b14:	2302      	movs	r3, #2
 8001b16:	e002      	b.n	8001b1e <HAL_GPIO_DeInit+0x9e>
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e000      	b.n	8001b1e <HAL_GPIO_DeInit+0x9e>
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	f002 0203 	and.w	r2, r2, #3
 8001b24:	0092      	lsls	r2, r2, #2
 8001b26:	4093      	lsls	r3, r2
 8001b28:	68fa      	ldr	r2, [r7, #12]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d132      	bne.n	8001b94 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001b2e:	4b4d      	ldr	r3, [pc, #308]	; (8001c64 <HAL_GPIO_DeInit+0x1e4>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	43db      	mvns	r3, r3
 8001b36:	494b      	ldr	r1, [pc, #300]	; (8001c64 <HAL_GPIO_DeInit+0x1e4>)
 8001b38:	4013      	ands	r3, r2
 8001b3a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001b3c:	4b49      	ldr	r3, [pc, #292]	; (8001c64 <HAL_GPIO_DeInit+0x1e4>)
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	43db      	mvns	r3, r3
 8001b44:	4947      	ldr	r1, [pc, #284]	; (8001c64 <HAL_GPIO_DeInit+0x1e4>)
 8001b46:	4013      	ands	r3, r2
 8001b48:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8001b4a:	4b46      	ldr	r3, [pc, #280]	; (8001c64 <HAL_GPIO_DeInit+0x1e4>)
 8001b4c:	689a      	ldr	r2, [r3, #8]
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	43db      	mvns	r3, r3
 8001b52:	4944      	ldr	r1, [pc, #272]	; (8001c64 <HAL_GPIO_DeInit+0x1e4>)
 8001b54:	4013      	ands	r3, r2
 8001b56:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8001b58:	4b42      	ldr	r3, [pc, #264]	; (8001c64 <HAL_GPIO_DeInit+0x1e4>)
 8001b5a:	68da      	ldr	r2, [r3, #12]
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	4940      	ldr	r1, [pc, #256]	; (8001c64 <HAL_GPIO_DeInit+0x1e4>)
 8001b62:	4013      	ands	r3, r2
 8001b64:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	f003 0303 	and.w	r3, r3, #3
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	220f      	movs	r2, #15
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001b76:	4a34      	ldr	r2, [pc, #208]	; (8001c48 <HAL_GPIO_DeInit+0x1c8>)
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	089b      	lsrs	r3, r3, #2
 8001b7c:	3302      	adds	r3, #2
 8001b7e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	43da      	mvns	r2, r3
 8001b86:	4830      	ldr	r0, [pc, #192]	; (8001c48 <HAL_GPIO_DeInit+0x1c8>)
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	089b      	lsrs	r3, r3, #2
 8001b8c:	400a      	ands	r2, r1
 8001b8e:	3302      	adds	r3, #2
 8001b90:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	2103      	movs	r1, #3
 8001b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	08da      	lsrs	r2, r3, #3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3208      	adds	r2, #8
 8001bb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	220f      	movs	r2, #15
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	08d2      	lsrs	r2, r2, #3
 8001bc8:	4019      	ands	r1, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	3208      	adds	r2, #8
 8001bce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	689a      	ldr	r2, [r3, #8]
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	2103      	movs	r1, #3
 8001bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	401a      	ands	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685a      	ldr	r2, [r3, #4]
 8001bec:	2101      	movs	r1, #1
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	401a      	ands	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	68da      	ldr	r2, [r3, #12]
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	2103      	movs	r1, #3
 8001c06:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	401a      	ands	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c16:	2101      	movs	r1, #1
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	401a      	ands	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	fa22 f303 	lsr.w	r3, r2, r3
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f47f af2b 	bne.w	8001a90 <HAL_GPIO_DeInit+0x10>
  }
}
 8001c3a:	bf00      	nop
 8001c3c:	371c      	adds	r7, #28
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	40010000 	.word	0x40010000
 8001c4c:	48000400 	.word	0x48000400
 8001c50:	48000800 	.word	0x48000800
 8001c54:	48000c00 	.word	0x48000c00
 8001c58:	48001000 	.word	0x48001000
 8001c5c:	48001400 	.word	0x48001400
 8001c60:	48001800 	.word	0x48001800
 8001c64:	40010400 	.word	0x40010400

08001c68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	460b      	mov	r3, r1
 8001c72:	807b      	strh	r3, [r7, #2]
 8001c74:	4613      	mov	r3, r2
 8001c76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c78:	787b      	ldrb	r3, [r7, #1]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c7e:	887a      	ldrh	r2, [r7, #2]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c84:	e002      	b.n	8001c8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c86:	887a      	ldrh	r2, [r7, #2]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e081      	b.n	8001dae <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d106      	bne.n	8001cc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f004 f95e 	bl	8005f80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2224      	movs	r2, #36	; 0x24
 8001cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f022 0201 	bic.w	r2, r2, #1
 8001cda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ce8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	689a      	ldr	r2, [r3, #8]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cf8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d107      	bne.n	8001d12 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	689a      	ldr	r2, [r3, #8]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	e006      	b.n	8001d20 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	689a      	ldr	r2, [r3, #8]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001d1e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d104      	bne.n	8001d32 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d30:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	6812      	ldr	r2, [r2, #0]
 8001d3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d44:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68da      	ldr	r2, [r3, #12]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d54:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	691a      	ldr	r2, [r3, #16]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	ea42 0103 	orr.w	r1, r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	021a      	lsls	r2, r3, #8
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	69d9      	ldr	r1, [r3, #28]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a1a      	ldr	r2, [r3, #32]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f042 0201 	orr.w	r2, r2, #1
 8001d8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2220      	movs	r2, #32
 8001d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e021      	b.n	8001e0c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2224      	movs	r2, #36	; 0x24
 8001dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 0201 	bic.w	r2, r2, #1
 8001dde:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f004 f911 	bl	8006008 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b088      	sub	sp, #32
 8001e18:	af02      	add	r7, sp, #8
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	4608      	mov	r0, r1
 8001e1e:	4611      	mov	r1, r2
 8001e20:	461a      	mov	r2, r3
 8001e22:	4603      	mov	r3, r0
 8001e24:	817b      	strh	r3, [r7, #10]
 8001e26:	460b      	mov	r3, r1
 8001e28:	813b      	strh	r3, [r7, #8]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b20      	cmp	r3, #32
 8001e38:	f040 80f9 	bne.w	800202e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e3c:	6a3b      	ldr	r3, [r7, #32]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d002      	beq.n	8001e48 <HAL_I2C_Mem_Write+0x34>
 8001e42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d105      	bne.n	8001e54 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e4e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e0ed      	b.n	8002030 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d101      	bne.n	8001e62 <HAL_I2C_Mem_Write+0x4e>
 8001e5e:	2302      	movs	r3, #2
 8001e60:	e0e6      	b.n	8002030 <HAL_I2C_Mem_Write+0x21c>
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e6a:	f7ff f87d 	bl	8000f68 <HAL_GetTick>
 8001e6e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	2319      	movs	r3, #25
 8001e76:	2201      	movs	r2, #1
 8001e78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e7c:	68f8      	ldr	r0, [r7, #12]
 8001e7e:	f000 fac3 	bl	8002408 <I2C_WaitOnFlagUntilTimeout>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e0d1      	b.n	8002030 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2221      	movs	r2, #33	; 0x21
 8001e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2240      	movs	r2, #64	; 0x40
 8001e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6a3a      	ldr	r2, [r7, #32]
 8001ea6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001eac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001eb4:	88f8      	ldrh	r0, [r7, #6]
 8001eb6:	893a      	ldrh	r2, [r7, #8]
 8001eb8:	8979      	ldrh	r1, [r7, #10]
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	9301      	str	r3, [sp, #4]
 8001ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec0:	9300      	str	r3, [sp, #0]
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	68f8      	ldr	r0, [r7, #12]
 8001ec6:	f000 f9d3 	bl	8002270 <I2C_RequestMemoryWrite>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d005      	beq.n	8001edc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e0a9      	b.n	8002030 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	2bff      	cmp	r3, #255	; 0xff
 8001ee4:	d90e      	bls.n	8001f04 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	22ff      	movs	r2, #255	; 0xff
 8001eea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ef0:	b2da      	uxtb	r2, r3
 8001ef2:	8979      	ldrh	r1, [r7, #10]
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001efc:	68f8      	ldr	r0, [r7, #12]
 8001efe:	f000 fba5 	bl	800264c <I2C_TransferConfig>
 8001f02:	e00f      	b.n	8001f24 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	8979      	ldrh	r1, [r7, #10]
 8001f16:	2300      	movs	r3, #0
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f000 fb94 	bl	800264c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f28:	68f8      	ldr	r0, [r7, #12]
 8001f2a:	f000 faad 	bl	8002488 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e07b      	b.n	8002030 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3c:	781a      	ldrb	r2, [r3, #0]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f48:	1c5a      	adds	r2, r3, #1
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	3b01      	subs	r3, #1
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f60:	3b01      	subs	r3, #1
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d034      	beq.n	8001fdc <HAL_I2C_Mem_Write+0x1c8>
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d130      	bne.n	8001fdc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	9300      	str	r3, [sp, #0]
 8001f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f80:	2200      	movs	r2, #0
 8001f82:	2180      	movs	r1, #128	; 0x80
 8001f84:	68f8      	ldr	r0, [r7, #12]
 8001f86:	f000 fa3f 	bl	8002408 <I2C_WaitOnFlagUntilTimeout>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e04d      	b.n	8002030 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	2bff      	cmp	r3, #255	; 0xff
 8001f9c:	d90e      	bls.n	8001fbc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	22ff      	movs	r2, #255	; 0xff
 8001fa2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	8979      	ldrh	r1, [r7, #10]
 8001fac:	2300      	movs	r3, #0
 8001fae:	9300      	str	r3, [sp, #0]
 8001fb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fb4:	68f8      	ldr	r0, [r7, #12]
 8001fb6:	f000 fb49 	bl	800264c <I2C_TransferConfig>
 8001fba:	e00f      	b.n	8001fdc <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	8979      	ldrh	r1, [r7, #10]
 8001fce:	2300      	movs	r3, #0
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fd6:	68f8      	ldr	r0, [r7, #12]
 8001fd8:	f000 fb38 	bl	800264c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d19e      	bne.n	8001f24 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fe6:	697a      	ldr	r2, [r7, #20]
 8001fe8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fea:	68f8      	ldr	r0, [r7, #12]
 8001fec:	f000 fa8c 	bl	8002508 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e01a      	b.n	8002030 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2220      	movs	r2, #32
 8002000:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6859      	ldr	r1, [r3, #4]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	4b0a      	ldr	r3, [pc, #40]	; (8002038 <HAL_I2C_Mem_Write+0x224>)
 800200e:	400b      	ands	r3, r1
 8002010:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2220      	movs	r2, #32
 8002016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800202a:	2300      	movs	r3, #0
 800202c:	e000      	b.n	8002030 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800202e:	2302      	movs	r3, #2
  }
}
 8002030:	4618      	mov	r0, r3
 8002032:	3718      	adds	r7, #24
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	fe00e800 	.word	0xfe00e800

0800203c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b088      	sub	sp, #32
 8002040:	af02      	add	r7, sp, #8
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	4608      	mov	r0, r1
 8002046:	4611      	mov	r1, r2
 8002048:	461a      	mov	r2, r3
 800204a:	4603      	mov	r3, r0
 800204c:	817b      	strh	r3, [r7, #10]
 800204e:	460b      	mov	r3, r1
 8002050:	813b      	strh	r3, [r7, #8]
 8002052:	4613      	mov	r3, r2
 8002054:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b20      	cmp	r3, #32
 8002060:	f040 80fd 	bne.w	800225e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002064:	6a3b      	ldr	r3, [r7, #32]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d002      	beq.n	8002070 <HAL_I2C_Mem_Read+0x34>
 800206a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800206c:	2b00      	cmp	r3, #0
 800206e:	d105      	bne.n	800207c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002076:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e0f1      	b.n	8002260 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002082:	2b01      	cmp	r3, #1
 8002084:	d101      	bne.n	800208a <HAL_I2C_Mem_Read+0x4e>
 8002086:	2302      	movs	r3, #2
 8002088:	e0ea      	b.n	8002260 <HAL_I2C_Mem_Read+0x224>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002092:	f7fe ff69 	bl	8000f68 <HAL_GetTick>
 8002096:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	9300      	str	r3, [sp, #0]
 800209c:	2319      	movs	r3, #25
 800209e:	2201      	movs	r2, #1
 80020a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020a4:	68f8      	ldr	r0, [r7, #12]
 80020a6:	f000 f9af 	bl	8002408 <I2C_WaitOnFlagUntilTimeout>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e0d5      	b.n	8002260 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2222      	movs	r2, #34	; 0x22
 80020b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2240      	movs	r2, #64	; 0x40
 80020c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6a3a      	ldr	r2, [r7, #32]
 80020ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80020d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2200      	movs	r2, #0
 80020da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80020dc:	88f8      	ldrh	r0, [r7, #6]
 80020de:	893a      	ldrh	r2, [r7, #8]
 80020e0:	8979      	ldrh	r1, [r7, #10]
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	9301      	str	r3, [sp, #4]
 80020e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e8:	9300      	str	r3, [sp, #0]
 80020ea:	4603      	mov	r3, r0
 80020ec:	68f8      	ldr	r0, [r7, #12]
 80020ee:	f000 f913 	bl	8002318 <I2C_RequestMemoryRead>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d005      	beq.n	8002104 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e0ad      	b.n	8002260 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002108:	b29b      	uxth	r3, r3
 800210a:	2bff      	cmp	r3, #255	; 0xff
 800210c:	d90e      	bls.n	800212c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	22ff      	movs	r2, #255	; 0xff
 8002112:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002118:	b2da      	uxtb	r2, r3
 800211a:	8979      	ldrh	r1, [r7, #10]
 800211c:	4b52      	ldr	r3, [pc, #328]	; (8002268 <HAL_I2C_Mem_Read+0x22c>)
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	f000 fa91 	bl	800264c <I2C_TransferConfig>
 800212a:	e00f      	b.n	800214c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002130:	b29a      	uxth	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800213a:	b2da      	uxtb	r2, r3
 800213c:	8979      	ldrh	r1, [r7, #10]
 800213e:	4b4a      	ldr	r3, [pc, #296]	; (8002268 <HAL_I2C_Mem_Read+0x22c>)
 8002140:	9300      	str	r3, [sp, #0]
 8002142:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f000 fa80 	bl	800264c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002152:	2200      	movs	r2, #0
 8002154:	2104      	movs	r1, #4
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	f000 f956 	bl	8002408 <I2C_WaitOnFlagUntilTimeout>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e07c      	b.n	8002260 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002178:	1c5a      	adds	r2, r3, #1
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002182:	3b01      	subs	r3, #1
 8002184:	b29a      	uxth	r2, r3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800218e:	b29b      	uxth	r3, r3
 8002190:	3b01      	subs	r3, #1
 8002192:	b29a      	uxth	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800219c:	b29b      	uxth	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d034      	beq.n	800220c <HAL_I2C_Mem_Read+0x1d0>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d130      	bne.n	800220c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b0:	2200      	movs	r2, #0
 80021b2:	2180      	movs	r1, #128	; 0x80
 80021b4:	68f8      	ldr	r0, [r7, #12]
 80021b6:	f000 f927 	bl	8002408 <I2C_WaitOnFlagUntilTimeout>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e04d      	b.n	8002260 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	2bff      	cmp	r3, #255	; 0xff
 80021cc:	d90e      	bls.n	80021ec <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	22ff      	movs	r2, #255	; 0xff
 80021d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d8:	b2da      	uxtb	r2, r3
 80021da:	8979      	ldrh	r1, [r7, #10]
 80021dc:	2300      	movs	r3, #0
 80021de:	9300      	str	r3, [sp, #0]
 80021e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021e4:	68f8      	ldr	r0, [r7, #12]
 80021e6:	f000 fa31 	bl	800264c <I2C_TransferConfig>
 80021ea:	e00f      	b.n	800220c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021fa:	b2da      	uxtb	r2, r3
 80021fc:	8979      	ldrh	r1, [r7, #10]
 80021fe:	2300      	movs	r3, #0
 8002200:	9300      	str	r3, [sp, #0]
 8002202:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002206:	68f8      	ldr	r0, [r7, #12]
 8002208:	f000 fa20 	bl	800264c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002210:	b29b      	uxth	r3, r3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d19a      	bne.n	800214c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f000 f974 	bl	8002508 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e01a      	b.n	8002260 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2220      	movs	r2, #32
 8002230:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	6859      	ldr	r1, [r3, #4]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	4b0b      	ldr	r3, [pc, #44]	; (800226c <HAL_I2C_Mem_Read+0x230>)
 800223e:	400b      	ands	r3, r1
 8002240:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2220      	movs	r2, #32
 8002246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800225a:	2300      	movs	r3, #0
 800225c:	e000      	b.n	8002260 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800225e:	2302      	movs	r3, #2
  }
}
 8002260:	4618      	mov	r0, r3
 8002262:	3718      	adds	r7, #24
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	80002400 	.word	0x80002400
 800226c:	fe00e800 	.word	0xfe00e800

08002270 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af02      	add	r7, sp, #8
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	4608      	mov	r0, r1
 800227a:	4611      	mov	r1, r2
 800227c:	461a      	mov	r2, r3
 800227e:	4603      	mov	r3, r0
 8002280:	817b      	strh	r3, [r7, #10]
 8002282:	460b      	mov	r3, r1
 8002284:	813b      	strh	r3, [r7, #8]
 8002286:	4613      	mov	r3, r2
 8002288:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800228a:	88fb      	ldrh	r3, [r7, #6]
 800228c:	b2da      	uxtb	r2, r3
 800228e:	8979      	ldrh	r1, [r7, #10]
 8002290:	4b20      	ldr	r3, [pc, #128]	; (8002314 <I2C_RequestMemoryWrite+0xa4>)
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002298:	68f8      	ldr	r0, [r7, #12]
 800229a:	f000 f9d7 	bl	800264c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800229e:	69fa      	ldr	r2, [r7, #28]
 80022a0:	69b9      	ldr	r1, [r7, #24]
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f000 f8f0 	bl	8002488 <I2C_WaitOnTXISFlagUntilTimeout>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e02c      	b.n	800230c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80022b2:	88fb      	ldrh	r3, [r7, #6]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d105      	bne.n	80022c4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80022b8:	893b      	ldrh	r3, [r7, #8]
 80022ba:	b2da      	uxtb	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	629a      	str	r2, [r3, #40]	; 0x28
 80022c2:	e015      	b.n	80022f0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80022c4:	893b      	ldrh	r3, [r7, #8]
 80022c6:	0a1b      	lsrs	r3, r3, #8
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	b2da      	uxtb	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022d2:	69fa      	ldr	r2, [r7, #28]
 80022d4:	69b9      	ldr	r1, [r7, #24]
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f000 f8d6 	bl	8002488 <I2C_WaitOnTXISFlagUntilTimeout>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e012      	b.n	800230c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80022e6:	893b      	ldrh	r3, [r7, #8]
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	2200      	movs	r2, #0
 80022f8:	2180      	movs	r1, #128	; 0x80
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f000 f884 	bl	8002408 <I2C_WaitOnFlagUntilTimeout>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e000      	b.n	800230c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	80002000 	.word	0x80002000

08002318 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af02      	add	r7, sp, #8
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	4608      	mov	r0, r1
 8002322:	4611      	mov	r1, r2
 8002324:	461a      	mov	r2, r3
 8002326:	4603      	mov	r3, r0
 8002328:	817b      	strh	r3, [r7, #10]
 800232a:	460b      	mov	r3, r1
 800232c:	813b      	strh	r3, [r7, #8]
 800232e:	4613      	mov	r3, r2
 8002330:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002332:	88fb      	ldrh	r3, [r7, #6]
 8002334:	b2da      	uxtb	r2, r3
 8002336:	8979      	ldrh	r1, [r7, #10]
 8002338:	4b20      	ldr	r3, [pc, #128]	; (80023bc <I2C_RequestMemoryRead+0xa4>)
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	2300      	movs	r3, #0
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f000 f984 	bl	800264c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002344:	69fa      	ldr	r2, [r7, #28]
 8002346:	69b9      	ldr	r1, [r7, #24]
 8002348:	68f8      	ldr	r0, [r7, #12]
 800234a:	f000 f89d 	bl	8002488 <I2C_WaitOnTXISFlagUntilTimeout>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e02c      	b.n	80023b2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002358:	88fb      	ldrh	r3, [r7, #6]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d105      	bne.n	800236a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800235e:	893b      	ldrh	r3, [r7, #8]
 8002360:	b2da      	uxtb	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	629a      	str	r2, [r3, #40]	; 0x28
 8002368:	e015      	b.n	8002396 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800236a:	893b      	ldrh	r3, [r7, #8]
 800236c:	0a1b      	lsrs	r3, r3, #8
 800236e:	b29b      	uxth	r3, r3
 8002370:	b2da      	uxtb	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002378:	69fa      	ldr	r2, [r7, #28]
 800237a:	69b9      	ldr	r1, [r7, #24]
 800237c:	68f8      	ldr	r0, [r7, #12]
 800237e:	f000 f883 	bl	8002488 <I2C_WaitOnTXISFlagUntilTimeout>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e012      	b.n	80023b2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800238c:	893b      	ldrh	r3, [r7, #8]
 800238e:	b2da      	uxtb	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	2200      	movs	r2, #0
 800239e:	2140      	movs	r1, #64	; 0x40
 80023a0:	68f8      	ldr	r0, [r7, #12]
 80023a2:	f000 f831 	bl	8002408 <I2C_WaitOnFlagUntilTimeout>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e000      	b.n	80023b2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	80002000 	.word	0x80002000

080023c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d103      	bne.n	80023de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2200      	movs	r2, #0
 80023dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d007      	beq.n	80023fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	699a      	ldr	r2, [r3, #24]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f042 0201 	orr.w	r2, r2, #1
 80023fa:	619a      	str	r2, [r3, #24]
  }
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	603b      	str	r3, [r7, #0]
 8002414:	4613      	mov	r3, r2
 8002416:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002418:	e022      	b.n	8002460 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002420:	d01e      	beq.n	8002460 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002422:	f7fe fda1 	bl	8000f68 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	429a      	cmp	r2, r3
 8002430:	d302      	bcc.n	8002438 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d113      	bne.n	8002460 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243c:	f043 0220 	orr.w	r2, r3, #32
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2220      	movs	r2, #32
 8002448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e00f      	b.n	8002480 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	699a      	ldr	r2, [r3, #24]
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	4013      	ands	r3, r2
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	429a      	cmp	r2, r3
 800246e:	bf0c      	ite	eq
 8002470:	2301      	moveq	r3, #1
 8002472:	2300      	movne	r3, #0
 8002474:	b2db      	uxtb	r3, r3
 8002476:	461a      	mov	r2, r3
 8002478:	79fb      	ldrb	r3, [r7, #7]
 800247a:	429a      	cmp	r2, r3
 800247c:	d0cd      	beq.n	800241a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002494:	e02c      	b.n	80024f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	68b9      	ldr	r1, [r7, #8]
 800249a:	68f8      	ldr	r0, [r7, #12]
 800249c:	f000 f870 	bl	8002580 <I2C_IsAcknowledgeFailed>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e02a      	b.n	8002500 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b0:	d01e      	beq.n	80024f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024b2:	f7fe fd59 	bl	8000f68 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	68ba      	ldr	r2, [r7, #8]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d302      	bcc.n	80024c8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d113      	bne.n	80024f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024cc:	f043 0220 	orr.w	r2, r3, #32
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2220      	movs	r2, #32
 80024d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e007      	b.n	8002500 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d1cb      	bne.n	8002496 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	3710      	adds	r7, #16
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002514:	e028      	b.n	8002568 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	68b9      	ldr	r1, [r7, #8]
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 f830 	bl	8002580 <I2C_IsAcknowledgeFailed>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e026      	b.n	8002578 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800252a:	f7fe fd1d 	bl	8000f68 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	68ba      	ldr	r2, [r7, #8]
 8002536:	429a      	cmp	r2, r3
 8002538:	d302      	bcc.n	8002540 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d113      	bne.n	8002568 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002544:	f043 0220 	orr.w	r2, r3, #32
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2220      	movs	r2, #32
 8002550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e007      	b.n	8002578 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	f003 0320 	and.w	r3, r3, #32
 8002572:	2b20      	cmp	r3, #32
 8002574:	d1cf      	bne.n	8002516 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	f003 0310 	and.w	r3, r3, #16
 8002596:	2b10      	cmp	r3, #16
 8002598:	d151      	bne.n	800263e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800259a:	e022      	b.n	80025e2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a2:	d01e      	beq.n	80025e2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025a4:	f7fe fce0 	bl	8000f68 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	68ba      	ldr	r2, [r7, #8]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d302      	bcc.n	80025ba <I2C_IsAcknowledgeFailed+0x3a>
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d113      	bne.n	80025e2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025be:	f043 0220 	orr.w	r2, r3, #32
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2220      	movs	r2, #32
 80025ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e02e      	b.n	8002640 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	f003 0320 	and.w	r3, r3, #32
 80025ec:	2b20      	cmp	r3, #32
 80025ee:	d1d5      	bne.n	800259c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2210      	movs	r2, #16
 80025f6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2220      	movs	r2, #32
 80025fe:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	f7ff fedd 	bl	80023c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6859      	ldr	r1, [r3, #4]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	4b0d      	ldr	r3, [pc, #52]	; (8002648 <I2C_IsAcknowledgeFailed+0xc8>)
 8002612:	400b      	ands	r3, r1
 8002614:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261a:	f043 0204 	orr.w	r2, r3, #4
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2220      	movs	r2, #32
 8002626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	fe00e800 	.word	0xfe00e800

0800264c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	607b      	str	r3, [r7, #4]
 8002656:	460b      	mov	r3, r1
 8002658:	817b      	strh	r3, [r7, #10]
 800265a:	4613      	mov	r3, r2
 800265c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	685a      	ldr	r2, [r3, #4]
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	0d5b      	lsrs	r3, r3, #21
 8002668:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800266c:	4b0d      	ldr	r3, [pc, #52]	; (80026a4 <I2C_TransferConfig+0x58>)
 800266e:	430b      	orrs	r3, r1
 8002670:	43db      	mvns	r3, r3
 8002672:	ea02 0103 	and.w	r1, r2, r3
 8002676:	897b      	ldrh	r3, [r7, #10]
 8002678:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800267c:	7a7b      	ldrb	r3, [r7, #9]
 800267e:	041b      	lsls	r3, r3, #16
 8002680:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002684:	431a      	orrs	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	431a      	orrs	r2, r3
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	431a      	orrs	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	430a      	orrs	r2, r1
 8002694:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002696:	bf00      	nop
 8002698:	3714      	adds	r7, #20
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	03ff63ff 	.word	0x03ff63ff

080026a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b20      	cmp	r3, #32
 80026bc:	d138      	bne.n	8002730 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d101      	bne.n	80026cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80026c8:	2302      	movs	r3, #2
 80026ca:	e032      	b.n	8002732 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2224      	movs	r2, #36	; 0x24
 80026d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0201 	bic.w	r2, r2, #1
 80026ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80026fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6819      	ldr	r1, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	430a      	orrs	r2, r1
 800270a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f042 0201 	orr.w	r2, r2, #1
 800271a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2220      	movs	r2, #32
 8002720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800272c:	2300      	movs	r3, #0
 800272e:	e000      	b.n	8002732 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002730:	2302      	movs	r3, #2
  }
}
 8002732:	4618      	mov	r0, r3
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800273e:	b480      	push	{r7}
 8002740:	b085      	sub	sp, #20
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
 8002746:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b20      	cmp	r3, #32
 8002752:	d139      	bne.n	80027c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800275a:	2b01      	cmp	r3, #1
 800275c:	d101      	bne.n	8002762 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800275e:	2302      	movs	r3, #2
 8002760:	e033      	b.n	80027ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2224      	movs	r2, #36	; 0x24
 800276e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0201 	bic.w	r2, r2, #1
 8002780:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002790:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	021b      	lsls	r3, r3, #8
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	4313      	orrs	r3, r2
 800279a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f042 0201 	orr.w	r2, r2, #1
 80027b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2220      	movs	r2, #32
 80027b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027c4:	2300      	movs	r3, #0
 80027c6:	e000      	b.n	80027ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80027c8:	2302      	movs	r3, #2
  }
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3714      	adds	r7, #20
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
	...

080027d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80027dc:	4b04      	ldr	r3, [pc, #16]	; (80027f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	40007000 	.word	0x40007000

080027f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002802:	d130      	bne.n	8002866 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002804:	4b23      	ldr	r3, [pc, #140]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800280c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002810:	d038      	beq.n	8002884 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002812:	4b20      	ldr	r3, [pc, #128]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800281a:	4a1e      	ldr	r2, [pc, #120]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800281c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002820:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002822:	4b1d      	ldr	r3, [pc, #116]	; (8002898 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2232      	movs	r2, #50	; 0x32
 8002828:	fb02 f303 	mul.w	r3, r2, r3
 800282c:	4a1b      	ldr	r2, [pc, #108]	; (800289c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800282e:	fba2 2303 	umull	r2, r3, r2, r3
 8002832:	0c9b      	lsrs	r3, r3, #18
 8002834:	3301      	adds	r3, #1
 8002836:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002838:	e002      	b.n	8002840 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	3b01      	subs	r3, #1
 800283e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002840:	4b14      	ldr	r3, [pc, #80]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002848:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800284c:	d102      	bne.n	8002854 <HAL_PWREx_ControlVoltageScaling+0x60>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1f2      	bne.n	800283a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002854:	4b0f      	ldr	r3, [pc, #60]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800285c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002860:	d110      	bne.n	8002884 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e00f      	b.n	8002886 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002866:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800286e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002872:	d007      	beq.n	8002884 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002874:	4b07      	ldr	r3, [pc, #28]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800287c:	4a05      	ldr	r2, [pc, #20]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800287e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002882:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	40007000 	.word	0x40007000
 8002898:	2000003c 	.word	0x2000003c
 800289c:	431bde83 	.word	0x431bde83

080028a0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af02      	add	r7, sp, #8
 80028a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80028a8:	f7fe fb5e 	bl	8000f68 <HAL_GetTick>
 80028ac:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d101      	bne.n	80028b8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e063      	b.n	8002980 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10b      	bne.n	80028dc <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f003 fbbf 	bl	8006050 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80028d2:	f241 3188 	movw	r1, #5000	; 0x1388
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 f858 	bl	800298c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	3b01      	subs	r3, #1
 80028ec:	021a      	lsls	r2, r3, #8
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	430a      	orrs	r2, r1
 80028f4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	2120      	movs	r1, #32
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 f850 	bl	80029a8 <QSPI_WaitFlagStateUntilTimeout>
 8002908:	4603      	mov	r3, r0
 800290a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800290c:	7afb      	ldrb	r3, [r7, #11]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d131      	bne.n	8002976 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800291c:	f023 0310 	bic.w	r3, r3, #16
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	6852      	ldr	r2, [r2, #4]
 8002924:	0611      	lsls	r1, r2, #24
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	68d2      	ldr	r2, [r2, #12]
 800292a:	4311      	orrs	r1, r2
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	6812      	ldr	r2, [r2, #0]
 8002930:	430b      	orrs	r3, r1
 8002932:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	4b13      	ldr	r3, [pc, #76]	; (8002988 <HAL_QSPI_Init+0xe8>)
 800293c:	4013      	ands	r3, r2
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	6912      	ldr	r2, [r2, #16]
 8002942:	0411      	lsls	r1, r2, #16
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	6952      	ldr	r2, [r2, #20]
 8002948:	4311      	orrs	r1, r2
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	6992      	ldr	r2, [r2, #24]
 800294e:	4311      	orrs	r1, r2
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	6812      	ldr	r2, [r2, #0]
 8002954:	430b      	orrs	r3, r1
 8002956:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f042 0201 	orr.w	r2, r2, #1
 8002966:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800297e:	7afb      	ldrb	r3, [r7, #11]
}
 8002980:	4618      	mov	r0, r3
 8002982:	3710      	adds	r7, #16
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	ffe0f8fe 	.word	0xffe0f8fe

0800298c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	603b      	str	r3, [r7, #0]
 80029b4:	4613      	mov	r3, r2
 80029b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80029b8:	e01a      	b.n	80029f0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c0:	d016      	beq.n	80029f0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029c2:	f7fe fad1 	bl	8000f68 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d302      	bcc.n	80029d8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d10b      	bne.n	80029f0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2204      	movs	r2, #4
 80029dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e4:	f043 0201 	orr.w	r2, r3, #1
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e00e      	b.n	8002a0e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689a      	ldr	r2, [r3, #8]
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	4013      	ands	r3, r2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	bf14      	ite	ne
 80029fe:	2301      	movne	r3, #1
 8002a00:	2300      	moveq	r3, #0
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	461a      	mov	r2, r3
 8002a06:	79fb      	ldrb	r3, [r7, #7]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d1d6      	bne.n	80029ba <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
	...

08002a18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b088      	sub	sp, #32
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e3d4      	b.n	80031d4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a2a:	4ba1      	ldr	r3, [pc, #644]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 030c 	and.w	r3, r3, #12
 8002a32:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a34:	4b9e      	ldr	r3, [pc, #632]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	f003 0303 	and.w	r3, r3, #3
 8002a3c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0310 	and.w	r3, r3, #16
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 80e4 	beq.w	8002c14 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d007      	beq.n	8002a62 <HAL_RCC_OscConfig+0x4a>
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	2b0c      	cmp	r3, #12
 8002a56:	f040 808b 	bne.w	8002b70 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	f040 8087 	bne.w	8002b70 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a62:	4b93      	ldr	r3, [pc, #588]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d005      	beq.n	8002a7a <HAL_RCC_OscConfig+0x62>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e3ac      	b.n	80031d4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a1a      	ldr	r2, [r3, #32]
 8002a7e:	4b8c      	ldr	r3, [pc, #560]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0308 	and.w	r3, r3, #8
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d004      	beq.n	8002a94 <HAL_RCC_OscConfig+0x7c>
 8002a8a:	4b89      	ldr	r3, [pc, #548]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a92:	e005      	b.n	8002aa0 <HAL_RCC_OscConfig+0x88>
 8002a94:	4b86      	ldr	r3, [pc, #536]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002a96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a9a:	091b      	lsrs	r3, r3, #4
 8002a9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d223      	bcs.n	8002aec <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f000 fd3f 	bl	800352c <RCC_SetFlashLatencyFromMSIRange>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e38d      	b.n	80031d4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ab8:	4b7d      	ldr	r3, [pc, #500]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a7c      	ldr	r2, [pc, #496]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002abe:	f043 0308 	orr.w	r3, r3, #8
 8002ac2:	6013      	str	r3, [r2, #0]
 8002ac4:	4b7a      	ldr	r3, [pc, #488]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	4977      	ldr	r1, [pc, #476]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ad6:	4b76      	ldr	r3, [pc, #472]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	021b      	lsls	r3, r3, #8
 8002ae4:	4972      	ldr	r1, [pc, #456]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	604b      	str	r3, [r1, #4]
 8002aea:	e025      	b.n	8002b38 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002aec:	4b70      	ldr	r3, [pc, #448]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a6f      	ldr	r2, [pc, #444]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002af2:	f043 0308 	orr.w	r3, r3, #8
 8002af6:	6013      	str	r3, [r2, #0]
 8002af8:	4b6d      	ldr	r3, [pc, #436]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a1b      	ldr	r3, [r3, #32]
 8002b04:	496a      	ldr	r1, [pc, #424]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b0a:	4b69      	ldr	r3, [pc, #420]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	021b      	lsls	r3, r3, #8
 8002b18:	4965      	ldr	r1, [pc, #404]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d109      	bne.n	8002b38 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f000 fcff 	bl	800352c <RCC_SetFlashLatencyFromMSIRange>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e34d      	b.n	80031d4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b38:	f000 fc36 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 8002b3c:	4601      	mov	r1, r0
 8002b3e:	4b5c      	ldr	r3, [pc, #368]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	091b      	lsrs	r3, r3, #4
 8002b44:	f003 030f 	and.w	r3, r3, #15
 8002b48:	4a5a      	ldr	r2, [pc, #360]	; (8002cb4 <HAL_RCC_OscConfig+0x29c>)
 8002b4a:	5cd3      	ldrb	r3, [r2, r3]
 8002b4c:	f003 031f 	and.w	r3, r3, #31
 8002b50:	fa21 f303 	lsr.w	r3, r1, r3
 8002b54:	4a58      	ldr	r2, [pc, #352]	; (8002cb8 <HAL_RCC_OscConfig+0x2a0>)
 8002b56:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b58:	4b58      	ldr	r3, [pc, #352]	; (8002cbc <HAL_RCC_OscConfig+0x2a4>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7fe f9b3 	bl	8000ec8 <HAL_InitTick>
 8002b62:	4603      	mov	r3, r0
 8002b64:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b66:	7bfb      	ldrb	r3, [r7, #15]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d052      	beq.n	8002c12 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002b6c:	7bfb      	ldrb	r3, [r7, #15]
 8002b6e:	e331      	b.n	80031d4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d032      	beq.n	8002bde <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b78:	4b4d      	ldr	r3, [pc, #308]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a4c      	ldr	r2, [pc, #304]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002b7e:	f043 0301 	orr.w	r3, r3, #1
 8002b82:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b84:	f7fe f9f0 	bl	8000f68 <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b8c:	f7fe f9ec 	bl	8000f68 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e31a      	b.n	80031d4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b9e:	4b44      	ldr	r3, [pc, #272]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d0f0      	beq.n	8002b8c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002baa:	4b41      	ldr	r3, [pc, #260]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a40      	ldr	r2, [pc, #256]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002bb0:	f043 0308 	orr.w	r3, r3, #8
 8002bb4:	6013      	str	r3, [r2, #0]
 8002bb6:	4b3e      	ldr	r3, [pc, #248]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	493b      	ldr	r1, [pc, #236]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bc8:	4b39      	ldr	r3, [pc, #228]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	021b      	lsls	r3, r3, #8
 8002bd6:	4936      	ldr	r1, [pc, #216]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	604b      	str	r3, [r1, #4]
 8002bdc:	e01a      	b.n	8002c14 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002bde:	4b34      	ldr	r3, [pc, #208]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a33      	ldr	r2, [pc, #204]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002be4:	f023 0301 	bic.w	r3, r3, #1
 8002be8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bea:	f7fe f9bd 	bl	8000f68 <HAL_GetTick>
 8002bee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bf0:	e008      	b.n	8002c04 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bf2:	f7fe f9b9 	bl	8000f68 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d901      	bls.n	8002c04 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e2e7      	b.n	80031d4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c04:	4b2a      	ldr	r3, [pc, #168]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1f0      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x1da>
 8002c10:	e000      	b.n	8002c14 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c12:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d074      	beq.n	8002d0a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	2b08      	cmp	r3, #8
 8002c24:	d005      	beq.n	8002c32 <HAL_RCC_OscConfig+0x21a>
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	2b0c      	cmp	r3, #12
 8002c2a:	d10e      	bne.n	8002c4a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	2b03      	cmp	r3, #3
 8002c30:	d10b      	bne.n	8002c4a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c32:	4b1f      	ldr	r3, [pc, #124]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d064      	beq.n	8002d08 <HAL_RCC_OscConfig+0x2f0>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d160      	bne.n	8002d08 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e2c4      	b.n	80031d4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c52:	d106      	bne.n	8002c62 <HAL_RCC_OscConfig+0x24a>
 8002c54:	4b16      	ldr	r3, [pc, #88]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a15      	ldr	r2, [pc, #84]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002c5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c5e:	6013      	str	r3, [r2, #0]
 8002c60:	e01d      	b.n	8002c9e <HAL_RCC_OscConfig+0x286>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c6a:	d10c      	bne.n	8002c86 <HAL_RCC_OscConfig+0x26e>
 8002c6c:	4b10      	ldr	r3, [pc, #64]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a0f      	ldr	r2, [pc, #60]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002c72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c76:	6013      	str	r3, [r2, #0]
 8002c78:	4b0d      	ldr	r3, [pc, #52]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a0c      	ldr	r2, [pc, #48]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002c7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c82:	6013      	str	r3, [r2, #0]
 8002c84:	e00b      	b.n	8002c9e <HAL_RCC_OscConfig+0x286>
 8002c86:	4b0a      	ldr	r3, [pc, #40]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a09      	ldr	r2, [pc, #36]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002c8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c90:	6013      	str	r3, [r2, #0]
 8002c92:	4b07      	ldr	r3, [pc, #28]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a06      	ldr	r2, [pc, #24]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002c98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c9c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d01c      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca6:	f7fe f95f 	bl	8000f68 <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cac:	e011      	b.n	8002cd2 <HAL_RCC_OscConfig+0x2ba>
 8002cae:	bf00      	nop
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	08007d7c 	.word	0x08007d7c
 8002cb8:	2000003c 	.word	0x2000003c
 8002cbc:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc0:	f7fe f952 	bl	8000f68 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b64      	cmp	r3, #100	; 0x64
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e280      	b.n	80031d4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cd2:	4baf      	ldr	r3, [pc, #700]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0f0      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x2a8>
 8002cde:	e014      	b.n	8002d0a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce0:	f7fe f942 	bl	8000f68 <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ce8:	f7fe f93e 	bl	8000f68 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b64      	cmp	r3, #100	; 0x64
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e26c      	b.n	80031d4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cfa:	4ba5      	ldr	r3, [pc, #660]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1f0      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x2d0>
 8002d06:	e000      	b.n	8002d0a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d060      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	2b04      	cmp	r3, #4
 8002d1a:	d005      	beq.n	8002d28 <HAL_RCC_OscConfig+0x310>
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	2b0c      	cmp	r3, #12
 8002d20:	d119      	bne.n	8002d56 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d116      	bne.n	8002d56 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d28:	4b99      	ldr	r3, [pc, #612]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d005      	beq.n	8002d40 <HAL_RCC_OscConfig+0x328>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d101      	bne.n	8002d40 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e249      	b.n	80031d4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d40:	4b93      	ldr	r3, [pc, #588]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	061b      	lsls	r3, r3, #24
 8002d4e:	4990      	ldr	r1, [pc, #576]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d54:	e040      	b.n	8002dd8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d023      	beq.n	8002da6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d5e:	4b8c      	ldr	r3, [pc, #560]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a8b      	ldr	r2, [pc, #556]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002d64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6a:	f7fe f8fd 	bl	8000f68 <HAL_GetTick>
 8002d6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d70:	e008      	b.n	8002d84 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d72:	f7fe f8f9 	bl	8000f68 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e227      	b.n	80031d4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d84:	4b82      	ldr	r3, [pc, #520]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d0f0      	beq.n	8002d72 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d90:	4b7f      	ldr	r3, [pc, #508]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	061b      	lsls	r3, r3, #24
 8002d9e:	497c      	ldr	r1, [pc, #496]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	604b      	str	r3, [r1, #4]
 8002da4:	e018      	b.n	8002dd8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002da6:	4b7a      	ldr	r3, [pc, #488]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a79      	ldr	r2, [pc, #484]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002dac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002db0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db2:	f7fe f8d9 	bl	8000f68 <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002db8:	e008      	b.n	8002dcc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dba:	f7fe f8d5 	bl	8000f68 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e203      	b.n	80031d4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002dcc:	4b70      	ldr	r3, [pc, #448]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1f0      	bne.n	8002dba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0308 	and.w	r3, r3, #8
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d03c      	beq.n	8002e5e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d01c      	beq.n	8002e26 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dec:	4b68      	ldr	r3, [pc, #416]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002df2:	4a67      	ldr	r2, [pc, #412]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002df4:	f043 0301 	orr.w	r3, r3, #1
 8002df8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dfc:	f7fe f8b4 	bl	8000f68 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e04:	f7fe f8b0 	bl	8000f68 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e1de      	b.n	80031d4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e16:	4b5e      	ldr	r3, [pc, #376]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002e18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d0ef      	beq.n	8002e04 <HAL_RCC_OscConfig+0x3ec>
 8002e24:	e01b      	b.n	8002e5e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e26:	4b5a      	ldr	r3, [pc, #360]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002e28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e2c:	4a58      	ldr	r2, [pc, #352]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002e2e:	f023 0301 	bic.w	r3, r3, #1
 8002e32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e36:	f7fe f897 	bl	8000f68 <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e3c:	e008      	b.n	8002e50 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e3e:	f7fe f893 	bl	8000f68 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e1c1      	b.n	80031d4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e50:	4b4f      	ldr	r3, [pc, #316]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002e52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1ef      	bne.n	8002e3e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0304 	and.w	r3, r3, #4
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f000 80a6 	beq.w	8002fb8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e70:	4b47      	ldr	r3, [pc, #284]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10d      	bne.n	8002e98 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e7c:	4b44      	ldr	r3, [pc, #272]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e80:	4a43      	ldr	r2, [pc, #268]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002e82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e86:	6593      	str	r3, [r2, #88]	; 0x58
 8002e88:	4b41      	ldr	r3, [pc, #260]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e90:	60bb      	str	r3, [r7, #8]
 8002e92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e94:	2301      	movs	r3, #1
 8002e96:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e98:	4b3e      	ldr	r3, [pc, #248]	; (8002f94 <HAL_RCC_OscConfig+0x57c>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d118      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ea4:	4b3b      	ldr	r3, [pc, #236]	; (8002f94 <HAL_RCC_OscConfig+0x57c>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a3a      	ldr	r2, [pc, #232]	; (8002f94 <HAL_RCC_OscConfig+0x57c>)
 8002eaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eb0:	f7fe f85a 	bl	8000f68 <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eb8:	f7fe f856 	bl	8000f68 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e184      	b.n	80031d4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eca:	4b32      	ldr	r3, [pc, #200]	; (8002f94 <HAL_RCC_OscConfig+0x57c>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d0f0      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d108      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x4d8>
 8002ede:	4b2c      	ldr	r3, [pc, #176]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee4:	4a2a      	ldr	r2, [pc, #168]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002ee6:	f043 0301 	orr.w	r3, r3, #1
 8002eea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002eee:	e024      	b.n	8002f3a <HAL_RCC_OscConfig+0x522>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	2b05      	cmp	r3, #5
 8002ef6:	d110      	bne.n	8002f1a <HAL_RCC_OscConfig+0x502>
 8002ef8:	4b25      	ldr	r3, [pc, #148]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002efe:	4a24      	ldr	r2, [pc, #144]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002f00:	f043 0304 	orr.w	r3, r3, #4
 8002f04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f08:	4b21      	ldr	r3, [pc, #132]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f0e:	4a20      	ldr	r2, [pc, #128]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002f10:	f043 0301 	orr.w	r3, r3, #1
 8002f14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f18:	e00f      	b.n	8002f3a <HAL_RCC_OscConfig+0x522>
 8002f1a:	4b1d      	ldr	r3, [pc, #116]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f20:	4a1b      	ldr	r2, [pc, #108]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002f22:	f023 0301 	bic.w	r3, r3, #1
 8002f26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f2a:	4b19      	ldr	r3, [pc, #100]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f30:	4a17      	ldr	r2, [pc, #92]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002f32:	f023 0304 	bic.w	r3, r3, #4
 8002f36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d016      	beq.n	8002f70 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f42:	f7fe f811 	bl	8000f68 <HAL_GetTick>
 8002f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f48:	e00a      	b.n	8002f60 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f4a:	f7fe f80d 	bl	8000f68 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d901      	bls.n	8002f60 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e139      	b.n	80031d4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f60:	4b0b      	ldr	r3, [pc, #44]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0ed      	beq.n	8002f4a <HAL_RCC_OscConfig+0x532>
 8002f6e:	e01a      	b.n	8002fa6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f70:	f7fd fffa 	bl	8000f68 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f76:	e00f      	b.n	8002f98 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f78:	f7fd fff6 	bl	8000f68 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d906      	bls.n	8002f98 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e122      	b.n	80031d4 <HAL_RCC_OscConfig+0x7bc>
 8002f8e:	bf00      	nop
 8002f90:	40021000 	.word	0x40021000
 8002f94:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f98:	4b90      	ldr	r3, [pc, #576]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 8002f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1e8      	bne.n	8002f78 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fa6:	7ffb      	ldrb	r3, [r7, #31]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d105      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fac:	4b8b      	ldr	r3, [pc, #556]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 8002fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb0:	4a8a      	ldr	r2, [pc, #552]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 8002fb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fb6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f000 8108 	beq.w	80031d2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	f040 80d0 	bne.w	800316c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002fcc:	4b83      	ldr	r3, [pc, #524]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	f003 0203 	and.w	r2, r3, #3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d130      	bne.n	8003042 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	3b01      	subs	r3, #1
 8002fec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d127      	bne.n	8003042 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ffc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d11f      	bne.n	8003042 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800300c:	2a07      	cmp	r2, #7
 800300e:	bf14      	ite	ne
 8003010:	2201      	movne	r2, #1
 8003012:	2200      	moveq	r2, #0
 8003014:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003016:	4293      	cmp	r3, r2
 8003018:	d113      	bne.n	8003042 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003024:	085b      	lsrs	r3, r3, #1
 8003026:	3b01      	subs	r3, #1
 8003028:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800302a:	429a      	cmp	r2, r3
 800302c:	d109      	bne.n	8003042 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003038:	085b      	lsrs	r3, r3, #1
 800303a:	3b01      	subs	r3, #1
 800303c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800303e:	429a      	cmp	r2, r3
 8003040:	d06e      	beq.n	8003120 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	2b0c      	cmp	r3, #12
 8003046:	d069      	beq.n	800311c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003048:	4b64      	ldr	r3, [pc, #400]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d105      	bne.n	8003060 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003054:	4b61      	ldr	r3, [pc, #388]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e0b7      	b.n	80031d4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003064:	4b5d      	ldr	r3, [pc, #372]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a5c      	ldr	r2, [pc, #368]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 800306a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800306e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003070:	f7fd ff7a 	bl	8000f68 <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003078:	f7fd ff76 	bl	8000f68 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e0a4      	b.n	80031d4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800308a:	4b54      	ldr	r3, [pc, #336]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1f0      	bne.n	8003078 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003096:	4b51      	ldr	r3, [pc, #324]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 8003098:	68da      	ldr	r2, [r3, #12]
 800309a:	4b51      	ldr	r3, [pc, #324]	; (80031e0 <HAL_RCC_OscConfig+0x7c8>)
 800309c:	4013      	ands	r3, r2
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80030a6:	3a01      	subs	r2, #1
 80030a8:	0112      	lsls	r2, r2, #4
 80030aa:	4311      	orrs	r1, r2
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030b0:	0212      	lsls	r2, r2, #8
 80030b2:	4311      	orrs	r1, r2
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80030b8:	0852      	lsrs	r2, r2, #1
 80030ba:	3a01      	subs	r2, #1
 80030bc:	0552      	lsls	r2, r2, #21
 80030be:	4311      	orrs	r1, r2
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80030c4:	0852      	lsrs	r2, r2, #1
 80030c6:	3a01      	subs	r2, #1
 80030c8:	0652      	lsls	r2, r2, #25
 80030ca:	4311      	orrs	r1, r2
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030d0:	0912      	lsrs	r2, r2, #4
 80030d2:	0452      	lsls	r2, r2, #17
 80030d4:	430a      	orrs	r2, r1
 80030d6:	4941      	ldr	r1, [pc, #260]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80030dc:	4b3f      	ldr	r3, [pc, #252]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a3e      	ldr	r2, [pc, #248]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 80030e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030e6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030e8:	4b3c      	ldr	r3, [pc, #240]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	4a3b      	ldr	r2, [pc, #236]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 80030ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030f4:	f7fd ff38 	bl	8000f68 <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030fc:	f7fd ff34 	bl	8000f68 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e062      	b.n	80031d4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800310e:	4b33      	ldr	r3, [pc, #204]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d0f0      	beq.n	80030fc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800311a:	e05a      	b.n	80031d2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e059      	b.n	80031d4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003120:	4b2e      	ldr	r3, [pc, #184]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d152      	bne.n	80031d2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800312c:	4b2b      	ldr	r3, [pc, #172]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a2a      	ldr	r2, [pc, #168]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 8003132:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003136:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003138:	4b28      	ldr	r3, [pc, #160]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	4a27      	ldr	r2, [pc, #156]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 800313e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003142:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003144:	f7fd ff10 	bl	8000f68 <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800314c:	f7fd ff0c 	bl	8000f68 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e03a      	b.n	80031d4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800315e:	4b1f      	ldr	r3, [pc, #124]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d0f0      	beq.n	800314c <HAL_RCC_OscConfig+0x734>
 800316a:	e032      	b.n	80031d2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	2b0c      	cmp	r3, #12
 8003170:	d02d      	beq.n	80031ce <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003172:	4b1a      	ldr	r3, [pc, #104]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a19      	ldr	r2, [pc, #100]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 8003178:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800317c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800317e:	4b17      	ldr	r3, [pc, #92]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d105      	bne.n	8003196 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800318a:	4b14      	ldr	r3, [pc, #80]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	4a13      	ldr	r2, [pc, #76]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 8003190:	f023 0303 	bic.w	r3, r3, #3
 8003194:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003196:	4b11      	ldr	r3, [pc, #68]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	4a10      	ldr	r2, [pc, #64]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 800319c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80031a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031a4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a6:	f7fd fedf 	bl	8000f68 <HAL_GetTick>
 80031aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031ac:	e008      	b.n	80031c0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ae:	f7fd fedb 	bl	8000f68 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e009      	b.n	80031d4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031c0:	4b06      	ldr	r3, [pc, #24]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1f0      	bne.n	80031ae <HAL_RCC_OscConfig+0x796>
 80031cc:	e001      	b.n	80031d2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e000      	b.n	80031d4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3720      	adds	r7, #32
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40021000 	.word	0x40021000
 80031e0:	f99d808c 	.word	0xf99d808c

080031e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d101      	bne.n	80031f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e0c8      	b.n	800338a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031f8:	4b66      	ldr	r3, [pc, #408]	; (8003394 <HAL_RCC_ClockConfig+0x1b0>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	429a      	cmp	r2, r3
 8003204:	d910      	bls.n	8003228 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003206:	4b63      	ldr	r3, [pc, #396]	; (8003394 <HAL_RCC_ClockConfig+0x1b0>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f023 0207 	bic.w	r2, r3, #7
 800320e:	4961      	ldr	r1, [pc, #388]	; (8003394 <HAL_RCC_ClockConfig+0x1b0>)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	4313      	orrs	r3, r2
 8003214:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003216:	4b5f      	ldr	r3, [pc, #380]	; (8003394 <HAL_RCC_ClockConfig+0x1b0>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	429a      	cmp	r2, r3
 8003222:	d001      	beq.n	8003228 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e0b0      	b.n	800338a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	2b00      	cmp	r3, #0
 8003232:	d04c      	beq.n	80032ce <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	2b03      	cmp	r3, #3
 800323a:	d107      	bne.n	800324c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800323c:	4b56      	ldr	r3, [pc, #344]	; (8003398 <HAL_RCC_ClockConfig+0x1b4>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d121      	bne.n	800328c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e09e      	b.n	800338a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	2b02      	cmp	r3, #2
 8003252:	d107      	bne.n	8003264 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003254:	4b50      	ldr	r3, [pc, #320]	; (8003398 <HAL_RCC_ClockConfig+0x1b4>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d115      	bne.n	800328c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e092      	b.n	800338a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d107      	bne.n	800327c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800326c:	4b4a      	ldr	r3, [pc, #296]	; (8003398 <HAL_RCC_ClockConfig+0x1b4>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d109      	bne.n	800328c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e086      	b.n	800338a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800327c:	4b46      	ldr	r3, [pc, #280]	; (8003398 <HAL_RCC_ClockConfig+0x1b4>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003284:	2b00      	cmp	r3, #0
 8003286:	d101      	bne.n	800328c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e07e      	b.n	800338a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800328c:	4b42      	ldr	r3, [pc, #264]	; (8003398 <HAL_RCC_ClockConfig+0x1b4>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f023 0203 	bic.w	r2, r3, #3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	493f      	ldr	r1, [pc, #252]	; (8003398 <HAL_RCC_ClockConfig+0x1b4>)
 800329a:	4313      	orrs	r3, r2
 800329c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800329e:	f7fd fe63 	bl	8000f68 <HAL_GetTick>
 80032a2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a4:	e00a      	b.n	80032bc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032a6:	f7fd fe5f 	bl	8000f68 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e066      	b.n	800338a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032bc:	4b36      	ldr	r3, [pc, #216]	; (8003398 <HAL_RCC_ClockConfig+0x1b4>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f003 020c 	and.w	r2, r3, #12
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d1eb      	bne.n	80032a6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d008      	beq.n	80032ec <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032da:	4b2f      	ldr	r3, [pc, #188]	; (8003398 <HAL_RCC_ClockConfig+0x1b4>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	492c      	ldr	r1, [pc, #176]	; (8003398 <HAL_RCC_ClockConfig+0x1b4>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032ec:	4b29      	ldr	r3, [pc, #164]	; (8003394 <HAL_RCC_ClockConfig+0x1b0>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d210      	bcs.n	800331c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032fa:	4b26      	ldr	r3, [pc, #152]	; (8003394 <HAL_RCC_ClockConfig+0x1b0>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f023 0207 	bic.w	r2, r3, #7
 8003302:	4924      	ldr	r1, [pc, #144]	; (8003394 <HAL_RCC_ClockConfig+0x1b0>)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	4313      	orrs	r3, r2
 8003308:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800330a:	4b22      	ldr	r3, [pc, #136]	; (8003394 <HAL_RCC_ClockConfig+0x1b0>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0307 	and.w	r3, r3, #7
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	429a      	cmp	r2, r3
 8003316:	d001      	beq.n	800331c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e036      	b.n	800338a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0304 	and.w	r3, r3, #4
 8003324:	2b00      	cmp	r3, #0
 8003326:	d008      	beq.n	800333a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003328:	4b1b      	ldr	r3, [pc, #108]	; (8003398 <HAL_RCC_ClockConfig+0x1b4>)
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	4918      	ldr	r1, [pc, #96]	; (8003398 <HAL_RCC_ClockConfig+0x1b4>)
 8003336:	4313      	orrs	r3, r2
 8003338:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0308 	and.w	r3, r3, #8
 8003342:	2b00      	cmp	r3, #0
 8003344:	d009      	beq.n	800335a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003346:	4b14      	ldr	r3, [pc, #80]	; (8003398 <HAL_RCC_ClockConfig+0x1b4>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	4910      	ldr	r1, [pc, #64]	; (8003398 <HAL_RCC_ClockConfig+0x1b4>)
 8003356:	4313      	orrs	r3, r2
 8003358:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800335a:	f000 f825 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 800335e:	4601      	mov	r1, r0
 8003360:	4b0d      	ldr	r3, [pc, #52]	; (8003398 <HAL_RCC_ClockConfig+0x1b4>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	091b      	lsrs	r3, r3, #4
 8003366:	f003 030f 	and.w	r3, r3, #15
 800336a:	4a0c      	ldr	r2, [pc, #48]	; (800339c <HAL_RCC_ClockConfig+0x1b8>)
 800336c:	5cd3      	ldrb	r3, [r2, r3]
 800336e:	f003 031f 	and.w	r3, r3, #31
 8003372:	fa21 f303 	lsr.w	r3, r1, r3
 8003376:	4a0a      	ldr	r2, [pc, #40]	; (80033a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003378:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800337a:	4b0a      	ldr	r3, [pc, #40]	; (80033a4 <HAL_RCC_ClockConfig+0x1c0>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f7fd fda2 	bl	8000ec8 <HAL_InitTick>
 8003384:	4603      	mov	r3, r0
 8003386:	72fb      	strb	r3, [r7, #11]

  return status;
 8003388:	7afb      	ldrb	r3, [r7, #11]
}
 800338a:	4618      	mov	r0, r3
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	40022000 	.word	0x40022000
 8003398:	40021000 	.word	0x40021000
 800339c:	08007d7c 	.word	0x08007d7c
 80033a0:	2000003c 	.word	0x2000003c
 80033a4:	20000000 	.word	0x20000000

080033a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b089      	sub	sp, #36	; 0x24
 80033ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80033ae:	2300      	movs	r3, #0
 80033b0:	61fb      	str	r3, [r7, #28]
 80033b2:	2300      	movs	r3, #0
 80033b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033b6:	4b3d      	ldr	r3, [pc, #244]	; (80034ac <HAL_RCC_GetSysClockFreq+0x104>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 030c 	and.w	r3, r3, #12
 80033be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033c0:	4b3a      	ldr	r3, [pc, #232]	; (80034ac <HAL_RCC_GetSysClockFreq+0x104>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	f003 0303 	and.w	r3, r3, #3
 80033c8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d005      	beq.n	80033dc <HAL_RCC_GetSysClockFreq+0x34>
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	2b0c      	cmp	r3, #12
 80033d4:	d121      	bne.n	800341a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d11e      	bne.n	800341a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80033dc:	4b33      	ldr	r3, [pc, #204]	; (80034ac <HAL_RCC_GetSysClockFreq+0x104>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0308 	and.w	r3, r3, #8
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d107      	bne.n	80033f8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80033e8:	4b30      	ldr	r3, [pc, #192]	; (80034ac <HAL_RCC_GetSysClockFreq+0x104>)
 80033ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033ee:	0a1b      	lsrs	r3, r3, #8
 80033f0:	f003 030f 	and.w	r3, r3, #15
 80033f4:	61fb      	str	r3, [r7, #28]
 80033f6:	e005      	b.n	8003404 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80033f8:	4b2c      	ldr	r3, [pc, #176]	; (80034ac <HAL_RCC_GetSysClockFreq+0x104>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	091b      	lsrs	r3, r3, #4
 80033fe:	f003 030f 	and.w	r3, r3, #15
 8003402:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003404:	4a2a      	ldr	r2, [pc, #168]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800340c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d10d      	bne.n	8003430 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003418:	e00a      	b.n	8003430 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	2b04      	cmp	r3, #4
 800341e:	d102      	bne.n	8003426 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003420:	4b24      	ldr	r3, [pc, #144]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003422:	61bb      	str	r3, [r7, #24]
 8003424:	e004      	b.n	8003430 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	2b08      	cmp	r3, #8
 800342a:	d101      	bne.n	8003430 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800342c:	4b22      	ldr	r3, [pc, #136]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x110>)
 800342e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	2b0c      	cmp	r3, #12
 8003434:	d133      	bne.n	800349e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003436:	4b1d      	ldr	r3, [pc, #116]	; (80034ac <HAL_RCC_GetSysClockFreq+0x104>)
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	f003 0303 	and.w	r3, r3, #3
 800343e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	2b02      	cmp	r3, #2
 8003444:	d002      	beq.n	800344c <HAL_RCC_GetSysClockFreq+0xa4>
 8003446:	2b03      	cmp	r3, #3
 8003448:	d003      	beq.n	8003452 <HAL_RCC_GetSysClockFreq+0xaa>
 800344a:	e005      	b.n	8003458 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800344c:	4b19      	ldr	r3, [pc, #100]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800344e:	617b      	str	r3, [r7, #20]
      break;
 8003450:	e005      	b.n	800345e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003452:	4b19      	ldr	r3, [pc, #100]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003454:	617b      	str	r3, [r7, #20]
      break;
 8003456:	e002      	b.n	800345e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	617b      	str	r3, [r7, #20]
      break;
 800345c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800345e:	4b13      	ldr	r3, [pc, #76]	; (80034ac <HAL_RCC_GetSysClockFreq+0x104>)
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	091b      	lsrs	r3, r3, #4
 8003464:	f003 0307 	and.w	r3, r3, #7
 8003468:	3301      	adds	r3, #1
 800346a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800346c:	4b0f      	ldr	r3, [pc, #60]	; (80034ac <HAL_RCC_GetSysClockFreq+0x104>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	0a1b      	lsrs	r3, r3, #8
 8003472:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	fb02 f203 	mul.w	r2, r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003482:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003484:	4b09      	ldr	r3, [pc, #36]	; (80034ac <HAL_RCC_GetSysClockFreq+0x104>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	0e5b      	lsrs	r3, r3, #25
 800348a:	f003 0303 	and.w	r3, r3, #3
 800348e:	3301      	adds	r3, #1
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	fbb2 f3f3 	udiv	r3, r2, r3
 800349c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800349e:	69bb      	ldr	r3, [r7, #24]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3724      	adds	r7, #36	; 0x24
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr
 80034ac:	40021000 	.word	0x40021000
 80034b0:	08007d94 	.word	0x08007d94
 80034b4:	00f42400 	.word	0x00f42400
 80034b8:	007a1200 	.word	0x007a1200

080034bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034c0:	4b03      	ldr	r3, [pc, #12]	; (80034d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80034c2:	681b      	ldr	r3, [r3, #0]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	2000003c 	.word	0x2000003c

080034d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80034d8:	f7ff fff0 	bl	80034bc <HAL_RCC_GetHCLKFreq>
 80034dc:	4601      	mov	r1, r0
 80034de:	4b06      	ldr	r3, [pc, #24]	; (80034f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	0a1b      	lsrs	r3, r3, #8
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	4a04      	ldr	r2, [pc, #16]	; (80034fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80034ea:	5cd3      	ldrb	r3, [r2, r3]
 80034ec:	f003 031f 	and.w	r3, r3, #31
 80034f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40021000 	.word	0x40021000
 80034fc:	08007d8c 	.word	0x08007d8c

08003500 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003504:	f7ff ffda 	bl	80034bc <HAL_RCC_GetHCLKFreq>
 8003508:	4601      	mov	r1, r0
 800350a:	4b06      	ldr	r3, [pc, #24]	; (8003524 <HAL_RCC_GetPCLK2Freq+0x24>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	0adb      	lsrs	r3, r3, #11
 8003510:	f003 0307 	and.w	r3, r3, #7
 8003514:	4a04      	ldr	r2, [pc, #16]	; (8003528 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003516:	5cd3      	ldrb	r3, [r2, r3]
 8003518:	f003 031f 	and.w	r3, r3, #31
 800351c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003520:	4618      	mov	r0, r3
 8003522:	bd80      	pop	{r7, pc}
 8003524:	40021000 	.word	0x40021000
 8003528:	08007d8c 	.word	0x08007d8c

0800352c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003534:	2300      	movs	r3, #0
 8003536:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003538:	4b2a      	ldr	r3, [pc, #168]	; (80035e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800353a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800353c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003544:	f7ff f948 	bl	80027d8 <HAL_PWREx_GetVoltageRange>
 8003548:	6178      	str	r0, [r7, #20]
 800354a:	e014      	b.n	8003576 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800354c:	4b25      	ldr	r3, [pc, #148]	; (80035e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800354e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003550:	4a24      	ldr	r2, [pc, #144]	; (80035e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003556:	6593      	str	r3, [r2, #88]	; 0x58
 8003558:	4b22      	ldr	r3, [pc, #136]	; (80035e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800355a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800355c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003564:	f7ff f938 	bl	80027d8 <HAL_PWREx_GetVoltageRange>
 8003568:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800356a:	4b1e      	ldr	r3, [pc, #120]	; (80035e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800356c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356e:	4a1d      	ldr	r2, [pc, #116]	; (80035e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003570:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003574:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800357c:	d10b      	bne.n	8003596 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2b80      	cmp	r3, #128	; 0x80
 8003582:	d919      	bls.n	80035b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2ba0      	cmp	r3, #160	; 0xa0
 8003588:	d902      	bls.n	8003590 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800358a:	2302      	movs	r3, #2
 800358c:	613b      	str	r3, [r7, #16]
 800358e:	e013      	b.n	80035b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003590:	2301      	movs	r3, #1
 8003592:	613b      	str	r3, [r7, #16]
 8003594:	e010      	b.n	80035b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2b80      	cmp	r3, #128	; 0x80
 800359a:	d902      	bls.n	80035a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800359c:	2303      	movs	r3, #3
 800359e:	613b      	str	r3, [r7, #16]
 80035a0:	e00a      	b.n	80035b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2b80      	cmp	r3, #128	; 0x80
 80035a6:	d102      	bne.n	80035ae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035a8:	2302      	movs	r3, #2
 80035aa:	613b      	str	r3, [r7, #16]
 80035ac:	e004      	b.n	80035b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b70      	cmp	r3, #112	; 0x70
 80035b2:	d101      	bne.n	80035b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035b4:	2301      	movs	r3, #1
 80035b6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80035b8:	4b0b      	ldr	r3, [pc, #44]	; (80035e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f023 0207 	bic.w	r2, r3, #7
 80035c0:	4909      	ldr	r1, [pc, #36]	; (80035e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80035c8:	4b07      	ldr	r3, [pc, #28]	; (80035e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d001      	beq.n	80035da <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e000      	b.n	80035dc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3718      	adds	r7, #24
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	40021000 	.word	0x40021000
 80035e8:	40022000 	.word	0x40022000

080035ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035f4:	2300      	movs	r3, #0
 80035f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035f8:	2300      	movs	r3, #0
 80035fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003604:	2b00      	cmp	r3, #0
 8003606:	d03f      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800360c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003610:	d01c      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003612:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003616:	d802      	bhi.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00e      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800361c:	e01f      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800361e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003622:	d003      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003624:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003628:	d01c      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800362a:	e018      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800362c:	4b85      	ldr	r3, [pc, #532]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	4a84      	ldr	r2, [pc, #528]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003632:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003636:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003638:	e015      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	3304      	adds	r3, #4
 800363e:	2100      	movs	r1, #0
 8003640:	4618      	mov	r0, r3
 8003642:	f000 fab9 	bl	8003bb8 <RCCEx_PLLSAI1_Config>
 8003646:	4603      	mov	r3, r0
 8003648:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800364a:	e00c      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	3320      	adds	r3, #32
 8003650:	2100      	movs	r1, #0
 8003652:	4618      	mov	r0, r3
 8003654:	f000 fba0 	bl	8003d98 <RCCEx_PLLSAI2_Config>
 8003658:	4603      	mov	r3, r0
 800365a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800365c:	e003      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	74fb      	strb	r3, [r7, #19]
      break;
 8003662:	e000      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003664:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003666:	7cfb      	ldrb	r3, [r7, #19]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d10b      	bne.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800366c:	4b75      	ldr	r3, [pc, #468]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800366e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003672:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800367a:	4972      	ldr	r1, [pc, #456]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800367c:	4313      	orrs	r3, r2
 800367e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003682:	e001      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003684:	7cfb      	ldrb	r3, [r7, #19]
 8003686:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d03f      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003698:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800369c:	d01c      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800369e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036a2:	d802      	bhi.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00e      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xda>
 80036a8:	e01f      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80036aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036ae:	d003      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80036b0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036b4:	d01c      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80036b6:	e018      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036b8:	4b62      	ldr	r3, [pc, #392]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	4a61      	ldr	r2, [pc, #388]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036c2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036c4:	e015      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	3304      	adds	r3, #4
 80036ca:	2100      	movs	r1, #0
 80036cc:	4618      	mov	r0, r3
 80036ce:	f000 fa73 	bl	8003bb8 <RCCEx_PLLSAI1_Config>
 80036d2:	4603      	mov	r3, r0
 80036d4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036d6:	e00c      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3320      	adds	r3, #32
 80036dc:	2100      	movs	r1, #0
 80036de:	4618      	mov	r0, r3
 80036e0:	f000 fb5a 	bl	8003d98 <RCCEx_PLLSAI2_Config>
 80036e4:	4603      	mov	r3, r0
 80036e6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036e8:	e003      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	74fb      	strb	r3, [r7, #19]
      break;
 80036ee:	e000      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80036f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036f2:	7cfb      	ldrb	r3, [r7, #19]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10b      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80036f8:	4b52      	ldr	r3, [pc, #328]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036fe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003706:	494f      	ldr	r1, [pc, #316]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003708:	4313      	orrs	r3, r2
 800370a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800370e:	e001      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003710:	7cfb      	ldrb	r3, [r7, #19]
 8003712:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 80a0 	beq.w	8003862 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003722:	2300      	movs	r3, #0
 8003724:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003726:	4b47      	ldr	r3, [pc, #284]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800372a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003732:	2301      	movs	r3, #1
 8003734:	e000      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003736:	2300      	movs	r3, #0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00d      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800373c:	4b41      	ldr	r3, [pc, #260]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800373e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003740:	4a40      	ldr	r2, [pc, #256]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003746:	6593      	str	r3, [r2, #88]	; 0x58
 8003748:	4b3e      	ldr	r3, [pc, #248]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800374a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800374c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003750:	60bb      	str	r3, [r7, #8]
 8003752:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003754:	2301      	movs	r3, #1
 8003756:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003758:	4b3b      	ldr	r3, [pc, #236]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a3a      	ldr	r2, [pc, #232]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800375e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003762:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003764:	f7fd fc00 	bl	8000f68 <HAL_GetTick>
 8003768:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800376a:	e009      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800376c:	f7fd fbfc 	bl	8000f68 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d902      	bls.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	74fb      	strb	r3, [r7, #19]
        break;
 800377e:	e005      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003780:	4b31      	ldr	r3, [pc, #196]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003788:	2b00      	cmp	r3, #0
 800378a:	d0ef      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 800378c:	7cfb      	ldrb	r3, [r7, #19]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d15c      	bne.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003792:	4b2c      	ldr	r3, [pc, #176]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003798:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800379c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d01f      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d019      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037b0:	4b24      	ldr	r3, [pc, #144]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037bc:	4b21      	ldr	r3, [pc, #132]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c2:	4a20      	ldr	r2, [pc, #128]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037cc:	4b1d      	ldr	r3, [pc, #116]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d2:	4a1c      	ldr	r2, [pc, #112]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037dc:	4a19      	ldr	r2, [pc, #100]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d016      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ee:	f7fd fbbb 	bl	8000f68 <HAL_GetTick>
 80037f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037f4:	e00b      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037f6:	f7fd fbb7 	bl	8000f68 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	f241 3288 	movw	r2, #5000	; 0x1388
 8003804:	4293      	cmp	r3, r2
 8003806:	d902      	bls.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	74fb      	strb	r3, [r7, #19]
            break;
 800380c:	e006      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800380e:	4b0d      	ldr	r3, [pc, #52]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d0ec      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 800381c:	7cfb      	ldrb	r3, [r7, #19]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10c      	bne.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003822:	4b08      	ldr	r3, [pc, #32]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003828:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003832:	4904      	ldr	r1, [pc, #16]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003834:	4313      	orrs	r3, r2
 8003836:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800383a:	e009      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800383c:	7cfb      	ldrb	r3, [r7, #19]
 800383e:	74bb      	strb	r3, [r7, #18]
 8003840:	e006      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003842:	bf00      	nop
 8003844:	40021000 	.word	0x40021000
 8003848:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800384c:	7cfb      	ldrb	r3, [r7, #19]
 800384e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003850:	7c7b      	ldrb	r3, [r7, #17]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d105      	bne.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003856:	4b9e      	ldr	r3, [pc, #632]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800385a:	4a9d      	ldr	r2, [pc, #628]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800385c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003860:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00a      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800386e:	4b98      	ldr	r3, [pc, #608]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003874:	f023 0203 	bic.w	r2, r3, #3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387c:	4994      	ldr	r1, [pc, #592]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800387e:	4313      	orrs	r3, r2
 8003880:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00a      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003890:	4b8f      	ldr	r3, [pc, #572]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003896:	f023 020c 	bic.w	r2, r3, #12
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800389e:	498c      	ldr	r1, [pc, #560]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0304 	and.w	r3, r3, #4
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00a      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038b2:	4b87      	ldr	r3, [pc, #540]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c0:	4983      	ldr	r1, [pc, #524]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0308 	and.w	r3, r3, #8
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00a      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038d4:	4b7e      	ldr	r3, [pc, #504]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e2:	497b      	ldr	r1, [pc, #492]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0310 	and.w	r3, r3, #16
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00a      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038f6:	4b76      	ldr	r3, [pc, #472]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003904:	4972      	ldr	r1, [pc, #456]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003906:	4313      	orrs	r3, r2
 8003908:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0320 	and.w	r3, r3, #32
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00a      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003918:	4b6d      	ldr	r3, [pc, #436]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800391a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800391e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003926:	496a      	ldr	r1, [pc, #424]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003928:	4313      	orrs	r3, r2
 800392a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00a      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800393a:	4b65      	ldr	r3, [pc, #404]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800393c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003940:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003948:	4961      	ldr	r1, [pc, #388]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800394a:	4313      	orrs	r3, r2
 800394c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00a      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800395c:	4b5c      	ldr	r3, [pc, #368]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800395e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003962:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800396a:	4959      	ldr	r1, [pc, #356]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800396c:	4313      	orrs	r3, r2
 800396e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00a      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800397e:	4b54      	ldr	r3, [pc, #336]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003984:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800398c:	4950      	ldr	r1, [pc, #320]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800398e:	4313      	orrs	r3, r2
 8003990:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00a      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039a0:	4b4b      	ldr	r3, [pc, #300]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ae:	4948      	ldr	r1, [pc, #288]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00a      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039c2:	4b43      	ldr	r3, [pc, #268]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d0:	493f      	ldr	r1, [pc, #252]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d028      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039e4:	4b3a      	ldr	r3, [pc, #232]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039f2:	4937      	ldr	r1, [pc, #220]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a02:	d106      	bne.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a04:	4b32      	ldr	r3, [pc, #200]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	4a31      	ldr	r2, [pc, #196]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a0e:	60d3      	str	r3, [r2, #12]
 8003a10:	e011      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a1a:	d10c      	bne.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	3304      	adds	r3, #4
 8003a20:	2101      	movs	r1, #1
 8003a22:	4618      	mov	r0, r3
 8003a24:	f000 f8c8 	bl	8003bb8 <RCCEx_PLLSAI1_Config>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003a2c:	7cfb      	ldrb	r3, [r7, #19]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8003a32:	7cfb      	ldrb	r3, [r7, #19]
 8003a34:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d028      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a42:	4b23      	ldr	r3, [pc, #140]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a48:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a50:	491f      	ldr	r1, [pc, #124]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a60:	d106      	bne.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a62:	4b1b      	ldr	r3, [pc, #108]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	4a1a      	ldr	r2, [pc, #104]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a6c:	60d3      	str	r3, [r2, #12]
 8003a6e:	e011      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a78:	d10c      	bne.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	3304      	adds	r3, #4
 8003a7e:	2101      	movs	r1, #1
 8003a80:	4618      	mov	r0, r3
 8003a82:	f000 f899 	bl	8003bb8 <RCCEx_PLLSAI1_Config>
 8003a86:	4603      	mov	r3, r0
 8003a88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a8a:	7cfb      	ldrb	r3, [r7, #19]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d001      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003a90:	7cfb      	ldrb	r3, [r7, #19]
 8003a92:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d02b      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003aa0:	4b0b      	ldr	r3, [pc, #44]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aae:	4908      	ldr	r1, [pc, #32]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003abe:	d109      	bne.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ac0:	4b03      	ldr	r3, [pc, #12]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	4a02      	ldr	r2, [pc, #8]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ac6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003aca:	60d3      	str	r3, [r2, #12]
 8003acc:	e014      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003ace:	bf00      	nop
 8003ad0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ad8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003adc:	d10c      	bne.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	3304      	adds	r3, #4
 8003ae2:	2101      	movs	r1, #1
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 f867 	bl	8003bb8 <RCCEx_PLLSAI1_Config>
 8003aea:	4603      	mov	r3, r0
 8003aec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003aee:	7cfb      	ldrb	r3, [r7, #19]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d001      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8003af4:	7cfb      	ldrb	r3, [r7, #19]
 8003af6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d02f      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b04:	4b2b      	ldr	r3, [pc, #172]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b0a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b12:	4928      	ldr	r1, [pc, #160]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b22:	d10d      	bne.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	3304      	adds	r3, #4
 8003b28:	2102      	movs	r1, #2
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f000 f844 	bl	8003bb8 <RCCEx_PLLSAI1_Config>
 8003b30:	4603      	mov	r3, r0
 8003b32:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b34:	7cfb      	ldrb	r3, [r7, #19]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d014      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003b3a:	7cfb      	ldrb	r3, [r7, #19]
 8003b3c:	74bb      	strb	r3, [r7, #18]
 8003b3e:	e011      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b48:	d10c      	bne.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	3320      	adds	r3, #32
 8003b4e:	2102      	movs	r1, #2
 8003b50:	4618      	mov	r0, r3
 8003b52:	f000 f921 	bl	8003d98 <RCCEx_PLLSAI2_Config>
 8003b56:	4603      	mov	r3, r0
 8003b58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b5a:	7cfb      	ldrb	r3, [r7, #19]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d001      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003b60:	7cfb      	ldrb	r3, [r7, #19]
 8003b62:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00a      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b70:	4b10      	ldr	r3, [pc, #64]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b76:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b7e:	490d      	ldr	r1, [pc, #52]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00b      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b92:	4b08      	ldr	r3, [pc, #32]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b98:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ba2:	4904      	ldr	r1, [pc, #16]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003baa:	7cbb      	ldrb	r3, [r7, #18]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3718      	adds	r7, #24
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	40021000 	.word	0x40021000

08003bb8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003bc6:	4b73      	ldr	r3, [pc, #460]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	f003 0303 	and.w	r3, r3, #3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d018      	beq.n	8003c04 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003bd2:	4b70      	ldr	r3, [pc, #448]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	f003 0203 	and.w	r2, r3, #3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d10d      	bne.n	8003bfe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
       ||
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d009      	beq.n	8003bfe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003bea:	4b6a      	ldr	r3, [pc, #424]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	091b      	lsrs	r3, r3, #4
 8003bf0:	f003 0307 	and.w	r3, r3, #7
 8003bf4:	1c5a      	adds	r2, r3, #1
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
       ||
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d044      	beq.n	8003c88 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	73fb      	strb	r3, [r7, #15]
 8003c02:	e041      	b.n	8003c88 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d00c      	beq.n	8003c26 <RCCEx_PLLSAI1_Config+0x6e>
 8003c0c:	2b03      	cmp	r3, #3
 8003c0e:	d013      	beq.n	8003c38 <RCCEx_PLLSAI1_Config+0x80>
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d120      	bne.n	8003c56 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c14:	4b5f      	ldr	r3, [pc, #380]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d11d      	bne.n	8003c5c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c24:	e01a      	b.n	8003c5c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c26:	4b5b      	ldr	r3, [pc, #364]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d116      	bne.n	8003c60 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c36:	e013      	b.n	8003c60 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c38:	4b56      	ldr	r3, [pc, #344]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d10f      	bne.n	8003c64 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c44:	4b53      	ldr	r3, [pc, #332]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d109      	bne.n	8003c64 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c54:	e006      	b.n	8003c64 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	73fb      	strb	r3, [r7, #15]
      break;
 8003c5a:	e004      	b.n	8003c66 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003c5c:	bf00      	nop
 8003c5e:	e002      	b.n	8003c66 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003c60:	bf00      	nop
 8003c62:	e000      	b.n	8003c66 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003c64:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c66:	7bfb      	ldrb	r3, [r7, #15]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d10d      	bne.n	8003c88 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c6c:	4b49      	ldr	r3, [pc, #292]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6819      	ldr	r1, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	011b      	lsls	r3, r3, #4
 8003c80:	430b      	orrs	r3, r1
 8003c82:	4944      	ldr	r1, [pc, #272]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c88:	7bfb      	ldrb	r3, [r7, #15]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d17d      	bne.n	8003d8a <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003c8e:	4b41      	ldr	r3, [pc, #260]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a40      	ldr	r2, [pc, #256]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c94:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c9a:	f7fd f965 	bl	8000f68 <HAL_GetTick>
 8003c9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ca0:	e009      	b.n	8003cb6 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ca2:	f7fd f961 	bl	8000f68 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d902      	bls.n	8003cb6 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	73fb      	strb	r3, [r7, #15]
        break;
 8003cb4:	e005      	b.n	8003cc2 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003cb6:	4b37      	ldr	r3, [pc, #220]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1ef      	bne.n	8003ca2 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003cc2:	7bfb      	ldrb	r3, [r7, #15]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d160      	bne.n	8003d8a <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d111      	bne.n	8003cf2 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cce:	4b31      	ldr	r3, [pc, #196]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003cd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	6892      	ldr	r2, [r2, #8]
 8003cde:	0211      	lsls	r1, r2, #8
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	68d2      	ldr	r2, [r2, #12]
 8003ce4:	0912      	lsrs	r2, r2, #4
 8003ce6:	0452      	lsls	r2, r2, #17
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	492a      	ldr	r1, [pc, #168]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	610b      	str	r3, [r1, #16]
 8003cf0:	e027      	b.n	8003d42 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d112      	bne.n	8003d1e <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cf8:	4b26      	ldr	r3, [pc, #152]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003d00:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	6892      	ldr	r2, [r2, #8]
 8003d08:	0211      	lsls	r1, r2, #8
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	6912      	ldr	r2, [r2, #16]
 8003d0e:	0852      	lsrs	r2, r2, #1
 8003d10:	3a01      	subs	r2, #1
 8003d12:	0552      	lsls	r2, r2, #21
 8003d14:	430a      	orrs	r2, r1
 8003d16:	491f      	ldr	r1, [pc, #124]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	610b      	str	r3, [r1, #16]
 8003d1c:	e011      	b.n	8003d42 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d1e:	4b1d      	ldr	r3, [pc, #116]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d26:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	6892      	ldr	r2, [r2, #8]
 8003d2e:	0211      	lsls	r1, r2, #8
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	6952      	ldr	r2, [r2, #20]
 8003d34:	0852      	lsrs	r2, r2, #1
 8003d36:	3a01      	subs	r2, #1
 8003d38:	0652      	lsls	r2, r2, #25
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	4915      	ldr	r1, [pc, #84]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003d42:	4b14      	ldr	r3, [pc, #80]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a13      	ldr	r2, [pc, #76]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d48:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d4c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d4e:	f7fd f90b 	bl	8000f68 <HAL_GetTick>
 8003d52:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d54:	e009      	b.n	8003d6a <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d56:	f7fd f907 	bl	8000f68 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d902      	bls.n	8003d6a <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	73fb      	strb	r3, [r7, #15]
          break;
 8003d68:	e005      	b.n	8003d76 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d6a:	4b0a      	ldr	r3, [pc, #40]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d0ef      	beq.n	8003d56 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003d76:	7bfb      	ldrb	r3, [r7, #15]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d106      	bne.n	8003d8a <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003d7c:	4b05      	ldr	r3, [pc, #20]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d7e:	691a      	ldr	r2, [r3, #16]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	4903      	ldr	r1, [pc, #12]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	40021000 	.word	0x40021000

08003d98 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003da2:	2300      	movs	r3, #0
 8003da4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003da6:	4b68      	ldr	r3, [pc, #416]	; (8003f48 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	f003 0303 	and.w	r3, r3, #3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d018      	beq.n	8003de4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003db2:	4b65      	ldr	r3, [pc, #404]	; (8003f48 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	f003 0203 	and.w	r2, r3, #3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d10d      	bne.n	8003dde <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
       ||
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d009      	beq.n	8003dde <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003dca:	4b5f      	ldr	r3, [pc, #380]	; (8003f48 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	091b      	lsrs	r3, r3, #4
 8003dd0:	f003 0307 	and.w	r3, r3, #7
 8003dd4:	1c5a      	adds	r2, r3, #1
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
       ||
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d044      	beq.n	8003e68 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	73fb      	strb	r3, [r7, #15]
 8003de2:	e041      	b.n	8003e68 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d00c      	beq.n	8003e06 <RCCEx_PLLSAI2_Config+0x6e>
 8003dec:	2b03      	cmp	r3, #3
 8003dee:	d013      	beq.n	8003e18 <RCCEx_PLLSAI2_Config+0x80>
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d120      	bne.n	8003e36 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003df4:	4b54      	ldr	r3, [pc, #336]	; (8003f48 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d11d      	bne.n	8003e3c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e04:	e01a      	b.n	8003e3c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e06:	4b50      	ldr	r3, [pc, #320]	; (8003f48 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d116      	bne.n	8003e40 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e16:	e013      	b.n	8003e40 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e18:	4b4b      	ldr	r3, [pc, #300]	; (8003f48 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d10f      	bne.n	8003e44 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e24:	4b48      	ldr	r3, [pc, #288]	; (8003f48 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d109      	bne.n	8003e44 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e34:	e006      	b.n	8003e44 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	73fb      	strb	r3, [r7, #15]
      break;
 8003e3a:	e004      	b.n	8003e46 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003e3c:	bf00      	nop
 8003e3e:	e002      	b.n	8003e46 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003e40:	bf00      	nop
 8003e42:	e000      	b.n	8003e46 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003e44:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e46:	7bfb      	ldrb	r3, [r7, #15]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10d      	bne.n	8003e68 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e4c:	4b3e      	ldr	r3, [pc, #248]	; (8003f48 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6819      	ldr	r1, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	011b      	lsls	r3, r3, #4
 8003e60:	430b      	orrs	r3, r1
 8003e62:	4939      	ldr	r1, [pc, #228]	; (8003f48 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e68:	7bfb      	ldrb	r3, [r7, #15]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d167      	bne.n	8003f3e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003e6e:	4b36      	ldr	r3, [pc, #216]	; (8003f48 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a35      	ldr	r2, [pc, #212]	; (8003f48 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e7a:	f7fd f875 	bl	8000f68 <HAL_GetTick>
 8003e7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e80:	e009      	b.n	8003e96 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e82:	f7fd f871 	bl	8000f68 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d902      	bls.n	8003e96 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	73fb      	strb	r3, [r7, #15]
        break;
 8003e94:	e005      	b.n	8003ea2 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e96:	4b2c      	ldr	r3, [pc, #176]	; (8003f48 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1ef      	bne.n	8003e82 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003ea2:	7bfb      	ldrb	r3, [r7, #15]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d14a      	bne.n	8003f3e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d111      	bne.n	8003ed2 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003eae:	4b26      	ldr	r3, [pc, #152]	; (8003f48 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003eb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	6892      	ldr	r2, [r2, #8]
 8003ebe:	0211      	lsls	r1, r2, #8
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	68d2      	ldr	r2, [r2, #12]
 8003ec4:	0912      	lsrs	r2, r2, #4
 8003ec6:	0452      	lsls	r2, r2, #17
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	491f      	ldr	r1, [pc, #124]	; (8003f48 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	614b      	str	r3, [r1, #20]
 8003ed0:	e011      	b.n	8003ef6 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ed2:	4b1d      	ldr	r3, [pc, #116]	; (8003f48 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003eda:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	6892      	ldr	r2, [r2, #8]
 8003ee2:	0211      	lsls	r1, r2, #8
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	6912      	ldr	r2, [r2, #16]
 8003ee8:	0852      	lsrs	r2, r2, #1
 8003eea:	3a01      	subs	r2, #1
 8003eec:	0652      	lsls	r2, r2, #25
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	4915      	ldr	r1, [pc, #84]	; (8003f48 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003ef6:	4b14      	ldr	r3, [pc, #80]	; (8003f48 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a13      	ldr	r2, [pc, #76]	; (8003f48 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f00:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f02:	f7fd f831 	bl	8000f68 <HAL_GetTick>
 8003f06:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f08:	e009      	b.n	8003f1e <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f0a:	f7fd f82d 	bl	8000f68 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d902      	bls.n	8003f1e <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	73fb      	strb	r3, [r7, #15]
          break;
 8003f1c:	e005      	b.n	8003f2a <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f1e:	4b0a      	ldr	r3, [pc, #40]	; (8003f48 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d0ef      	beq.n	8003f0a <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003f2a:	7bfb      	ldrb	r3, [r7, #15]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d106      	bne.n	8003f3e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003f30:	4b05      	ldr	r3, [pc, #20]	; (8003f48 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f32:	695a      	ldr	r2, [r3, #20]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	695b      	ldr	r3, [r3, #20]
 8003f38:	4903      	ldr	r1, [pc, #12]	; (8003f48 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3710      	adds	r7, #16
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	40021000 	.word	0x40021000

08003f4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e049      	b.n	8003ff2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d106      	bne.n	8003f78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f002 f8b0 	bl	80060d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2202      	movs	r2, #2
 8003f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	3304      	adds	r3, #4
 8003f88:	4619      	mov	r1, r3
 8003f8a:	4610      	mov	r0, r2
 8003f8c:	f000 fa40 	bl	8004410 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b082      	sub	sp, #8
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	2b02      	cmp	r3, #2
 800400e:	d122      	bne.n	8004056 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b02      	cmp	r3, #2
 800401c:	d11b      	bne.n	8004056 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f06f 0202 	mvn.w	r2, #2
 8004026:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	f003 0303 	and.w	r3, r3, #3
 8004038:	2b00      	cmp	r3, #0
 800403a:	d003      	beq.n	8004044 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 f9c8 	bl	80043d2 <HAL_TIM_IC_CaptureCallback>
 8004042:	e005      	b.n	8004050 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 f9ba 	bl	80043be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f9cb 	bl	80043e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	f003 0304 	and.w	r3, r3, #4
 8004060:	2b04      	cmp	r3, #4
 8004062:	d122      	bne.n	80040aa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	f003 0304 	and.w	r3, r3, #4
 800406e:	2b04      	cmp	r3, #4
 8004070:	d11b      	bne.n	80040aa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f06f 0204 	mvn.w	r2, #4
 800407a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2202      	movs	r2, #2
 8004080:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800408c:	2b00      	cmp	r3, #0
 800408e:	d003      	beq.n	8004098 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 f99e 	bl	80043d2 <HAL_TIM_IC_CaptureCallback>
 8004096:	e005      	b.n	80040a4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 f990 	bl	80043be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f9a1 	bl	80043e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	f003 0308 	and.w	r3, r3, #8
 80040b4:	2b08      	cmp	r3, #8
 80040b6:	d122      	bne.n	80040fe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	f003 0308 	and.w	r3, r3, #8
 80040c2:	2b08      	cmp	r3, #8
 80040c4:	d11b      	bne.n	80040fe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f06f 0208 	mvn.w	r2, #8
 80040ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2204      	movs	r2, #4
 80040d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	69db      	ldr	r3, [r3, #28]
 80040dc:	f003 0303 	and.w	r3, r3, #3
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d003      	beq.n	80040ec <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 f974 	bl	80043d2 <HAL_TIM_IC_CaptureCallback>
 80040ea:	e005      	b.n	80040f8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 f966 	bl	80043be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f977 	bl	80043e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	f003 0310 	and.w	r3, r3, #16
 8004108:	2b10      	cmp	r3, #16
 800410a:	d122      	bne.n	8004152 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	f003 0310 	and.w	r3, r3, #16
 8004116:	2b10      	cmp	r3, #16
 8004118:	d11b      	bne.n	8004152 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f06f 0210 	mvn.w	r2, #16
 8004122:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2208      	movs	r2, #8
 8004128:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	69db      	ldr	r3, [r3, #28]
 8004130:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004134:	2b00      	cmp	r3, #0
 8004136:	d003      	beq.n	8004140 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 f94a 	bl	80043d2 <HAL_TIM_IC_CaptureCallback>
 800413e:	e005      	b.n	800414c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 f93c 	bl	80043be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f94d 	bl	80043e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	2b01      	cmp	r3, #1
 800415e:	d10e      	bne.n	800417e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b01      	cmp	r3, #1
 800416c:	d107      	bne.n	800417e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f06f 0201 	mvn.w	r2, #1
 8004176:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 f916 	bl	80043aa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004188:	2b80      	cmp	r3, #128	; 0x80
 800418a:	d10e      	bne.n	80041aa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004196:	2b80      	cmp	r3, #128	; 0x80
 8004198:	d107      	bne.n	80041aa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 faf9 	bl	800479c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041b8:	d10e      	bne.n	80041d8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c4:	2b80      	cmp	r3, #128	; 0x80
 80041c6:	d107      	bne.n	80041d8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80041d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 faec 	bl	80047b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e2:	2b40      	cmp	r3, #64	; 0x40
 80041e4:	d10e      	bne.n	8004204 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f0:	2b40      	cmp	r3, #64	; 0x40
 80041f2:	d107      	bne.n	8004204 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 f8fb 	bl	80043fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	f003 0320 	and.w	r3, r3, #32
 800420e:	2b20      	cmp	r3, #32
 8004210:	d10e      	bne.n	8004230 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	f003 0320 	and.w	r3, r3, #32
 800421c:	2b20      	cmp	r3, #32
 800421e:	d107      	bne.n	8004230 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f06f 0220 	mvn.w	r2, #32
 8004228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 faac 	bl	8004788 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004230:	bf00      	nop
 8004232:	3708      	adds	r7, #8
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004248:	2b01      	cmp	r3, #1
 800424a:	d101      	bne.n	8004250 <HAL_TIM_ConfigClockSource+0x18>
 800424c:	2302      	movs	r3, #2
 800424e:	e0a8      	b.n	80043a2 <HAL_TIM_ConfigClockSource+0x16a>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2202      	movs	r2, #2
 800425c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800426e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004272:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800427a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2b40      	cmp	r3, #64	; 0x40
 800428a:	d067      	beq.n	800435c <HAL_TIM_ConfigClockSource+0x124>
 800428c:	2b40      	cmp	r3, #64	; 0x40
 800428e:	d80b      	bhi.n	80042a8 <HAL_TIM_ConfigClockSource+0x70>
 8004290:	2b10      	cmp	r3, #16
 8004292:	d073      	beq.n	800437c <HAL_TIM_ConfigClockSource+0x144>
 8004294:	2b10      	cmp	r3, #16
 8004296:	d802      	bhi.n	800429e <HAL_TIM_ConfigClockSource+0x66>
 8004298:	2b00      	cmp	r3, #0
 800429a:	d06f      	beq.n	800437c <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800429c:	e078      	b.n	8004390 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800429e:	2b20      	cmp	r3, #32
 80042a0:	d06c      	beq.n	800437c <HAL_TIM_ConfigClockSource+0x144>
 80042a2:	2b30      	cmp	r3, #48	; 0x30
 80042a4:	d06a      	beq.n	800437c <HAL_TIM_ConfigClockSource+0x144>
      break;
 80042a6:	e073      	b.n	8004390 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80042a8:	2b70      	cmp	r3, #112	; 0x70
 80042aa:	d00d      	beq.n	80042c8 <HAL_TIM_ConfigClockSource+0x90>
 80042ac:	2b70      	cmp	r3, #112	; 0x70
 80042ae:	d804      	bhi.n	80042ba <HAL_TIM_ConfigClockSource+0x82>
 80042b0:	2b50      	cmp	r3, #80	; 0x50
 80042b2:	d033      	beq.n	800431c <HAL_TIM_ConfigClockSource+0xe4>
 80042b4:	2b60      	cmp	r3, #96	; 0x60
 80042b6:	d041      	beq.n	800433c <HAL_TIM_ConfigClockSource+0x104>
      break;
 80042b8:	e06a      	b.n	8004390 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80042ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042be:	d066      	beq.n	800438e <HAL_TIM_ConfigClockSource+0x156>
 80042c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042c4:	d017      	beq.n	80042f6 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80042c6:	e063      	b.n	8004390 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6818      	ldr	r0, [r3, #0]
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	6899      	ldr	r1, [r3, #8]
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685a      	ldr	r2, [r3, #4]
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	f000 f9ae 	bl	8004638 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042ea:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	609a      	str	r2, [r3, #8]
      break;
 80042f4:	e04c      	b.n	8004390 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6818      	ldr	r0, [r3, #0]
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	6899      	ldr	r1, [r3, #8]
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	685a      	ldr	r2, [r3, #4]
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	f000 f997 	bl	8004638 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	689a      	ldr	r2, [r3, #8]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004318:	609a      	str	r2, [r3, #8]
      break;
 800431a:	e039      	b.n	8004390 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6818      	ldr	r0, [r3, #0]
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	6859      	ldr	r1, [r3, #4]
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	461a      	mov	r2, r3
 800432a:	f000 f90b 	bl	8004544 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2150      	movs	r1, #80	; 0x50
 8004334:	4618      	mov	r0, r3
 8004336:	f000 f964 	bl	8004602 <TIM_ITRx_SetConfig>
      break;
 800433a:	e029      	b.n	8004390 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6818      	ldr	r0, [r3, #0]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	6859      	ldr	r1, [r3, #4]
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	461a      	mov	r2, r3
 800434a:	f000 f92a 	bl	80045a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2160      	movs	r1, #96	; 0x60
 8004354:	4618      	mov	r0, r3
 8004356:	f000 f954 	bl	8004602 <TIM_ITRx_SetConfig>
      break;
 800435a:	e019      	b.n	8004390 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6818      	ldr	r0, [r3, #0]
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	6859      	ldr	r1, [r3, #4]
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	461a      	mov	r2, r3
 800436a:	f000 f8eb 	bl	8004544 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2140      	movs	r1, #64	; 0x40
 8004374:	4618      	mov	r0, r3
 8004376:	f000 f944 	bl	8004602 <TIM_ITRx_SetConfig>
      break;
 800437a:	e009      	b.n	8004390 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4619      	mov	r1, r3
 8004386:	4610      	mov	r0, r2
 8004388:	f000 f93b 	bl	8004602 <TIM_ITRx_SetConfig>
        break;
 800438c:	e000      	b.n	8004390 <HAL_TIM_ConfigClockSource+0x158>
      break;
 800438e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b083      	sub	sp, #12
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80043b2:	bf00      	nop
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043be:	b480      	push	{r7}
 80043c0:	b083      	sub	sp, #12
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043c6:	bf00      	nop
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr

080043d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b083      	sub	sp, #12
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043da:	bf00      	nop
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr

080043e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043e6:	b480      	push	{r7}
 80043e8:	b083      	sub	sp, #12
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043ee:	bf00      	nop
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr

080043fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043fa:	b480      	push	{r7}
 80043fc:	b083      	sub	sp, #12
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004402:	bf00      	nop
 8004404:	370c      	adds	r7, #12
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
	...

08004410 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a40      	ldr	r2, [pc, #256]	; (8004524 <TIM_Base_SetConfig+0x114>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d013      	beq.n	8004450 <TIM_Base_SetConfig+0x40>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800442e:	d00f      	beq.n	8004450 <TIM_Base_SetConfig+0x40>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a3d      	ldr	r2, [pc, #244]	; (8004528 <TIM_Base_SetConfig+0x118>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d00b      	beq.n	8004450 <TIM_Base_SetConfig+0x40>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a3c      	ldr	r2, [pc, #240]	; (800452c <TIM_Base_SetConfig+0x11c>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d007      	beq.n	8004450 <TIM_Base_SetConfig+0x40>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a3b      	ldr	r2, [pc, #236]	; (8004530 <TIM_Base_SetConfig+0x120>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d003      	beq.n	8004450 <TIM_Base_SetConfig+0x40>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a3a      	ldr	r2, [pc, #232]	; (8004534 <TIM_Base_SetConfig+0x124>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d108      	bne.n	8004462 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004456:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	4313      	orrs	r3, r2
 8004460:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a2f      	ldr	r2, [pc, #188]	; (8004524 <TIM_Base_SetConfig+0x114>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d01f      	beq.n	80044aa <TIM_Base_SetConfig+0x9a>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004470:	d01b      	beq.n	80044aa <TIM_Base_SetConfig+0x9a>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a2c      	ldr	r2, [pc, #176]	; (8004528 <TIM_Base_SetConfig+0x118>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d017      	beq.n	80044aa <TIM_Base_SetConfig+0x9a>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a2b      	ldr	r2, [pc, #172]	; (800452c <TIM_Base_SetConfig+0x11c>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d013      	beq.n	80044aa <TIM_Base_SetConfig+0x9a>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a2a      	ldr	r2, [pc, #168]	; (8004530 <TIM_Base_SetConfig+0x120>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d00f      	beq.n	80044aa <TIM_Base_SetConfig+0x9a>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a29      	ldr	r2, [pc, #164]	; (8004534 <TIM_Base_SetConfig+0x124>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d00b      	beq.n	80044aa <TIM_Base_SetConfig+0x9a>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a28      	ldr	r2, [pc, #160]	; (8004538 <TIM_Base_SetConfig+0x128>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d007      	beq.n	80044aa <TIM_Base_SetConfig+0x9a>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a27      	ldr	r2, [pc, #156]	; (800453c <TIM_Base_SetConfig+0x12c>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d003      	beq.n	80044aa <TIM_Base_SetConfig+0x9a>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a26      	ldr	r2, [pc, #152]	; (8004540 <TIM_Base_SetConfig+0x130>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d108      	bne.n	80044bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a10      	ldr	r2, [pc, #64]	; (8004524 <TIM_Base_SetConfig+0x114>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d00f      	beq.n	8004508 <TIM_Base_SetConfig+0xf8>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a12      	ldr	r2, [pc, #72]	; (8004534 <TIM_Base_SetConfig+0x124>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d00b      	beq.n	8004508 <TIM_Base_SetConfig+0xf8>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a11      	ldr	r2, [pc, #68]	; (8004538 <TIM_Base_SetConfig+0x128>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d007      	beq.n	8004508 <TIM_Base_SetConfig+0xf8>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a10      	ldr	r2, [pc, #64]	; (800453c <TIM_Base_SetConfig+0x12c>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d003      	beq.n	8004508 <TIM_Base_SetConfig+0xf8>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a0f      	ldr	r2, [pc, #60]	; (8004540 <TIM_Base_SetConfig+0x130>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d103      	bne.n	8004510 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	691a      	ldr	r2, [r3, #16]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	615a      	str	r2, [r3, #20]
}
 8004516:	bf00      	nop
 8004518:	3714      	adds	r7, #20
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	40012c00 	.word	0x40012c00
 8004528:	40000400 	.word	0x40000400
 800452c:	40000800 	.word	0x40000800
 8004530:	40000c00 	.word	0x40000c00
 8004534:	40013400 	.word	0x40013400
 8004538:	40014000 	.word	0x40014000
 800453c:	40014400 	.word	0x40014400
 8004540:	40014800 	.word	0x40014800

08004544 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004544:	b480      	push	{r7}
 8004546:	b087      	sub	sp, #28
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	f023 0201 	bic.w	r2, r3, #1
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800456e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	011b      	lsls	r3, r3, #4
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	4313      	orrs	r3, r2
 8004578:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	f023 030a 	bic.w	r3, r3, #10
 8004580:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	4313      	orrs	r3, r2
 8004588:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	621a      	str	r2, [r3, #32]
}
 8004596:	bf00      	nop
 8004598:	371c      	adds	r7, #28
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr

080045a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045a2:	b480      	push	{r7}
 80045a4:	b087      	sub	sp, #28
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	60f8      	str	r0, [r7, #12]
 80045aa:	60b9      	str	r1, [r7, #8]
 80045ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	f023 0210 	bic.w	r2, r3, #16
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	031b      	lsls	r3, r3, #12
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	011b      	lsls	r3, r3, #4
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	697a      	ldr	r2, [r7, #20]
 80045ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	621a      	str	r2, [r3, #32]
}
 80045f6:	bf00      	nop
 80045f8:	371c      	adds	r7, #28
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr

08004602 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004602:	b480      	push	{r7}
 8004604:	b085      	sub	sp, #20
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
 800460a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004618:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800461a:	683a      	ldr	r2, [r7, #0]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	4313      	orrs	r3, r2
 8004620:	f043 0307 	orr.w	r3, r3, #7
 8004624:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	609a      	str	r2, [r3, #8]
}
 800462c:	bf00      	nop
 800462e:	3714      	adds	r7, #20
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004638:	b480      	push	{r7}
 800463a:	b087      	sub	sp, #28
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
 8004644:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004652:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	021a      	lsls	r2, r3, #8
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	431a      	orrs	r2, r3
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	4313      	orrs	r3, r2
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	4313      	orrs	r3, r2
 8004664:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	609a      	str	r2, [r3, #8]
}
 800466c:	bf00      	nop
 800466e:	371c      	adds	r7, #28
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004688:	2b01      	cmp	r3, #1
 800468a:	d101      	bne.n	8004690 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800468c:	2302      	movs	r3, #2
 800468e:	e068      	b.n	8004762 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2202      	movs	r2, #2
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a2e      	ldr	r2, [pc, #184]	; (8004770 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d004      	beq.n	80046c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a2d      	ldr	r2, [pc, #180]	; (8004774 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d108      	bne.n	80046d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80046ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a1e      	ldr	r2, [pc, #120]	; (8004770 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d01d      	beq.n	8004736 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004702:	d018      	beq.n	8004736 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a1b      	ldr	r2, [pc, #108]	; (8004778 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d013      	beq.n	8004736 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a1a      	ldr	r2, [pc, #104]	; (800477c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d00e      	beq.n	8004736 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a18      	ldr	r2, [pc, #96]	; (8004780 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d009      	beq.n	8004736 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a13      	ldr	r2, [pc, #76]	; (8004774 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d004      	beq.n	8004736 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a14      	ldr	r2, [pc, #80]	; (8004784 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d10c      	bne.n	8004750 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800473c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	4313      	orrs	r3, r2
 8004746:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68ba      	ldr	r2, [r7, #8]
 800474e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	40012c00 	.word	0x40012c00
 8004774:	40013400 	.word	0x40013400
 8004778:	40000400 	.word	0x40000400
 800477c:	40000800 	.word	0x40000800
 8004780:	40000c00 	.word	0x40000c00
 8004784:	40014000 	.word	0x40014000

08004788 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e040      	b.n	8004858 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d106      	bne.n	80047ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f001 fc9a 	bl	8006120 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2224      	movs	r2, #36	; 0x24
 80047f0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f022 0201 	bic.w	r2, r2, #1
 8004800:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 f8c0 	bl	8004988 <UART_SetConfig>
 8004808:	4603      	mov	r3, r0
 800480a:	2b01      	cmp	r3, #1
 800480c:	d101      	bne.n	8004812 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e022      	b.n	8004858 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004816:	2b00      	cmp	r3, #0
 8004818:	d002      	beq.n	8004820 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 fb3e 	bl	8004e9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800482e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	689a      	ldr	r2, [r3, #8]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800483e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f042 0201 	orr.w	r2, r2, #1
 800484e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 fbc5 	bl	8004fe0 <UART_CheckIdleState>
 8004856:	4603      	mov	r3, r0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3708      	adds	r7, #8
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b08a      	sub	sp, #40	; 0x28
 8004864:	af02      	add	r7, sp, #8
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	603b      	str	r3, [r7, #0]
 800486c:	4613      	mov	r3, r2
 800486e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004874:	2b20      	cmp	r3, #32
 8004876:	f040 8081 	bne.w	800497c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d002      	beq.n	8004886 <HAL_UART_Transmit+0x26>
 8004880:	88fb      	ldrh	r3, [r7, #6]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e079      	b.n	800497e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004890:	2b01      	cmp	r3, #1
 8004892:	d101      	bne.n	8004898 <HAL_UART_Transmit+0x38>
 8004894:	2302      	movs	r3, #2
 8004896:	e072      	b.n	800497e <HAL_UART_Transmit+0x11e>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2221      	movs	r2, #33	; 0x21
 80048aa:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80048ac:	f7fc fb5c 	bl	8000f68 <HAL_GetTick>
 80048b0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	88fa      	ldrh	r2, [r7, #6]
 80048b6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	88fa      	ldrh	r2, [r7, #6]
 80048be:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ca:	d108      	bne.n	80048de <HAL_UART_Transmit+0x7e>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d104      	bne.n	80048de <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80048d4:	2300      	movs	r3, #0
 80048d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	61bb      	str	r3, [r7, #24]
 80048dc:	e003      	b.n	80048e6 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048e2:	2300      	movs	r3, #0
 80048e4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80048ee:	e02d      	b.n	800494c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	2200      	movs	r2, #0
 80048f8:	2180      	movs	r1, #128	; 0x80
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f000 fbb5 	bl	800506a <UART_WaitOnFlagUntilTimeout>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d001      	beq.n	800490a <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e039      	b.n	800497e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d10b      	bne.n	8004928 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	881a      	ldrh	r2, [r3, #0]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800491c:	b292      	uxth	r2, r2
 800491e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	3302      	adds	r3, #2
 8004924:	61bb      	str	r3, [r7, #24]
 8004926:	e008      	b.n	800493a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	781a      	ldrb	r2, [r3, #0]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	b292      	uxth	r2, r2
 8004932:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	3301      	adds	r3, #1
 8004938:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004940:	b29b      	uxth	r3, r3
 8004942:	3b01      	subs	r3, #1
 8004944:	b29a      	uxth	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004952:	b29b      	uxth	r3, r3
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1cb      	bne.n	80048f0 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	9300      	str	r3, [sp, #0]
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	2200      	movs	r2, #0
 8004960:	2140      	movs	r1, #64	; 0x40
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	f000 fb81 	bl	800506a <UART_WaitOnFlagUntilTimeout>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e005      	b.n	800497e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2220      	movs	r2, #32
 8004976:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004978:	2300      	movs	r3, #0
 800497a:	e000      	b.n	800497e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800497c:	2302      	movs	r3, #2
  }
}
 800497e:	4618      	mov	r0, r3
 8004980:	3720      	adds	r7, #32
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
	...

08004988 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004988:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800498c:	b088      	sub	sp, #32
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004992:	2300      	movs	r3, #0
 8004994:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	689a      	ldr	r2, [r3, #8]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	431a      	orrs	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	695b      	ldr	r3, [r3, #20]
 80049a4:	431a      	orrs	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	69db      	ldr	r3, [r3, #28]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	4bac      	ldr	r3, [pc, #688]	; (8004c68 <UART_SetConfig+0x2e0>)
 80049b6:	4013      	ands	r3, r2
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	6812      	ldr	r2, [r2, #0]
 80049bc:	69f9      	ldr	r1, [r7, #28]
 80049be:	430b      	orrs	r3, r1
 80049c0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	68da      	ldr	r2, [r3, #12]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	430a      	orrs	r2, r1
 80049d6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4aa2      	ldr	r2, [pc, #648]	; (8004c6c <UART_SetConfig+0x2e4>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d004      	beq.n	80049f2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a1b      	ldr	r3, [r3, #32]
 80049ec:	69fa      	ldr	r2, [r7, #28]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	69fa      	ldr	r2, [r7, #28]
 8004a02:	430a      	orrs	r2, r1
 8004a04:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a99      	ldr	r2, [pc, #612]	; (8004c70 <UART_SetConfig+0x2e8>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d121      	bne.n	8004a54 <UART_SetConfig+0xcc>
 8004a10:	4b98      	ldr	r3, [pc, #608]	; (8004c74 <UART_SetConfig+0x2ec>)
 8004a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a16:	f003 0303 	and.w	r3, r3, #3
 8004a1a:	2b03      	cmp	r3, #3
 8004a1c:	d816      	bhi.n	8004a4c <UART_SetConfig+0xc4>
 8004a1e:	a201      	add	r2, pc, #4	; (adr r2, 8004a24 <UART_SetConfig+0x9c>)
 8004a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a24:	08004a35 	.word	0x08004a35
 8004a28:	08004a41 	.word	0x08004a41
 8004a2c:	08004a3b 	.word	0x08004a3b
 8004a30:	08004a47 	.word	0x08004a47
 8004a34:	2301      	movs	r3, #1
 8004a36:	76fb      	strb	r3, [r7, #27]
 8004a38:	e0e8      	b.n	8004c0c <UART_SetConfig+0x284>
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	76fb      	strb	r3, [r7, #27]
 8004a3e:	e0e5      	b.n	8004c0c <UART_SetConfig+0x284>
 8004a40:	2304      	movs	r3, #4
 8004a42:	76fb      	strb	r3, [r7, #27]
 8004a44:	e0e2      	b.n	8004c0c <UART_SetConfig+0x284>
 8004a46:	2308      	movs	r3, #8
 8004a48:	76fb      	strb	r3, [r7, #27]
 8004a4a:	e0df      	b.n	8004c0c <UART_SetConfig+0x284>
 8004a4c:	2310      	movs	r3, #16
 8004a4e:	76fb      	strb	r3, [r7, #27]
 8004a50:	bf00      	nop
 8004a52:	e0db      	b.n	8004c0c <UART_SetConfig+0x284>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a87      	ldr	r2, [pc, #540]	; (8004c78 <UART_SetConfig+0x2f0>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d134      	bne.n	8004ac8 <UART_SetConfig+0x140>
 8004a5e:	4b85      	ldr	r3, [pc, #532]	; (8004c74 <UART_SetConfig+0x2ec>)
 8004a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a64:	f003 030c 	and.w	r3, r3, #12
 8004a68:	2b0c      	cmp	r3, #12
 8004a6a:	d829      	bhi.n	8004ac0 <UART_SetConfig+0x138>
 8004a6c:	a201      	add	r2, pc, #4	; (adr r2, 8004a74 <UART_SetConfig+0xec>)
 8004a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a72:	bf00      	nop
 8004a74:	08004aa9 	.word	0x08004aa9
 8004a78:	08004ac1 	.word	0x08004ac1
 8004a7c:	08004ac1 	.word	0x08004ac1
 8004a80:	08004ac1 	.word	0x08004ac1
 8004a84:	08004ab5 	.word	0x08004ab5
 8004a88:	08004ac1 	.word	0x08004ac1
 8004a8c:	08004ac1 	.word	0x08004ac1
 8004a90:	08004ac1 	.word	0x08004ac1
 8004a94:	08004aaf 	.word	0x08004aaf
 8004a98:	08004ac1 	.word	0x08004ac1
 8004a9c:	08004ac1 	.word	0x08004ac1
 8004aa0:	08004ac1 	.word	0x08004ac1
 8004aa4:	08004abb 	.word	0x08004abb
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	76fb      	strb	r3, [r7, #27]
 8004aac:	e0ae      	b.n	8004c0c <UART_SetConfig+0x284>
 8004aae:	2302      	movs	r3, #2
 8004ab0:	76fb      	strb	r3, [r7, #27]
 8004ab2:	e0ab      	b.n	8004c0c <UART_SetConfig+0x284>
 8004ab4:	2304      	movs	r3, #4
 8004ab6:	76fb      	strb	r3, [r7, #27]
 8004ab8:	e0a8      	b.n	8004c0c <UART_SetConfig+0x284>
 8004aba:	2308      	movs	r3, #8
 8004abc:	76fb      	strb	r3, [r7, #27]
 8004abe:	e0a5      	b.n	8004c0c <UART_SetConfig+0x284>
 8004ac0:	2310      	movs	r3, #16
 8004ac2:	76fb      	strb	r3, [r7, #27]
 8004ac4:	bf00      	nop
 8004ac6:	e0a1      	b.n	8004c0c <UART_SetConfig+0x284>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a6b      	ldr	r2, [pc, #428]	; (8004c7c <UART_SetConfig+0x2f4>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d120      	bne.n	8004b14 <UART_SetConfig+0x18c>
 8004ad2:	4b68      	ldr	r3, [pc, #416]	; (8004c74 <UART_SetConfig+0x2ec>)
 8004ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004adc:	2b10      	cmp	r3, #16
 8004ade:	d00f      	beq.n	8004b00 <UART_SetConfig+0x178>
 8004ae0:	2b10      	cmp	r3, #16
 8004ae2:	d802      	bhi.n	8004aea <UART_SetConfig+0x162>
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d005      	beq.n	8004af4 <UART_SetConfig+0x16c>
 8004ae8:	e010      	b.n	8004b0c <UART_SetConfig+0x184>
 8004aea:	2b20      	cmp	r3, #32
 8004aec:	d005      	beq.n	8004afa <UART_SetConfig+0x172>
 8004aee:	2b30      	cmp	r3, #48	; 0x30
 8004af0:	d009      	beq.n	8004b06 <UART_SetConfig+0x17e>
 8004af2:	e00b      	b.n	8004b0c <UART_SetConfig+0x184>
 8004af4:	2300      	movs	r3, #0
 8004af6:	76fb      	strb	r3, [r7, #27]
 8004af8:	e088      	b.n	8004c0c <UART_SetConfig+0x284>
 8004afa:	2302      	movs	r3, #2
 8004afc:	76fb      	strb	r3, [r7, #27]
 8004afe:	e085      	b.n	8004c0c <UART_SetConfig+0x284>
 8004b00:	2304      	movs	r3, #4
 8004b02:	76fb      	strb	r3, [r7, #27]
 8004b04:	e082      	b.n	8004c0c <UART_SetConfig+0x284>
 8004b06:	2308      	movs	r3, #8
 8004b08:	76fb      	strb	r3, [r7, #27]
 8004b0a:	e07f      	b.n	8004c0c <UART_SetConfig+0x284>
 8004b0c:	2310      	movs	r3, #16
 8004b0e:	76fb      	strb	r3, [r7, #27]
 8004b10:	bf00      	nop
 8004b12:	e07b      	b.n	8004c0c <UART_SetConfig+0x284>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a59      	ldr	r2, [pc, #356]	; (8004c80 <UART_SetConfig+0x2f8>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d120      	bne.n	8004b60 <UART_SetConfig+0x1d8>
 8004b1e:	4b55      	ldr	r3, [pc, #340]	; (8004c74 <UART_SetConfig+0x2ec>)
 8004b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b24:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004b28:	2b40      	cmp	r3, #64	; 0x40
 8004b2a:	d00f      	beq.n	8004b4c <UART_SetConfig+0x1c4>
 8004b2c:	2b40      	cmp	r3, #64	; 0x40
 8004b2e:	d802      	bhi.n	8004b36 <UART_SetConfig+0x1ae>
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d005      	beq.n	8004b40 <UART_SetConfig+0x1b8>
 8004b34:	e010      	b.n	8004b58 <UART_SetConfig+0x1d0>
 8004b36:	2b80      	cmp	r3, #128	; 0x80
 8004b38:	d005      	beq.n	8004b46 <UART_SetConfig+0x1be>
 8004b3a:	2bc0      	cmp	r3, #192	; 0xc0
 8004b3c:	d009      	beq.n	8004b52 <UART_SetConfig+0x1ca>
 8004b3e:	e00b      	b.n	8004b58 <UART_SetConfig+0x1d0>
 8004b40:	2300      	movs	r3, #0
 8004b42:	76fb      	strb	r3, [r7, #27]
 8004b44:	e062      	b.n	8004c0c <UART_SetConfig+0x284>
 8004b46:	2302      	movs	r3, #2
 8004b48:	76fb      	strb	r3, [r7, #27]
 8004b4a:	e05f      	b.n	8004c0c <UART_SetConfig+0x284>
 8004b4c:	2304      	movs	r3, #4
 8004b4e:	76fb      	strb	r3, [r7, #27]
 8004b50:	e05c      	b.n	8004c0c <UART_SetConfig+0x284>
 8004b52:	2308      	movs	r3, #8
 8004b54:	76fb      	strb	r3, [r7, #27]
 8004b56:	e059      	b.n	8004c0c <UART_SetConfig+0x284>
 8004b58:	2310      	movs	r3, #16
 8004b5a:	76fb      	strb	r3, [r7, #27]
 8004b5c:	bf00      	nop
 8004b5e:	e055      	b.n	8004c0c <UART_SetConfig+0x284>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a47      	ldr	r2, [pc, #284]	; (8004c84 <UART_SetConfig+0x2fc>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d124      	bne.n	8004bb4 <UART_SetConfig+0x22c>
 8004b6a:	4b42      	ldr	r3, [pc, #264]	; (8004c74 <UART_SetConfig+0x2ec>)
 8004b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b78:	d012      	beq.n	8004ba0 <UART_SetConfig+0x218>
 8004b7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b7e:	d802      	bhi.n	8004b86 <UART_SetConfig+0x1fe>
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d007      	beq.n	8004b94 <UART_SetConfig+0x20c>
 8004b84:	e012      	b.n	8004bac <UART_SetConfig+0x224>
 8004b86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b8a:	d006      	beq.n	8004b9a <UART_SetConfig+0x212>
 8004b8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b90:	d009      	beq.n	8004ba6 <UART_SetConfig+0x21e>
 8004b92:	e00b      	b.n	8004bac <UART_SetConfig+0x224>
 8004b94:	2300      	movs	r3, #0
 8004b96:	76fb      	strb	r3, [r7, #27]
 8004b98:	e038      	b.n	8004c0c <UART_SetConfig+0x284>
 8004b9a:	2302      	movs	r3, #2
 8004b9c:	76fb      	strb	r3, [r7, #27]
 8004b9e:	e035      	b.n	8004c0c <UART_SetConfig+0x284>
 8004ba0:	2304      	movs	r3, #4
 8004ba2:	76fb      	strb	r3, [r7, #27]
 8004ba4:	e032      	b.n	8004c0c <UART_SetConfig+0x284>
 8004ba6:	2308      	movs	r3, #8
 8004ba8:	76fb      	strb	r3, [r7, #27]
 8004baa:	e02f      	b.n	8004c0c <UART_SetConfig+0x284>
 8004bac:	2310      	movs	r3, #16
 8004bae:	76fb      	strb	r3, [r7, #27]
 8004bb0:	bf00      	nop
 8004bb2:	e02b      	b.n	8004c0c <UART_SetConfig+0x284>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a2c      	ldr	r2, [pc, #176]	; (8004c6c <UART_SetConfig+0x2e4>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d124      	bne.n	8004c08 <UART_SetConfig+0x280>
 8004bbe:	4b2d      	ldr	r3, [pc, #180]	; (8004c74 <UART_SetConfig+0x2ec>)
 8004bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004bc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bcc:	d012      	beq.n	8004bf4 <UART_SetConfig+0x26c>
 8004bce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bd2:	d802      	bhi.n	8004bda <UART_SetConfig+0x252>
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d007      	beq.n	8004be8 <UART_SetConfig+0x260>
 8004bd8:	e012      	b.n	8004c00 <UART_SetConfig+0x278>
 8004bda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bde:	d006      	beq.n	8004bee <UART_SetConfig+0x266>
 8004be0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004be4:	d009      	beq.n	8004bfa <UART_SetConfig+0x272>
 8004be6:	e00b      	b.n	8004c00 <UART_SetConfig+0x278>
 8004be8:	2300      	movs	r3, #0
 8004bea:	76fb      	strb	r3, [r7, #27]
 8004bec:	e00e      	b.n	8004c0c <UART_SetConfig+0x284>
 8004bee:	2302      	movs	r3, #2
 8004bf0:	76fb      	strb	r3, [r7, #27]
 8004bf2:	e00b      	b.n	8004c0c <UART_SetConfig+0x284>
 8004bf4:	2304      	movs	r3, #4
 8004bf6:	76fb      	strb	r3, [r7, #27]
 8004bf8:	e008      	b.n	8004c0c <UART_SetConfig+0x284>
 8004bfa:	2308      	movs	r3, #8
 8004bfc:	76fb      	strb	r3, [r7, #27]
 8004bfe:	e005      	b.n	8004c0c <UART_SetConfig+0x284>
 8004c00:	2310      	movs	r3, #16
 8004c02:	76fb      	strb	r3, [r7, #27]
 8004c04:	bf00      	nop
 8004c06:	e001      	b.n	8004c0c <UART_SetConfig+0x284>
 8004c08:	2310      	movs	r3, #16
 8004c0a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a16      	ldr	r2, [pc, #88]	; (8004c6c <UART_SetConfig+0x2e4>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	f040 8087 	bne.w	8004d26 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c18:	7efb      	ldrb	r3, [r7, #27]
 8004c1a:	2b08      	cmp	r3, #8
 8004c1c:	d836      	bhi.n	8004c8c <UART_SetConfig+0x304>
 8004c1e:	a201      	add	r2, pc, #4	; (adr r2, 8004c24 <UART_SetConfig+0x29c>)
 8004c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c24:	08004c49 	.word	0x08004c49
 8004c28:	08004c8d 	.word	0x08004c8d
 8004c2c:	08004c51 	.word	0x08004c51
 8004c30:	08004c8d 	.word	0x08004c8d
 8004c34:	08004c57 	.word	0x08004c57
 8004c38:	08004c8d 	.word	0x08004c8d
 8004c3c:	08004c8d 	.word	0x08004c8d
 8004c40:	08004c8d 	.word	0x08004c8d
 8004c44:	08004c5f 	.word	0x08004c5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c48:	f7fe fc44 	bl	80034d4 <HAL_RCC_GetPCLK1Freq>
 8004c4c:	6178      	str	r0, [r7, #20]
        break;
 8004c4e:	e022      	b.n	8004c96 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c50:	4b0d      	ldr	r3, [pc, #52]	; (8004c88 <UART_SetConfig+0x300>)
 8004c52:	617b      	str	r3, [r7, #20]
        break;
 8004c54:	e01f      	b.n	8004c96 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c56:	f7fe fba7 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 8004c5a:	6178      	str	r0, [r7, #20]
        break;
 8004c5c:	e01b      	b.n	8004c96 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c62:	617b      	str	r3, [r7, #20]
        break;
 8004c64:	e017      	b.n	8004c96 <UART_SetConfig+0x30e>
 8004c66:	bf00      	nop
 8004c68:	efff69f3 	.word	0xefff69f3
 8004c6c:	40008000 	.word	0x40008000
 8004c70:	40013800 	.word	0x40013800
 8004c74:	40021000 	.word	0x40021000
 8004c78:	40004400 	.word	0x40004400
 8004c7c:	40004800 	.word	0x40004800
 8004c80:	40004c00 	.word	0x40004c00
 8004c84:	40005000 	.word	0x40005000
 8004c88:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	76bb      	strb	r3, [r7, #26]
        break;
 8004c94:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f000 80f1 	beq.w	8004e80 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685a      	ldr	r2, [r3, #4]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	005b      	lsls	r3, r3, #1
 8004ca6:	4413      	add	r3, r2
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d305      	bcc.n	8004cba <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004cb4:	697a      	ldr	r2, [r7, #20]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d902      	bls.n	8004cc0 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	76bb      	strb	r3, [r7, #26]
 8004cbe:	e0df      	b.n	8004e80 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	f04f 0200 	mov.w	r2, #0
 8004cc8:	f04f 0300 	mov.w	r3, #0
 8004ccc:	f04f 0400 	mov.w	r4, #0
 8004cd0:	0214      	lsls	r4, r2, #8
 8004cd2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004cd6:	020b      	lsls	r3, r1, #8
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	6852      	ldr	r2, [r2, #4]
 8004cdc:	0852      	lsrs	r2, r2, #1
 8004cde:	4611      	mov	r1, r2
 8004ce0:	f04f 0200 	mov.w	r2, #0
 8004ce4:	eb13 0b01 	adds.w	fp, r3, r1
 8004ce8:	eb44 0c02 	adc.w	ip, r4, r2
 8004cec:	4658      	mov	r0, fp
 8004cee:	4661      	mov	r1, ip
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f04f 0400 	mov.w	r4, #0
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	4623      	mov	r3, r4
 8004cfc:	f7fb ff4c 	bl	8000b98 <__aeabi_uldivmod>
 8004d00:	4603      	mov	r3, r0
 8004d02:	460c      	mov	r4, r1
 8004d04:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d0c:	d308      	bcc.n	8004d20 <UART_SetConfig+0x398>
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d14:	d204      	bcs.n	8004d20 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	60da      	str	r2, [r3, #12]
 8004d1e:	e0af      	b.n	8004e80 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	76bb      	strb	r3, [r7, #26]
 8004d24:	e0ac      	b.n	8004e80 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	69db      	ldr	r3, [r3, #28]
 8004d2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d2e:	d15b      	bne.n	8004de8 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004d30:	7efb      	ldrb	r3, [r7, #27]
 8004d32:	2b08      	cmp	r3, #8
 8004d34:	d827      	bhi.n	8004d86 <UART_SetConfig+0x3fe>
 8004d36:	a201      	add	r2, pc, #4	; (adr r2, 8004d3c <UART_SetConfig+0x3b4>)
 8004d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d3c:	08004d61 	.word	0x08004d61
 8004d40:	08004d69 	.word	0x08004d69
 8004d44:	08004d71 	.word	0x08004d71
 8004d48:	08004d87 	.word	0x08004d87
 8004d4c:	08004d77 	.word	0x08004d77
 8004d50:	08004d87 	.word	0x08004d87
 8004d54:	08004d87 	.word	0x08004d87
 8004d58:	08004d87 	.word	0x08004d87
 8004d5c:	08004d7f 	.word	0x08004d7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d60:	f7fe fbb8 	bl	80034d4 <HAL_RCC_GetPCLK1Freq>
 8004d64:	6178      	str	r0, [r7, #20]
        break;
 8004d66:	e013      	b.n	8004d90 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d68:	f7fe fbca 	bl	8003500 <HAL_RCC_GetPCLK2Freq>
 8004d6c:	6178      	str	r0, [r7, #20]
        break;
 8004d6e:	e00f      	b.n	8004d90 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d70:	4b49      	ldr	r3, [pc, #292]	; (8004e98 <UART_SetConfig+0x510>)
 8004d72:	617b      	str	r3, [r7, #20]
        break;
 8004d74:	e00c      	b.n	8004d90 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d76:	f7fe fb17 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 8004d7a:	6178      	str	r0, [r7, #20]
        break;
 8004d7c:	e008      	b.n	8004d90 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d82:	617b      	str	r3, [r7, #20]
        break;
 8004d84:	e004      	b.n	8004d90 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004d86:	2300      	movs	r3, #0
 8004d88:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	76bb      	strb	r3, [r7, #26]
        break;
 8004d8e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d074      	beq.n	8004e80 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	005a      	lsls	r2, r3, #1
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	085b      	lsrs	r3, r3, #1
 8004da0:	441a      	add	r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	2b0f      	cmp	r3, #15
 8004db2:	d916      	bls.n	8004de2 <UART_SetConfig+0x45a>
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dba:	d212      	bcs.n	8004de2 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	f023 030f 	bic.w	r3, r3, #15
 8004dc4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	085b      	lsrs	r3, r3, #1
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	f003 0307 	and.w	r3, r3, #7
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	89fb      	ldrh	r3, [r7, #14]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	89fa      	ldrh	r2, [r7, #14]
 8004dde:	60da      	str	r2, [r3, #12]
 8004de0:	e04e      	b.n	8004e80 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	76bb      	strb	r3, [r7, #26]
 8004de6:	e04b      	b.n	8004e80 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004de8:	7efb      	ldrb	r3, [r7, #27]
 8004dea:	2b08      	cmp	r3, #8
 8004dec:	d827      	bhi.n	8004e3e <UART_SetConfig+0x4b6>
 8004dee:	a201      	add	r2, pc, #4	; (adr r2, 8004df4 <UART_SetConfig+0x46c>)
 8004df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df4:	08004e19 	.word	0x08004e19
 8004df8:	08004e21 	.word	0x08004e21
 8004dfc:	08004e29 	.word	0x08004e29
 8004e00:	08004e3f 	.word	0x08004e3f
 8004e04:	08004e2f 	.word	0x08004e2f
 8004e08:	08004e3f 	.word	0x08004e3f
 8004e0c:	08004e3f 	.word	0x08004e3f
 8004e10:	08004e3f 	.word	0x08004e3f
 8004e14:	08004e37 	.word	0x08004e37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e18:	f7fe fb5c 	bl	80034d4 <HAL_RCC_GetPCLK1Freq>
 8004e1c:	6178      	str	r0, [r7, #20]
        break;
 8004e1e:	e013      	b.n	8004e48 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e20:	f7fe fb6e 	bl	8003500 <HAL_RCC_GetPCLK2Freq>
 8004e24:	6178      	str	r0, [r7, #20]
        break;
 8004e26:	e00f      	b.n	8004e48 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e28:	4b1b      	ldr	r3, [pc, #108]	; (8004e98 <UART_SetConfig+0x510>)
 8004e2a:	617b      	str	r3, [r7, #20]
        break;
 8004e2c:	e00c      	b.n	8004e48 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e2e:	f7fe fabb 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 8004e32:	6178      	str	r0, [r7, #20]
        break;
 8004e34:	e008      	b.n	8004e48 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e3a:	617b      	str	r3, [r7, #20]
        break;
 8004e3c:	e004      	b.n	8004e48 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	76bb      	strb	r3, [r7, #26]
        break;
 8004e46:	bf00      	nop
    }

    if (pclk != 0U)
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d018      	beq.n	8004e80 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	085a      	lsrs	r2, r3, #1
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	441a      	add	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	2b0f      	cmp	r3, #15
 8004e68:	d908      	bls.n	8004e7c <UART_SetConfig+0x4f4>
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e70:	d204      	bcs.n	8004e7c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	60da      	str	r2, [r3, #12]
 8004e7a:	e001      	b.n	8004e80 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004e8c:	7ebb      	ldrb	r3, [r7, #26]
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3720      	adds	r7, #32
 8004e92:	46bd      	mov	sp, r7
 8004e94:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004e98:	00f42400 	.word	0x00f42400

08004e9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea8:	f003 0301 	and.w	r3, r3, #1
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00a      	beq.n	8004ec6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eca:	f003 0302 	and.w	r3, r3, #2
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00a      	beq.n	8004ee8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eec:	f003 0304 	and.w	r3, r3, #4
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00a      	beq.n	8004f0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0e:	f003 0308 	and.w	r3, r3, #8
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00a      	beq.n	8004f2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f30:	f003 0310 	and.w	r3, r3, #16
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d00a      	beq.n	8004f4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f52:	f003 0320 	and.w	r3, r3, #32
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00a      	beq.n	8004f70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	430a      	orrs	r2, r1
 8004f6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d01a      	beq.n	8004fb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f9a:	d10a      	bne.n	8004fb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00a      	beq.n	8004fd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	605a      	str	r2, [r3, #4]
  }
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af02      	add	r7, sp, #8
 8004fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004fee:	f7fb ffbb 	bl	8000f68 <HAL_GetTick>
 8004ff2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0308 	and.w	r3, r3, #8
 8004ffe:	2b08      	cmp	r3, #8
 8005000:	d10e      	bne.n	8005020 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005002:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005006:	9300      	str	r3, [sp, #0]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2200      	movs	r2, #0
 800500c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 f82a 	bl	800506a <UART_WaitOnFlagUntilTimeout>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d001      	beq.n	8005020 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e020      	b.n	8005062 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0304 	and.w	r3, r3, #4
 800502a:	2b04      	cmp	r3, #4
 800502c:	d10e      	bne.n	800504c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800502e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005032:	9300      	str	r3, [sp, #0]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 f814 	bl	800506a <UART_WaitOnFlagUntilTimeout>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d001      	beq.n	800504c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e00a      	b.n	8005062 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2220      	movs	r2, #32
 8005050:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2220      	movs	r2, #32
 8005056:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3710      	adds	r7, #16
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800506a:	b580      	push	{r7, lr}
 800506c:	b084      	sub	sp, #16
 800506e:	af00      	add	r7, sp, #0
 8005070:	60f8      	str	r0, [r7, #12]
 8005072:	60b9      	str	r1, [r7, #8]
 8005074:	603b      	str	r3, [r7, #0]
 8005076:	4613      	mov	r3, r2
 8005078:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800507a:	e05d      	b.n	8005138 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005082:	d059      	beq.n	8005138 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005084:	f7fb ff70 	bl	8000f68 <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	69ba      	ldr	r2, [r7, #24]
 8005090:	429a      	cmp	r2, r3
 8005092:	d302      	bcc.n	800509a <UART_WaitOnFlagUntilTimeout+0x30>
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d11b      	bne.n	80050d2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80050a8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	689a      	ldr	r2, [r3, #8]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f022 0201 	bic.w	r2, r2, #1
 80050b8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2220      	movs	r2, #32
 80050be:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2220      	movs	r2, #32
 80050c4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e042      	b.n	8005158 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0304 	and.w	r3, r3, #4
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d02b      	beq.n	8005138 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	69db      	ldr	r3, [r3, #28]
 80050e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050ee:	d123      	bne.n	8005138 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050f8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005108:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	689a      	ldr	r2, [r3, #8]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f022 0201 	bic.w	r2, r2, #1
 8005118:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2220      	movs	r2, #32
 800511e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2220      	movs	r2, #32
 8005124:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2220      	movs	r2, #32
 800512a:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e00f      	b.n	8005158 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	69da      	ldr	r2, [r3, #28]
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	4013      	ands	r3, r2
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	429a      	cmp	r2, r3
 8005146:	bf0c      	ite	eq
 8005148:	2301      	moveq	r3, #1
 800514a:	2300      	movne	r3, #0
 800514c:	b2db      	uxtb	r3, r3
 800514e:	461a      	mov	r2, r3
 8005150:	79fb      	ldrb	r3, [r7, #7]
 8005152:	429a      	cmp	r2, r3
 8005154:	d092      	beq.n	800507c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3710      	adds	r7, #16
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	4603      	mov	r3, r0
 8005168:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800516a:	2300      	movs	r3, #0
 800516c:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800516e:	2110      	movs	r1, #16
 8005170:	20d4      	movs	r0, #212	; 0xd4
 8005172:	f000 fdc9 	bl	8005d08 <SENSOR_IO_Read>
 8005176:	4603      	mov	r3, r0
 8005178:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800517a:	88fb      	ldrh	r3, [r7, #6]
 800517c:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800517e:	7bbb      	ldrb	r3, [r7, #14]
 8005180:	f003 0303 	and.w	r3, r3, #3
 8005184:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8005186:	7bba      	ldrb	r2, [r7, #14]
 8005188:	7bfb      	ldrb	r3, [r7, #15]
 800518a:	4313      	orrs	r3, r2
 800518c:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 800518e:	7bbb      	ldrb	r3, [r7, #14]
 8005190:	461a      	mov	r2, r3
 8005192:	2110      	movs	r1, #16
 8005194:	20d4      	movs	r0, #212	; 0xd4
 8005196:	f000 fd9d 	bl	8005cd4 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800519a:	2112      	movs	r1, #18
 800519c:	20d4      	movs	r0, #212	; 0xd4
 800519e:	f000 fdb3 	bl	8005d08 <SENSOR_IO_Read>
 80051a2:	4603      	mov	r3, r0
 80051a4:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 80051a6:	88fb      	ldrh	r3, [r7, #6]
 80051a8:	0a1b      	lsrs	r3, r3, #8
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 80051ae:	7bbb      	ldrb	r3, [r7, #14]
 80051b0:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 80051b4:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 80051b6:	7bba      	ldrb	r2, [r7, #14]
 80051b8:	7bfb      	ldrb	r3, [r7, #15]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80051be:	7bbb      	ldrb	r3, [r7, #14]
 80051c0:	461a      	mov	r2, r3
 80051c2:	2112      	movs	r1, #18
 80051c4:	20d4      	movs	r0, #212	; 0xd4
 80051c6:	f000 fd85 	bl	8005cd4 <SENSOR_IO_Write>
}
 80051ca:	bf00      	nop
 80051cc:	3710      	adds	r7, #16
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b082      	sub	sp, #8
 80051d6:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80051d8:	2300      	movs	r3, #0
 80051da:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80051dc:	2110      	movs	r1, #16
 80051de:	20d4      	movs	r0, #212	; 0xd4
 80051e0:	f000 fd92 	bl	8005d08 <SENSOR_IO_Read>
 80051e4:	4603      	mov	r3, r0
 80051e6:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80051e8:	79fb      	ldrb	r3, [r7, #7]
 80051ea:	f003 030f 	and.w	r3, r3, #15
 80051ee:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 80051f0:	79fb      	ldrb	r3, [r7, #7]
 80051f2:	461a      	mov	r2, r3
 80051f4:	2110      	movs	r1, #16
 80051f6:	20d4      	movs	r0, #212	; 0xd4
 80051f8:	f000 fd6c 	bl	8005cd4 <SENSOR_IO_Write>
}
 80051fc:	bf00      	nop
 80051fe:	3708      	adds	r7, #8
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8005204:	b580      	push	{r7, lr}
 8005206:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8005208:	f000 fd5a 	bl	8005cc0 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 800520c:	210f      	movs	r1, #15
 800520e:	20d4      	movs	r0, #212	; 0xd4
 8005210:	f000 fd7a 	bl	8005d08 <SENSOR_IO_Read>
 8005214:	4603      	mov	r3, r0
}
 8005216:	4618      	mov	r0, r3
 8005218:	bd80      	pop	{r7, pc}

0800521a <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 800521a:	b580      	push	{r7, lr}
 800521c:	b084      	sub	sp, #16
 800521e:	af00      	add	r7, sp, #0
 8005220:	4603      	mov	r3, r0
 8005222:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8005224:	2300      	movs	r3, #0
 8005226:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8005228:	2115      	movs	r1, #21
 800522a:	20d4      	movs	r0, #212	; 0xd4
 800522c:	f000 fd6c 	bl	8005d08 <SENSOR_IO_Read>
 8005230:	4603      	mov	r3, r0
 8005232:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8005234:	7bfb      	ldrb	r3, [r7, #15]
 8005236:	f023 0310 	bic.w	r3, r3, #16
 800523a:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800523c:	88fb      	ldrh	r3, [r7, #6]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d003      	beq.n	800524a <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8005242:	7bfb      	ldrb	r3, [r7, #15]
 8005244:	f043 0310 	orr.w	r3, r3, #16
 8005248:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 800524a:	7bfb      	ldrb	r3, [r7, #15]
 800524c:	461a      	mov	r2, r3
 800524e:	2115      	movs	r1, #21
 8005250:	20d4      	movs	r0, #212	; 0xd4
 8005252:	f000 fd3f 	bl	8005cd4 <SENSOR_IO_Write>
}
 8005256:	bf00      	nop
 8005258:	3710      	adds	r7, #16
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
	...

08005260 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b088      	sub	sp, #32
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8005268:	2300      	movs	r3, #0
 800526a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 800526c:	2300      	movs	r3, #0
 800526e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8005270:	f04f 0300 	mov.w	r3, #0
 8005274:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8005276:	2110      	movs	r1, #16
 8005278:	20d4      	movs	r0, #212	; 0xd4
 800527a:	f000 fd45 	bl	8005d08 <SENSOR_IO_Read>
 800527e:	4603      	mov	r3, r0
 8005280:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8005282:	f107 0208 	add.w	r2, r7, #8
 8005286:	2306      	movs	r3, #6
 8005288:	2128      	movs	r1, #40	; 0x28
 800528a:	20d4      	movs	r0, #212	; 0xd4
 800528c:	f000 fd5a 	bl	8005d44 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8005290:	2300      	movs	r3, #0
 8005292:	77fb      	strb	r3, [r7, #31]
 8005294:	e01f      	b.n	80052d6 <LSM6DSL_AccReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8005296:	7ffb      	ldrb	r3, [r7, #31]
 8005298:	005b      	lsls	r3, r3, #1
 800529a:	3301      	adds	r3, #1
 800529c:	f107 0220 	add.w	r2, r7, #32
 80052a0:	4413      	add	r3, r2
 80052a2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	021b      	lsls	r3, r3, #8
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	7ffb      	ldrb	r3, [r7, #31]
 80052ae:	005b      	lsls	r3, r3, #1
 80052b0:	f107 0120 	add.w	r1, r7, #32
 80052b4:	440b      	add	r3, r1
 80052b6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	4413      	add	r3, r2
 80052be:	b29a      	uxth	r2, r3
 80052c0:	7ffb      	ldrb	r3, [r7, #31]
 80052c2:	b212      	sxth	r2, r2
 80052c4:	005b      	lsls	r3, r3, #1
 80052c6:	f107 0120 	add.w	r1, r7, #32
 80052ca:	440b      	add	r3, r1
 80052cc:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80052d0:	7ffb      	ldrb	r3, [r7, #31]
 80052d2:	3301      	adds	r3, #1
 80052d4:	77fb      	strb	r3, [r7, #31]
 80052d6:	7ffb      	ldrb	r3, [r7, #31]
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d9dc      	bls.n	8005296 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 80052dc:	7dfb      	ldrb	r3, [r7, #23]
 80052de:	f003 030c 	and.w	r3, r3, #12
 80052e2:	2b0c      	cmp	r3, #12
 80052e4:	d828      	bhi.n	8005338 <LSM6DSL_AccReadXYZ+0xd8>
 80052e6:	a201      	add	r2, pc, #4	; (adr r2, 80052ec <LSM6DSL_AccReadXYZ+0x8c>)
 80052e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ec:	08005321 	.word	0x08005321
 80052f0:	08005339 	.word	0x08005339
 80052f4:	08005339 	.word	0x08005339
 80052f8:	08005339 	.word	0x08005339
 80052fc:	08005333 	.word	0x08005333
 8005300:	08005339 	.word	0x08005339
 8005304:	08005339 	.word	0x08005339
 8005308:	08005339 	.word	0x08005339
 800530c:	08005327 	.word	0x08005327
 8005310:	08005339 	.word	0x08005339
 8005314:	08005339 	.word	0x08005339
 8005318:	08005339 	.word	0x08005339
 800531c:	0800532d 	.word	0x0800532d
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8005320:	4b18      	ldr	r3, [pc, #96]	; (8005384 <LSM6DSL_AccReadXYZ+0x124>)
 8005322:	61bb      	str	r3, [r7, #24]
    break;
 8005324:	e008      	b.n	8005338 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8005326:	4b18      	ldr	r3, [pc, #96]	; (8005388 <LSM6DSL_AccReadXYZ+0x128>)
 8005328:	61bb      	str	r3, [r7, #24]
    break;
 800532a:	e005      	b.n	8005338 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 800532c:	4b17      	ldr	r3, [pc, #92]	; (800538c <LSM6DSL_AccReadXYZ+0x12c>)
 800532e:	61bb      	str	r3, [r7, #24]
    break;
 8005330:	e002      	b.n	8005338 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8005332:	4b17      	ldr	r3, [pc, #92]	; (8005390 <LSM6DSL_AccReadXYZ+0x130>)
 8005334:	61bb      	str	r3, [r7, #24]
    break;    
 8005336:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8005338:	2300      	movs	r3, #0
 800533a:	77fb      	strb	r3, [r7, #31]
 800533c:	e01b      	b.n	8005376 <LSM6DSL_AccReadXYZ+0x116>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 800533e:	7ffb      	ldrb	r3, [r7, #31]
 8005340:	005b      	lsls	r3, r3, #1
 8005342:	f107 0220 	add.w	r2, r7, #32
 8005346:	4413      	add	r3, r2
 8005348:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800534c:	ee07 3a90 	vmov	s15, r3
 8005350:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005354:	edd7 7a06 	vldr	s15, [r7, #24]
 8005358:	ee67 7a27 	vmul.f32	s15, s14, s15
 800535c:	7ffb      	ldrb	r3, [r7, #31]
 800535e:	005b      	lsls	r3, r3, #1
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	4413      	add	r3, r2
 8005364:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005368:	ee17 2a90 	vmov	r2, s15
 800536c:	b212      	sxth	r2, r2
 800536e:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8005370:	7ffb      	ldrb	r3, [r7, #31]
 8005372:	3301      	adds	r3, #1
 8005374:	77fb      	strb	r3, [r7, #31]
 8005376:	7ffb      	ldrb	r3, [r7, #31]
 8005378:	2b02      	cmp	r3, #2
 800537a:	d9e0      	bls.n	800533e <LSM6DSL_AccReadXYZ+0xde>
  }
}
 800537c:	bf00      	nop
 800537e:	3720      	adds	r7, #32
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	3d79db23 	.word	0x3d79db23
 8005388:	3df9db23 	.word	0x3df9db23
 800538c:	3e79db23 	.word	0x3e79db23
 8005390:	3ef9db23 	.word	0x3ef9db23
 8005394:	00000000 	.word	0x00000000

08005398 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005398:	b590      	push	{r4, r7, lr}
 800539a:	b0c7      	sub	sp, #284	; 0x11c
 800539c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800539e:	f7fb fd7b 	bl	8000e98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80053a2:	f000 f97d 	bl	80056a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80053a6:	f000 fb29 	bl	80059fc <MX_GPIO_Init>
  MX_DMA_Init();
 80053aa:	f000 fb09 	bl	80059c0 <MX_DMA_Init>
  MX_DAC1_Init();
 80053ae:	f000 f9f1 	bl	8005794 <MX_DAC1_Init>
  MX_TIM2_Init();
 80053b2:	f000 fa87 	bl	80058c4 <MX_TIM2_Init>
  MX_QUADSPI_Init();
 80053b6:	f000 fa5f 	bl	8005878 <MX_QUADSPI_Init>
  MX_I2C2_Init();
 80053ba:	f000 fa1d 	bl	80057f8 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80053be:	f000 facf 	bl	8005960 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* Initialize I2C sensors */
  BSP_ACCELERO_Init();
 80053c2:	f000 fcdd 	bl	8005d80 <BSP_ACCELERO_Init>

  /* Set low power mode for accelerometer and magnetometer */
  BSP_ACCELERO_LowPower(1);
 80053c6:	2001      	movs	r0, #1
 80053c8:	f000 fd18 	bl	8005dfc <BSP_ACCELERO_LowPower>

  uint16_t accelero_XYZ[3];
  char accelero_XYZ_buffer[100];
  uint16_t prev_accelero_XYZ[3];
  char max_accelero_XYZ_buffer[100];
  BSP_ACCELERO_AccGetXYZ(prev_accelero_XYZ);
 80053cc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80053d0:	4618      	mov	r0, r3
 80053d2:	f000 fd2d 	bl	8005e30 <BSP_ACCELERO_AccGetXYZ>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  /*Read Acceleration Value*/
	  BSP_ACCELERO_AccGetXYZ(accelero_XYZ);
 80053d6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80053da:	4618      	mov	r0, r3
 80053dc:	f000 fd28 	bl	8005e30 <BSP_ACCELERO_AccGetXYZ>

	  //Cartesian Distance
	  double x = pow(accelero_XYZ[0]-prev_accelero_XYZ[0],2);
 80053e0:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 80053e4:	461a      	mov	r2, r3
 80053e6:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	4618      	mov	r0, r3
 80053ee:	f7fb f891 	bl	8000514 <__aeabi_i2d>
 80053f2:	4603      	mov	r3, r0
 80053f4:	460c      	mov	r4, r1
 80053f6:	ed9f 1b9c 	vldr	d1, [pc, #624]	; 8005668 <main+0x2d0>
 80053fa:	ec44 3b10 	vmov	d0, r3, r4
 80053fe:	f001 fbe3 	bl	8006bc8 <pow>
 8005402:	ed87 0b42 	vstr	d0, [r7, #264]	; 0x108
	  double y = pow(accelero_XYZ[1]-prev_accelero_XYZ[1],2);
 8005406:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 800540a:	461a      	mov	r2, r3
 800540c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	4618      	mov	r0, r3
 8005414:	f7fb f87e 	bl	8000514 <__aeabi_i2d>
 8005418:	4603      	mov	r3, r0
 800541a:	460c      	mov	r4, r1
 800541c:	ed9f 1b92 	vldr	d1, [pc, #584]	; 8005668 <main+0x2d0>
 8005420:	ec44 3b10 	vmov	d0, r3, r4
 8005424:	f001 fbd0 	bl	8006bc8 <pow>
 8005428:	ed87 0b40 	vstr	d0, [r7, #256]	; 0x100
	  double z = pow(accelero_XYZ[2]-prev_accelero_XYZ[2],2);
 800542c:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 8005430:	461a      	mov	r2, r3
 8005432:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	4618      	mov	r0, r3
 800543a:	f7fb f86b 	bl	8000514 <__aeabi_i2d>
 800543e:	4603      	mov	r3, r0
 8005440:	460c      	mov	r4, r1
 8005442:	ed9f 1b89 	vldr	d1, [pc, #548]	; 8005668 <main+0x2d0>
 8005446:	ec44 3b10 	vmov	d0, r3, r4
 800544a:	f001 fbbd 	bl	8006bc8 <pow>
 800544e:	ed87 0b3e 	vstr	d0, [r7, #248]	; 0xf8
	  double sum = x+y+z;
 8005452:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8005456:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 800545a:	f7fa ff0f 	bl	800027c <__adddf3>
 800545e:	4603      	mov	r3, r0
 8005460:	460c      	mov	r4, r1
 8005462:	461a      	mov	r2, r3
 8005464:	4623      	mov	r3, r4
 8005466:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800546a:	f7fa ff07 	bl	800027c <__adddf3>
 800546e:	4603      	mov	r3, r0
 8005470:	460c      	mov	r4, r1
 8005472:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
	  double dist = sqrt(sum);
 8005476:	ed97 0b3c 	vldr	d0, [r7, #240]	; 0xf0
 800547a:	f001 fd15 	bl	8006ea8 <sqrt>
 800547e:	ed87 0b3a 	vstr	d0, [r7, #232]	; 0xe8

	  //Update previous point
	  prev_accelero_XYZ[0] = accelero_XYZ[0];
 8005482:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8005486:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
	  prev_accelero_XYZ[1] = accelero_XYZ[1];
 800548a:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 800548e:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	  prev_accelero_XYZ[2] = accelero_XYZ[2];
 8005492:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 8005496:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

	  /*Debugging Purposes*/
	  sprintf(accelero_XYZ_buffer, "Acceleration: X:%d Y:%d Z:%d",(int) accelero_XYZ[0],(int) accelero_XYZ[1],(int)accelero_XYZ[2]);
 800549a:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 800549e:	461a      	mov	r2, r3
 80054a0:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 80054a4:	4619      	mov	r1, r3
 80054a6:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 80054aa:	f107 0070 	add.w	r0, r7, #112	; 0x70
 80054ae:	9300      	str	r3, [sp, #0]
 80054b0:	460b      	mov	r3, r1
 80054b2:	4971      	ldr	r1, [pc, #452]	; (8005678 <main+0x2e0>)
 80054b4:	f000 ff82 	bl	80063bc <siprintf>
	  HAL_UART_Transmit(&huart1,accelero_XYZ_buffer,100,30000);
 80054b8:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80054bc:	f247 5330 	movw	r3, #30000	; 0x7530
 80054c0:	2264      	movs	r2, #100	; 0x64
 80054c2:	486e      	ldr	r0, [pc, #440]	; (800567c <main+0x2e4>)
 80054c4:	f7ff f9cc 	bl	8004860 <HAL_UART_Transmit>


	  /*Convert in terms of g*/
	  double dist_g = dist/9.81;
 80054c8:	a369      	add	r3, pc, #420	; (adr r3, 8005670 <main+0x2d8>)
 80054ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ce:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 80054d2:	f7fb f9b3 	bl	800083c <__aeabi_ddiv>
 80054d6:	4603      	mov	r3, r0
 80054d8:	460c      	mov	r4, r1
 80054da:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0

	  /*Debugging if the peak values are correct in terms of g*/
	  sprintf(max_accelero_XYZ_buffer, "Distance in X: %d g", (int) dist);
 80054de:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 80054e2:	f7fb fb31 	bl	8000b48 <__aeabi_d2iz>
 80054e6:	4602      	mov	r2, r0
 80054e8:	1d3b      	adds	r3, r7, #4
 80054ea:	4965      	ldr	r1, [pc, #404]	; (8005680 <main+0x2e8>)
 80054ec:	4618      	mov	r0, r3
 80054ee:	f000 ff65 	bl	80063bc <siprintf>
	  HAL_UART_Transmit(&huart1,max_accelero_XYZ_buffer,100,30000);
 80054f2:	1d39      	adds	r1, r7, #4
 80054f4:	f247 5330 	movw	r3, #30000	; 0x7530
 80054f8:	2264      	movs	r2, #100	; 0x64
 80054fa:	4860      	ldr	r0, [pc, #384]	; (800567c <main+0x2e4>)
 80054fc:	f7ff f9b0 	bl	8004860 <HAL_UART_Transmit>

	  if(dist_g > 30){
 8005500:	f04f 0200 	mov.w	r2, #0
 8005504:	4b5f      	ldr	r3, [pc, #380]	; (8005684 <main+0x2ec>)
 8005506:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800550a:	f7fb fafd 	bl	8000b08 <__aeabi_dcmpgt>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	f000 80a3 	beq.w	800565c <main+0x2c4>

		int magnitude = 0;
 8005516:	2300      	movs	r3, #0
 8005518:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

		if (30<=dist_g && dist_g<39){
 800551c:	f04f 0200 	mov.w	r2, #0
 8005520:	4b58      	ldr	r3, [pc, #352]	; (8005684 <main+0x2ec>)
 8005522:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005526:	f7fb fae5 	bl	8000af4 <__aeabi_dcmpge>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00d      	beq.n	800554c <main+0x1b4>
 8005530:	f04f 0200 	mov.w	r2, #0
 8005534:	4b54      	ldr	r3, [pc, #336]	; (8005688 <main+0x2f0>)
 8005536:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800553a:	f7fb fac7 	bl	8000acc <__aeabi_dcmplt>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d003      	beq.n	800554c <main+0x1b4>
			magnitude = 4;
 8005544:	2304      	movs	r3, #4
 8005546:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800554a:	e084      	b.n	8005656 <main+0x2be>
		}else if(39<=dist_g && dist_g<92){
 800554c:	f04f 0200 	mov.w	r2, #0
 8005550:	4b4d      	ldr	r3, [pc, #308]	; (8005688 <main+0x2f0>)
 8005552:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005556:	f7fb facd 	bl	8000af4 <__aeabi_dcmpge>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00d      	beq.n	800557c <main+0x1e4>
 8005560:	f04f 0200 	mov.w	r2, #0
 8005564:	4b49      	ldr	r3, [pc, #292]	; (800568c <main+0x2f4>)
 8005566:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800556a:	f7fb faaf 	bl	8000acc <__aeabi_dcmplt>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d003      	beq.n	800557c <main+0x1e4>
			magnitude = 5;
 8005574:	2305      	movs	r3, #5
 8005576:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800557a:	e06c      	b.n	8005656 <main+0x2be>
		}else if (92<=dist_g && dist_g<180) {
 800557c:	f04f 0200 	mov.w	r2, #0
 8005580:	4b42      	ldr	r3, [pc, #264]	; (800568c <main+0x2f4>)
 8005582:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005586:	f7fb fab5 	bl	8000af4 <__aeabi_dcmpge>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00d      	beq.n	80055ac <main+0x214>
 8005590:	f04f 0200 	mov.w	r2, #0
 8005594:	4b3e      	ldr	r3, [pc, #248]	; (8005690 <main+0x2f8>)
 8005596:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800559a:	f7fb fa97 	bl	8000acc <__aeabi_dcmplt>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d003      	beq.n	80055ac <main+0x214>
			magnitude = 6;
 80055a4:	2306      	movs	r3, #6
 80055a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80055aa:	e054      	b.n	8005656 <main+0x2be>
		}else if (180<=dist_g && dist_g<340){
 80055ac:	f04f 0200 	mov.w	r2, #0
 80055b0:	4b37      	ldr	r3, [pc, #220]	; (8005690 <main+0x2f8>)
 80055b2:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80055b6:	f7fb fa9d 	bl	8000af4 <__aeabi_dcmpge>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00d      	beq.n	80055dc <main+0x244>
 80055c0:	f04f 0200 	mov.w	r2, #0
 80055c4:	4b33      	ldr	r3, [pc, #204]	; (8005694 <main+0x2fc>)
 80055c6:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80055ca:	f7fb fa7f 	bl	8000acc <__aeabi_dcmplt>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d003      	beq.n	80055dc <main+0x244>
			magnitude = 7;
 80055d4:	2307      	movs	r3, #7
 80055d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80055da:	e03c      	b.n	8005656 <main+0x2be>
		}else if (340<=dist_g && dist_g<650){
 80055dc:	f04f 0200 	mov.w	r2, #0
 80055e0:	4b2c      	ldr	r3, [pc, #176]	; (8005694 <main+0x2fc>)
 80055e2:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80055e6:	f7fb fa85 	bl	8000af4 <__aeabi_dcmpge>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00d      	beq.n	800560c <main+0x274>
 80055f0:	f04f 0200 	mov.w	r2, #0
 80055f4:	4b28      	ldr	r3, [pc, #160]	; (8005698 <main+0x300>)
 80055f6:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80055fa:	f7fb fa67 	bl	8000acc <__aeabi_dcmplt>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d003      	beq.n	800560c <main+0x274>
			magnitude = 8;
 8005604:	2308      	movs	r3, #8
 8005606:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800560a:	e024      	b.n	8005656 <main+0x2be>
		}else if (650<=dist_g && dist_g<1240){
 800560c:	f04f 0200 	mov.w	r2, #0
 8005610:	4b21      	ldr	r3, [pc, #132]	; (8005698 <main+0x300>)
 8005612:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005616:	f7fb fa6d 	bl	8000af4 <__aeabi_dcmpge>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00d      	beq.n	800563c <main+0x2a4>
 8005620:	f04f 0200 	mov.w	r2, #0
 8005624:	4b1d      	ldr	r3, [pc, #116]	; (800569c <main+0x304>)
 8005626:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800562a:	f7fb fa4f 	bl	8000acc <__aeabi_dcmplt>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d003      	beq.n	800563c <main+0x2a4>
			magnitude = 9;
 8005634:	2309      	movs	r3, #9
 8005636:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800563a:	e00c      	b.n	8005656 <main+0x2be>
		}else if (dist_g >= 1240){
 800563c:	f04f 0200 	mov.w	r2, #0
 8005640:	4b16      	ldr	r3, [pc, #88]	; (800569c <main+0x304>)
 8005642:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005646:	f7fb fa55 	bl	8000af4 <__aeabi_dcmpge>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d002      	beq.n	8005656 <main+0x2be>
			magnitude = 10;
 8005650:	230a      	movs	r3, #10
 8005652:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

		//TODO: We should store in flash something like : PGA: X: %d g Y:%d g Z:%d g, Mag:%d, Time:time(NULL)
		if(magnitude>5){
			//TODO: We should trigger speaker
		}
	 		magnitude = 0;
 8005656:	2300      	movs	r3, #0
 8005658:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	  }
	  HAL_Delay(50); //20Hz
 800565c:	2032      	movs	r0, #50	; 0x32
 800565e:	f7fb fc8f 	bl	8000f80 <HAL_Delay>
  {
 8005662:	e6b8      	b.n	80053d6 <main+0x3e>
 8005664:	f3af 8000 	nop.w
 8005668:	00000000 	.word	0x00000000
 800566c:	40000000 	.word	0x40000000
 8005670:	51eb851f 	.word	0x51eb851f
 8005674:	40239eb8 	.word	0x40239eb8
 8005678:	08007d48 	.word	0x08007d48
 800567c:	20000180 	.word	0x20000180
 8005680:	08007d68 	.word	0x08007d68
 8005684:	403e0000 	.word	0x403e0000
 8005688:	40438000 	.word	0x40438000
 800568c:	40570000 	.word	0x40570000
 8005690:	40668000 	.word	0x40668000
 8005694:	40754000 	.word	0x40754000
 8005698:	40845000 	.word	0x40845000
 800569c:	40936000 	.word	0x40936000

080056a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b0b8      	sub	sp, #224	; 0xe0
 80056a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80056a6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80056aa:	2244      	movs	r2, #68	; 0x44
 80056ac:	2100      	movs	r1, #0
 80056ae:	4618      	mov	r0, r3
 80056b0:	f000 fe7c 	bl	80063ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80056b4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80056b8:	2200      	movs	r2, #0
 80056ba:	601a      	str	r2, [r3, #0]
 80056bc:	605a      	str	r2, [r3, #4]
 80056be:	609a      	str	r2, [r3, #8]
 80056c0:	60da      	str	r2, [r3, #12]
 80056c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80056c4:	463b      	mov	r3, r7
 80056c6:	2288      	movs	r2, #136	; 0x88
 80056c8:	2100      	movs	r1, #0
 80056ca:	4618      	mov	r0, r3
 80056cc:	f000 fe6e 	bl	80063ac <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80056d0:	2310      	movs	r3, #16
 80056d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80056d6:	2301      	movs	r3, #1
 80056d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80056dc:	2300      	movs	r3, #0
 80056de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80056e2:	2360      	movs	r3, #96	; 0x60
 80056e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80056e8:	2302      	movs	r3, #2
 80056ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80056ee:	2301      	movs	r3, #1
 80056f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80056f4:	2301      	movs	r3, #1
 80056f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 80056fa:	2328      	movs	r3, #40	; 0x28
 80056fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8005700:	2307      	movs	r3, #7
 8005702:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005706:	2302      	movs	r3, #2
 8005708:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800570c:	2302      	movs	r3, #2
 800570e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005712:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005716:	4618      	mov	r0, r3
 8005718:	f7fd f97e 	bl	8002a18 <HAL_RCC_OscConfig>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d001      	beq.n	8005726 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8005722:	f000 f9d5 	bl	8005ad0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005726:	230f      	movs	r3, #15
 8005728:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800572c:	2303      	movs	r3, #3
 800572e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005732:	2300      	movs	r3, #0
 8005734:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005738:	2300      	movs	r3, #0
 800573a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800573e:	2300      	movs	r3, #0
 8005740:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005744:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005748:	2104      	movs	r1, #4
 800574a:	4618      	mov	r0, r3
 800574c:	f7fd fd4a 	bl	80031e4 <HAL_RCC_ClockConfig>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d001      	beq.n	800575a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8005756:	f000 f9bb 	bl	8005ad0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C2;
 800575a:	2381      	movs	r3, #129	; 0x81
 800575c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800575e:	2300      	movs	r3, #0
 8005760:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8005762:	2300      	movs	r3, #0
 8005764:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005766:	463b      	mov	r3, r7
 8005768:	4618      	mov	r0, r3
 800576a:	f7fd ff3f 	bl	80035ec <HAL_RCCEx_PeriphCLKConfig>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d001      	beq.n	8005778 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8005774:	f000 f9ac 	bl	8005ad0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8005778:	f44f 7000 	mov.w	r0, #512	; 0x200
 800577c:	f7fd f83a 	bl	80027f4 <HAL_PWREx_ControlVoltageScaling>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d001      	beq.n	800578a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8005786:	f000 f9a3 	bl	8005ad0 <Error_Handler>
  }
}
 800578a:	bf00      	nop
 800578c:	37e0      	adds	r7, #224	; 0xe0
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
	...

08005794 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b08a      	sub	sp, #40	; 0x28
 8005798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800579a:	1d3b      	adds	r3, r7, #4
 800579c:	2224      	movs	r2, #36	; 0x24
 800579e:	2100      	movs	r1, #0
 80057a0:	4618      	mov	r0, r3
 80057a2:	f000 fe03 	bl	80063ac <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80057a6:	4b12      	ldr	r3, [pc, #72]	; (80057f0 <MX_DAC1_Init+0x5c>)
 80057a8:	4a12      	ldr	r2, [pc, #72]	; (80057f4 <MX_DAC1_Init+0x60>)
 80057aa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80057ac:	4810      	ldr	r0, [pc, #64]	; (80057f0 <MX_DAC1_Init+0x5c>)
 80057ae:	f7fb fd1a 	bl	80011e6 <HAL_DAC_Init>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d001      	beq.n	80057bc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80057b8:	f000 f98a 	bl	8005ad0 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80057bc:	2300      	movs	r3, #0
 80057be:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80057c0:	2324      	movs	r3, #36	; 0x24
 80057c2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80057c4:	2300      	movs	r3, #0
 80057c6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80057c8:	2300      	movs	r3, #0
 80057ca:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80057cc:	2300      	movs	r3, #0
 80057ce:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80057d0:	1d3b      	adds	r3, r7, #4
 80057d2:	2200      	movs	r2, #0
 80057d4:	4619      	mov	r1, r3
 80057d6:	4806      	ldr	r0, [pc, #24]	; (80057f0 <MX_DAC1_Init+0x5c>)
 80057d8:	f7fb fd27 	bl	800122a <HAL_DAC_ConfigChannel>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d001      	beq.n	80057e6 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80057e2:	f000 f975 	bl	8005ad0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80057e6:	bf00      	nop
 80057e8:	3728      	adds	r7, #40	; 0x28
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	200000d8 	.word	0x200000d8
 80057f4:	40007400 	.word	0x40007400

080057f8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80057fc:	4b1b      	ldr	r3, [pc, #108]	; (800586c <MX_I2C2_Init+0x74>)
 80057fe:	4a1c      	ldr	r2, [pc, #112]	; (8005870 <MX_I2C2_Init+0x78>)
 8005800:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8005802:	4b1a      	ldr	r3, [pc, #104]	; (800586c <MX_I2C2_Init+0x74>)
 8005804:	4a1b      	ldr	r2, [pc, #108]	; (8005874 <MX_I2C2_Init+0x7c>)
 8005806:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8005808:	4b18      	ldr	r3, [pc, #96]	; (800586c <MX_I2C2_Init+0x74>)
 800580a:	2200      	movs	r2, #0
 800580c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800580e:	4b17      	ldr	r3, [pc, #92]	; (800586c <MX_I2C2_Init+0x74>)
 8005810:	2201      	movs	r2, #1
 8005812:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005814:	4b15      	ldr	r3, [pc, #84]	; (800586c <MX_I2C2_Init+0x74>)
 8005816:	2200      	movs	r2, #0
 8005818:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800581a:	4b14      	ldr	r3, [pc, #80]	; (800586c <MX_I2C2_Init+0x74>)
 800581c:	2200      	movs	r2, #0
 800581e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005820:	4b12      	ldr	r3, [pc, #72]	; (800586c <MX_I2C2_Init+0x74>)
 8005822:	2200      	movs	r2, #0
 8005824:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005826:	4b11      	ldr	r3, [pc, #68]	; (800586c <MX_I2C2_Init+0x74>)
 8005828:	2200      	movs	r2, #0
 800582a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800582c:	4b0f      	ldr	r3, [pc, #60]	; (800586c <MX_I2C2_Init+0x74>)
 800582e:	2200      	movs	r2, #0
 8005830:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005832:	480e      	ldr	r0, [pc, #56]	; (800586c <MX_I2C2_Init+0x74>)
 8005834:	f7fc fa30 	bl	8001c98 <HAL_I2C_Init>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d001      	beq.n	8005842 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800583e:	f000 f947 	bl	8005ad0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005842:	2100      	movs	r1, #0
 8005844:	4809      	ldr	r0, [pc, #36]	; (800586c <MX_I2C2_Init+0x74>)
 8005846:	f7fc ff2f 	bl	80026a8 <HAL_I2CEx_ConfigAnalogFilter>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d001      	beq.n	8005854 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8005850:	f000 f93e 	bl	8005ad0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8005854:	2100      	movs	r1, #0
 8005856:	4805      	ldr	r0, [pc, #20]	; (800586c <MX_I2C2_Init+0x74>)
 8005858:	f7fc ff71 	bl	800273e <HAL_I2CEx_ConfigDigitalFilter>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d001      	beq.n	8005866 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8005862:	f000 f935 	bl	8005ad0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8005866:	bf00      	nop
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	200000ec 	.word	0x200000ec
 8005870:	40005800 	.word	0x40005800
 8005874:	10909cec 	.word	0x10909cec

08005878 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800587c:	4b0f      	ldr	r3, [pc, #60]	; (80058bc <MX_QUADSPI_Init+0x44>)
 800587e:	4a10      	ldr	r2, [pc, #64]	; (80058c0 <MX_QUADSPI_Init+0x48>)
 8005880:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8005882:	4b0e      	ldr	r3, [pc, #56]	; (80058bc <MX_QUADSPI_Init+0x44>)
 8005884:	22ff      	movs	r2, #255	; 0xff
 8005886:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8005888:	4b0c      	ldr	r3, [pc, #48]	; (80058bc <MX_QUADSPI_Init+0x44>)
 800588a:	2201      	movs	r2, #1
 800588c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800588e:	4b0b      	ldr	r3, [pc, #44]	; (80058bc <MX_QUADSPI_Init+0x44>)
 8005890:	2200      	movs	r2, #0
 8005892:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8005894:	4b09      	ldr	r3, [pc, #36]	; (80058bc <MX_QUADSPI_Init+0x44>)
 8005896:	2201      	movs	r2, #1
 8005898:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800589a:	4b08      	ldr	r3, [pc, #32]	; (80058bc <MX_QUADSPI_Init+0x44>)
 800589c:	2200      	movs	r2, #0
 800589e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80058a0:	4b06      	ldr	r3, [pc, #24]	; (80058bc <MX_QUADSPI_Init+0x44>)
 80058a2:	2200      	movs	r2, #0
 80058a4:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80058a6:	4805      	ldr	r0, [pc, #20]	; (80058bc <MX_QUADSPI_Init+0x44>)
 80058a8:	f7fc fffa 	bl	80028a0 <HAL_QSPI_Init>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d001      	beq.n	80058b6 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80058b2:	f000 f90d 	bl	8005ad0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80058b6:	bf00      	nop
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	2000024c 	.word	0x2000024c
 80058c0:	a0001000 	.word	0xa0001000

080058c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b088      	sub	sp, #32
 80058c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80058ca:	f107 0310 	add.w	r3, r7, #16
 80058ce:	2200      	movs	r2, #0
 80058d0:	601a      	str	r2, [r3, #0]
 80058d2:	605a      	str	r2, [r3, #4]
 80058d4:	609a      	str	r2, [r3, #8]
 80058d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80058d8:	1d3b      	adds	r3, r7, #4
 80058da:	2200      	movs	r2, #0
 80058dc:	601a      	str	r2, [r3, #0]
 80058de:	605a      	str	r2, [r3, #4]
 80058e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80058e2:	4b1e      	ldr	r3, [pc, #120]	; (800595c <MX_TIM2_Init+0x98>)
 80058e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80058e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80058ea:	4b1c      	ldr	r3, [pc, #112]	; (800595c <MX_TIM2_Init+0x98>)
 80058ec:	2200      	movs	r2, #0
 80058ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80058f0:	4b1a      	ldr	r3, [pc, #104]	; (800595c <MX_TIM2_Init+0x98>)
 80058f2:	2200      	movs	r2, #0
 80058f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1814;
 80058f6:	4b19      	ldr	r3, [pc, #100]	; (800595c <MX_TIM2_Init+0x98>)
 80058f8:	f240 7216 	movw	r2, #1814	; 0x716
 80058fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80058fe:	4b17      	ldr	r3, [pc, #92]	; (800595c <MX_TIM2_Init+0x98>)
 8005900:	2200      	movs	r2, #0
 8005902:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005904:	4b15      	ldr	r3, [pc, #84]	; (800595c <MX_TIM2_Init+0x98>)
 8005906:	2200      	movs	r2, #0
 8005908:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800590a:	4814      	ldr	r0, [pc, #80]	; (800595c <MX_TIM2_Init+0x98>)
 800590c:	f7fe fb1e 	bl	8003f4c <HAL_TIM_Base_Init>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d001      	beq.n	800591a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8005916:	f000 f8db 	bl	8005ad0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800591a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800591e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005920:	f107 0310 	add.w	r3, r7, #16
 8005924:	4619      	mov	r1, r3
 8005926:	480d      	ldr	r0, [pc, #52]	; (800595c <MX_TIM2_Init+0x98>)
 8005928:	f7fe fc86 	bl	8004238 <HAL_TIM_ConfigClockSource>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d001      	beq.n	8005936 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8005932:	f000 f8cd 	bl	8005ad0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005936:	2320      	movs	r3, #32
 8005938:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800593a:	2300      	movs	r3, #0
 800593c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800593e:	1d3b      	adds	r3, r7, #4
 8005940:	4619      	mov	r1, r3
 8005942:	4806      	ldr	r0, [pc, #24]	; (800595c <MX_TIM2_Init+0x98>)
 8005944:	f7fe fe98 	bl	8004678 <HAL_TIMEx_MasterConfigSynchronization>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d001      	beq.n	8005952 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800594e:	f000 f8bf 	bl	8005ad0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005952:	bf00      	nop
 8005954:	3720      	adds	r7, #32
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	20000200 	.word	0x20000200

08005960 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005964:	4b14      	ldr	r3, [pc, #80]	; (80059b8 <MX_USART1_UART_Init+0x58>)
 8005966:	4a15      	ldr	r2, [pc, #84]	; (80059bc <MX_USART1_UART_Init+0x5c>)
 8005968:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800596a:	4b13      	ldr	r3, [pc, #76]	; (80059b8 <MX_USART1_UART_Init+0x58>)
 800596c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005970:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005972:	4b11      	ldr	r3, [pc, #68]	; (80059b8 <MX_USART1_UART_Init+0x58>)
 8005974:	2200      	movs	r2, #0
 8005976:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005978:	4b0f      	ldr	r3, [pc, #60]	; (80059b8 <MX_USART1_UART_Init+0x58>)
 800597a:	2200      	movs	r2, #0
 800597c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800597e:	4b0e      	ldr	r3, [pc, #56]	; (80059b8 <MX_USART1_UART_Init+0x58>)
 8005980:	2200      	movs	r2, #0
 8005982:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005984:	4b0c      	ldr	r3, [pc, #48]	; (80059b8 <MX_USART1_UART_Init+0x58>)
 8005986:	220c      	movs	r2, #12
 8005988:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800598a:	4b0b      	ldr	r3, [pc, #44]	; (80059b8 <MX_USART1_UART_Init+0x58>)
 800598c:	2200      	movs	r2, #0
 800598e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005990:	4b09      	ldr	r3, [pc, #36]	; (80059b8 <MX_USART1_UART_Init+0x58>)
 8005992:	2200      	movs	r2, #0
 8005994:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005996:	4b08      	ldr	r3, [pc, #32]	; (80059b8 <MX_USART1_UART_Init+0x58>)
 8005998:	2200      	movs	r2, #0
 800599a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800599c:	4b06      	ldr	r3, [pc, #24]	; (80059b8 <MX_USART1_UART_Init+0x58>)
 800599e:	2200      	movs	r2, #0
 80059a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80059a2:	4805      	ldr	r0, [pc, #20]	; (80059b8 <MX_USART1_UART_Init+0x58>)
 80059a4:	f7fe ff0e 	bl	80047c4 <HAL_UART_Init>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d001      	beq.n	80059b2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80059ae:	f000 f88f 	bl	8005ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80059b2:	bf00      	nop
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	20000180 	.word	0x20000180
 80059bc:	40013800 	.word	0x40013800

080059c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80059c6:	4b0c      	ldr	r3, [pc, #48]	; (80059f8 <MX_DMA_Init+0x38>)
 80059c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059ca:	4a0b      	ldr	r2, [pc, #44]	; (80059f8 <MX_DMA_Init+0x38>)
 80059cc:	f043 0301 	orr.w	r3, r3, #1
 80059d0:	6493      	str	r3, [r2, #72]	; 0x48
 80059d2:	4b09      	ldr	r3, [pc, #36]	; (80059f8 <MX_DMA_Init+0x38>)
 80059d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	607b      	str	r3, [r7, #4]
 80059dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80059de:	2200      	movs	r2, #0
 80059e0:	2100      	movs	r1, #0
 80059e2:	200d      	movs	r0, #13
 80059e4:	f7fb fbc9 	bl	800117a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80059e8:	200d      	movs	r0, #13
 80059ea:	f7fb fbe2 	bl	80011b2 <HAL_NVIC_EnableIRQ>

}
 80059ee:	bf00      	nop
 80059f0:	3708      	adds	r7, #8
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	40021000 	.word	0x40021000

080059fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b08a      	sub	sp, #40	; 0x28
 8005a00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a02:	f107 0314 	add.w	r3, r7, #20
 8005a06:	2200      	movs	r2, #0
 8005a08:	601a      	str	r2, [r3, #0]
 8005a0a:	605a      	str	r2, [r3, #4]
 8005a0c:	609a      	str	r2, [r3, #8]
 8005a0e:	60da      	str	r2, [r3, #12]
 8005a10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a12:	4b2b      	ldr	r3, [pc, #172]	; (8005ac0 <MX_GPIO_Init+0xc4>)
 8005a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a16:	4a2a      	ldr	r2, [pc, #168]	; (8005ac0 <MX_GPIO_Init+0xc4>)
 8005a18:	f043 0304 	orr.w	r3, r3, #4
 8005a1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005a1e:	4b28      	ldr	r3, [pc, #160]	; (8005ac0 <MX_GPIO_Init+0xc4>)
 8005a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a22:	f003 0304 	and.w	r3, r3, #4
 8005a26:	613b      	str	r3, [r7, #16]
 8005a28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a2a:	4b25      	ldr	r3, [pc, #148]	; (8005ac0 <MX_GPIO_Init+0xc4>)
 8005a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a2e:	4a24      	ldr	r2, [pc, #144]	; (8005ac0 <MX_GPIO_Init+0xc4>)
 8005a30:	f043 0301 	orr.w	r3, r3, #1
 8005a34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005a36:	4b22      	ldr	r3, [pc, #136]	; (8005ac0 <MX_GPIO_Init+0xc4>)
 8005a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a3a:	f003 0301 	and.w	r3, r3, #1
 8005a3e:	60fb      	str	r3, [r7, #12]
 8005a40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005a42:	4b1f      	ldr	r3, [pc, #124]	; (8005ac0 <MX_GPIO_Init+0xc4>)
 8005a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a46:	4a1e      	ldr	r2, [pc, #120]	; (8005ac0 <MX_GPIO_Init+0xc4>)
 8005a48:	f043 0310 	orr.w	r3, r3, #16
 8005a4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005a4e:	4b1c      	ldr	r3, [pc, #112]	; (8005ac0 <MX_GPIO_Init+0xc4>)
 8005a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a52:	f003 0310 	and.w	r3, r3, #16
 8005a56:	60bb      	str	r3, [r7, #8]
 8005a58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a5a:	4b19      	ldr	r3, [pc, #100]	; (8005ac0 <MX_GPIO_Init+0xc4>)
 8005a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a5e:	4a18      	ldr	r2, [pc, #96]	; (8005ac0 <MX_GPIO_Init+0xc4>)
 8005a60:	f043 0302 	orr.w	r3, r3, #2
 8005a64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005a66:	4b16      	ldr	r3, [pc, #88]	; (8005ac0 <MX_GPIO_Init+0xc4>)
 8005a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a6a:	f003 0302 	and.w	r3, r3, #2
 8005a6e:	607b      	str	r3, [r7, #4]
 8005a70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8005a72:	2200      	movs	r2, #0
 8005a74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005a78:	4812      	ldr	r0, [pc, #72]	; (8005ac4 <MX_GPIO_Init+0xc8>)
 8005a7a:	f7fc f8f5 	bl	8001c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005a7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005a84:	4b10      	ldr	r3, [pc, #64]	; (8005ac8 <MX_GPIO_Init+0xcc>)
 8005a86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a8c:	f107 0314 	add.w	r3, r7, #20
 8005a90:	4619      	mov	r1, r3
 8005a92:	480e      	ldr	r0, [pc, #56]	; (8005acc <MX_GPIO_Init+0xd0>)
 8005a94:	f7fb fe4c 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8005a98:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8005aaa:	f107 0314 	add.w	r3, r7, #20
 8005aae:	4619      	mov	r1, r3
 8005ab0:	4804      	ldr	r0, [pc, #16]	; (8005ac4 <MX_GPIO_Init+0xc8>)
 8005ab2:	f7fb fe3d 	bl	8001730 <HAL_GPIO_Init>

}
 8005ab6:	bf00      	nop
 8005ab8:	3728      	adds	r7, #40	; 0x28
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	40021000 	.word	0x40021000
 8005ac4:	48000400 	.word	0x48000400
 8005ac8:	10210000 	.word	0x10210000
 8005acc:	48000800 	.word	0x48000800

08005ad0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005ad4:	bf00      	nop
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
	...

08005ae0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b08a      	sub	sp, #40	; 0x28
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8005ae8:	4b27      	ldr	r3, [pc, #156]	; (8005b88 <I2Cx_MspInit+0xa8>)
 8005aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aec:	4a26      	ldr	r2, [pc, #152]	; (8005b88 <I2Cx_MspInit+0xa8>)
 8005aee:	f043 0302 	orr.w	r3, r3, #2
 8005af2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005af4:	4b24      	ldr	r3, [pc, #144]	; (8005b88 <I2Cx_MspInit+0xa8>)
 8005af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005af8:	f003 0302 	and.w	r3, r3, #2
 8005afc:	613b      	str	r3, [r7, #16]
 8005afe:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8005b00:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005b04:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8005b06:	2312      	movs	r3, #18
 8005b08:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8005b12:	2304      	movs	r3, #4
 8005b14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8005b16:	f107 0314 	add.w	r3, r7, #20
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	481b      	ldr	r0, [pc, #108]	; (8005b8c <I2Cx_MspInit+0xac>)
 8005b1e:	f7fb fe07 	bl	8001730 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8005b22:	f107 0314 	add.w	r3, r7, #20
 8005b26:	4619      	mov	r1, r3
 8005b28:	4818      	ldr	r0, [pc, #96]	; (8005b8c <I2Cx_MspInit+0xac>)
 8005b2a:	f7fb fe01 	bl	8001730 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8005b2e:	4b16      	ldr	r3, [pc, #88]	; (8005b88 <I2Cx_MspInit+0xa8>)
 8005b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b32:	4a15      	ldr	r2, [pc, #84]	; (8005b88 <I2Cx_MspInit+0xa8>)
 8005b34:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005b38:	6593      	str	r3, [r2, #88]	; 0x58
 8005b3a:	4b13      	ldr	r3, [pc, #76]	; (8005b88 <I2Cx_MspInit+0xa8>)
 8005b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b42:	60fb      	str	r3, [r7, #12]
 8005b44:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8005b46:	4b10      	ldr	r3, [pc, #64]	; (8005b88 <I2Cx_MspInit+0xa8>)
 8005b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4a:	4a0f      	ldr	r2, [pc, #60]	; (8005b88 <I2Cx_MspInit+0xa8>)
 8005b4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005b50:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8005b52:	4b0d      	ldr	r3, [pc, #52]	; (8005b88 <I2Cx_MspInit+0xa8>)
 8005b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b56:	4a0c      	ldr	r2, [pc, #48]	; (8005b88 <I2Cx_MspInit+0xa8>)
 8005b58:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005b5c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8005b5e:	2200      	movs	r2, #0
 8005b60:	210f      	movs	r1, #15
 8005b62:	2021      	movs	r0, #33	; 0x21
 8005b64:	f7fb fb09 	bl	800117a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8005b68:	2021      	movs	r0, #33	; 0x21
 8005b6a:	f7fb fb22 	bl	80011b2 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8005b6e:	2200      	movs	r2, #0
 8005b70:	210f      	movs	r1, #15
 8005b72:	2022      	movs	r0, #34	; 0x22
 8005b74:	f7fb fb01 	bl	800117a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8005b78:	2022      	movs	r0, #34	; 0x22
 8005b7a:	f7fb fb1a 	bl	80011b2 <HAL_NVIC_EnableIRQ>
}
 8005b7e:	bf00      	nop
 8005b80:	3728      	adds	r7, #40	; 0x28
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	40021000 	.word	0x40021000
 8005b8c:	48000400 	.word	0x48000400

08005b90 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a12      	ldr	r2, [pc, #72]	; (8005be4 <I2Cx_Init+0x54>)
 8005b9c:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a11      	ldr	r2, [pc, #68]	; (8005be8 <I2Cx_Init+0x58>)
 8005ba2:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2201      	movs	r2, #1
 8005bae:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f7ff ff89 	bl	8005ae0 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f7fc f862 	bl	8001c98 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8005bd4:	2100      	movs	r1, #0
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f7fc fd66 	bl	80026a8 <HAL_I2CEx_ConfigAnalogFilter>
}
 8005bdc:	bf00      	nop
 8005bde:	3708      	adds	r7, #8
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	40005800 	.word	0x40005800
 8005be8:	00702681 	.word	0x00702681

08005bec <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b08a      	sub	sp, #40	; 0x28
 8005bf0:	af04      	add	r7, sp, #16
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	4608      	mov	r0, r1
 8005bf6:	4611      	mov	r1, r2
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	72fb      	strb	r3, [r7, #11]
 8005bfe:	460b      	mov	r3, r1
 8005c00:	813b      	strh	r3, [r7, #8]
 8005c02:	4613      	mov	r3, r2
 8005c04:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8005c06:	2300      	movs	r3, #0
 8005c08:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8005c0a:	7afb      	ldrb	r3, [r7, #11]
 8005c0c:	b299      	uxth	r1, r3
 8005c0e:	88f8      	ldrh	r0, [r7, #6]
 8005c10:	893a      	ldrh	r2, [r7, #8]
 8005c12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005c16:	9302      	str	r3, [sp, #8]
 8005c18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c1a:	9301      	str	r3, [sp, #4]
 8005c1c:	6a3b      	ldr	r3, [r7, #32]
 8005c1e:	9300      	str	r3, [sp, #0]
 8005c20:	4603      	mov	r3, r0
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f7fc fa0a 	bl	800203c <HAL_I2C_Mem_Read>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8005c2c:	7dfb      	ldrb	r3, [r7, #23]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d004      	beq.n	8005c3c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8005c32:	7afb      	ldrb	r3, [r7, #11]
 8005c34:	4619      	mov	r1, r3
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f000 f832 	bl	8005ca0 <I2Cx_Error>
  }
  return status;
 8005c3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3718      	adds	r7, #24
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}

08005c46 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8005c46:	b580      	push	{r7, lr}
 8005c48:	b08a      	sub	sp, #40	; 0x28
 8005c4a:	af04      	add	r7, sp, #16
 8005c4c:	60f8      	str	r0, [r7, #12]
 8005c4e:	4608      	mov	r0, r1
 8005c50:	4611      	mov	r1, r2
 8005c52:	461a      	mov	r2, r3
 8005c54:	4603      	mov	r3, r0
 8005c56:	72fb      	strb	r3, [r7, #11]
 8005c58:	460b      	mov	r3, r1
 8005c5a:	813b      	strh	r3, [r7, #8]
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8005c60:	2300      	movs	r3, #0
 8005c62:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8005c64:	7afb      	ldrb	r3, [r7, #11]
 8005c66:	b299      	uxth	r1, r3
 8005c68:	88f8      	ldrh	r0, [r7, #6]
 8005c6a:	893a      	ldrh	r2, [r7, #8]
 8005c6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005c70:	9302      	str	r3, [sp, #8]
 8005c72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c74:	9301      	str	r3, [sp, #4]
 8005c76:	6a3b      	ldr	r3, [r7, #32]
 8005c78:	9300      	str	r3, [sp, #0]
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	68f8      	ldr	r0, [r7, #12]
 8005c7e:	f7fc f8c9 	bl	8001e14 <HAL_I2C_Mem_Write>
 8005c82:	4603      	mov	r3, r0
 8005c84:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8005c86:	7dfb      	ldrb	r3, [r7, #23]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d004      	beq.n	8005c96 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8005c8c:	7afb      	ldrb	r3, [r7, #11]
 8005c8e:	4619      	mov	r1, r3
 8005c90:	68f8      	ldr	r0, [r7, #12]
 8005c92:	f000 f805 	bl	8005ca0 <I2Cx_Error>
  }
  return status;
 8005c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3718      	adds	r7, #24
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b082      	sub	sp, #8
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	460b      	mov	r3, r1
 8005caa:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f7fc f882 	bl	8001db6 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f7ff ff6c 	bl	8005b90 <I2Cx_Init>
}
 8005cb8:	bf00      	nop
 8005cba:	3708      	adds	r7, #8
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8005cc4:	4802      	ldr	r0, [pc, #8]	; (8005cd0 <SENSOR_IO_Init+0x10>)
 8005cc6:	f7ff ff63 	bl	8005b90 <I2Cx_Init>
}
 8005cca:	bf00      	nop
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	20000310 	.word	0x20000310

08005cd4 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af02      	add	r7, sp, #8
 8005cda:	4603      	mov	r3, r0
 8005cdc:	71fb      	strb	r3, [r7, #7]
 8005cde:	460b      	mov	r3, r1
 8005ce0:	71bb      	strb	r3, [r7, #6]
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8005ce6:	79bb      	ldrb	r3, [r7, #6]
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	79f9      	ldrb	r1, [r7, #7]
 8005cec:	2301      	movs	r3, #1
 8005cee:	9301      	str	r3, [sp, #4]
 8005cf0:	1d7b      	adds	r3, r7, #5
 8005cf2:	9300      	str	r3, [sp, #0]
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	4803      	ldr	r0, [pc, #12]	; (8005d04 <SENSOR_IO_Write+0x30>)
 8005cf8:	f7ff ffa5 	bl	8005c46 <I2Cx_WriteMultiple>
}
 8005cfc:	bf00      	nop
 8005cfe:	3708      	adds	r7, #8
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	20000310 	.word	0x20000310

08005d08 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b086      	sub	sp, #24
 8005d0c:	af02      	add	r7, sp, #8
 8005d0e:	4603      	mov	r3, r0
 8005d10:	460a      	mov	r2, r1
 8005d12:	71fb      	strb	r3, [r7, #7]
 8005d14:	4613      	mov	r3, r2
 8005d16:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8005d1c:	79bb      	ldrb	r3, [r7, #6]
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	79f9      	ldrb	r1, [r7, #7]
 8005d22:	2301      	movs	r3, #1
 8005d24:	9301      	str	r3, [sp, #4]
 8005d26:	f107 030f 	add.w	r3, r7, #15
 8005d2a:	9300      	str	r3, [sp, #0]
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	4804      	ldr	r0, [pc, #16]	; (8005d40 <SENSOR_IO_Read+0x38>)
 8005d30:	f7ff ff5c 	bl	8005bec <I2Cx_ReadMultiple>

  return read_value;
 8005d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3710      	adds	r7, #16
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	20000310 	.word	0x20000310

08005d44 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af02      	add	r7, sp, #8
 8005d4a:	603a      	str	r2, [r7, #0]
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	4603      	mov	r3, r0
 8005d50:	71fb      	strb	r3, [r7, #7]
 8005d52:	460b      	mov	r3, r1
 8005d54:	71bb      	strb	r3, [r7, #6]
 8005d56:	4613      	mov	r3, r2
 8005d58:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8005d5a:	79bb      	ldrb	r3, [r7, #6]
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	79f9      	ldrb	r1, [r7, #7]
 8005d60:	88bb      	ldrh	r3, [r7, #4]
 8005d62:	9301      	str	r3, [sp, #4]
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	9300      	str	r3, [sp, #0]
 8005d68:	2301      	movs	r3, #1
 8005d6a:	4804      	ldr	r0, [pc, #16]	; (8005d7c <SENSOR_IO_ReadMultiple+0x38>)
 8005d6c:	f7ff ff3e 	bl	8005bec <I2Cx_ReadMultiple>
 8005d70:	4603      	mov	r3, r0
 8005d72:	b29b      	uxth	r3, r3
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3708      	adds	r7, #8
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	20000310 	.word	0x20000310

08005d80 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8005d86:	2300      	movs	r3, #0
 8005d88:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8005d8e:	4b19      	ldr	r3, [pc, #100]	; (8005df4 <BSP_ACCELERO_Init+0x74>)
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	4798      	blx	r3
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b6a      	cmp	r3, #106	; 0x6a
 8005d98:	d002      	beq.n	8005da0 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	73fb      	strb	r3, [r7, #15]
 8005d9e:	e024      	b.n	8005dea <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8005da0:	4b15      	ldr	r3, [pc, #84]	; (8005df8 <BSP_ACCELERO_Init+0x78>)
 8005da2:	4a14      	ldr	r2, [pc, #80]	; (8005df4 <BSP_ACCELERO_Init+0x74>)
 8005da4:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8005da6:	2330      	movs	r3, #48	; 0x30
 8005da8:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8005daa:	2300      	movs	r3, #0
 8005dac:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8005dae:	2300      	movs	r3, #0
 8005db0:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8005db2:	2340      	movs	r3, #64	; 0x40
 8005db4:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8005db6:	2300      	movs	r3, #0
 8005db8:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8005dbe:	797a      	ldrb	r2, [r7, #5]
 8005dc0:	7abb      	ldrb	r3, [r7, #10]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8005dc8:	7a3b      	ldrb	r3, [r7, #8]
 8005dca:	f043 0304 	orr.w	r3, r3, #4
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	021b      	lsls	r3, r3, #8
 8005dd2:	b21a      	sxth	r2, r3
 8005dd4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	b21b      	sxth	r3, r3
 8005ddc:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8005dde:	4b06      	ldr	r3, [pc, #24]	; (8005df8 <BSP_ACCELERO_Init+0x78>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	89ba      	ldrh	r2, [r7, #12]
 8005de6:	4610      	mov	r0, r2
 8005de8:	4798      	blx	r3
  }  

  return ret;
 8005dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3710      	adds	r7, #16
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	20000008 	.word	0x20000008
 8005df8:	200000c4 	.word	0x200000c4

08005dfc <BSP_ACCELERO_LowPower>:
  * @brief  Set/Unset the ACCELERO in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  * @retval None
  */
void BSP_ACCELERO_LowPower(uint16_t status)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	4603      	mov	r3, r0
 8005e04:	80fb      	strh	r3, [r7, #6]
  /* Set/Unset the ACCELERO in low power mode */
  if(AccelerometerDrv != NULL)
 8005e06:	4b09      	ldr	r3, [pc, #36]	; (8005e2c <BSP_ACCELERO_LowPower+0x30>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00a      	beq.n	8005e24 <BSP_ACCELERO_LowPower+0x28>
  {
    if(AccelerometerDrv->LowPower != NULL)
 8005e0e:	4b07      	ldr	r3, [pc, #28]	; (8005e2c <BSP_ACCELERO_LowPower+0x30>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d005      	beq.n	8005e24 <BSP_ACCELERO_LowPower+0x28>
    {
      AccelerometerDrv->LowPower(status);
 8005e18:	4b04      	ldr	r3, [pc, #16]	; (8005e2c <BSP_ACCELERO_LowPower+0x30>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	88fa      	ldrh	r2, [r7, #6]
 8005e20:	4610      	mov	r0, r2
 8005e22:	4798      	blx	r3
    }
  }
}
 8005e24:	bf00      	nop
 8005e26:	3708      	adds	r7, #8
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	200000c4 	.word	0x200000c4

08005e30 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8005e38:	4b08      	ldr	r3, [pc, #32]	; (8005e5c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d009      	beq.n	8005e54 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8005e40:	4b06      	ldr	r3, [pc, #24]	; (8005e5c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d004      	beq.n	8005e54 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8005e4a:	4b04      	ldr	r3, [pc, #16]	; (8005e5c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	4798      	blx	r3
    }
  }
}
 8005e54:	bf00      	nop
 8005e56:	3708      	adds	r7, #8
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	200000c4 	.word	0x200000c4

08005e60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e66:	4b0f      	ldr	r3, [pc, #60]	; (8005ea4 <HAL_MspInit+0x44>)
 8005e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e6a:	4a0e      	ldr	r2, [pc, #56]	; (8005ea4 <HAL_MspInit+0x44>)
 8005e6c:	f043 0301 	orr.w	r3, r3, #1
 8005e70:	6613      	str	r3, [r2, #96]	; 0x60
 8005e72:	4b0c      	ldr	r3, [pc, #48]	; (8005ea4 <HAL_MspInit+0x44>)
 8005e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	607b      	str	r3, [r7, #4]
 8005e7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e7e:	4b09      	ldr	r3, [pc, #36]	; (8005ea4 <HAL_MspInit+0x44>)
 8005e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e82:	4a08      	ldr	r2, [pc, #32]	; (8005ea4 <HAL_MspInit+0x44>)
 8005e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e88:	6593      	str	r3, [r2, #88]	; 0x58
 8005e8a:	4b06      	ldr	r3, [pc, #24]	; (8005ea4 <HAL_MspInit+0x44>)
 8005e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e92:	603b      	str	r3, [r7, #0]
 8005e94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005e96:	bf00      	nop
 8005e98:	370c      	adds	r7, #12
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	40021000 	.word	0x40021000

08005ea8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b08a      	sub	sp, #40	; 0x28
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005eb0:	f107 0314 	add.w	r3, r7, #20
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	601a      	str	r2, [r3, #0]
 8005eb8:	605a      	str	r2, [r3, #4]
 8005eba:	609a      	str	r2, [r3, #8]
 8005ebc:	60da      	str	r2, [r3, #12]
 8005ebe:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a2a      	ldr	r2, [pc, #168]	; (8005f70 <HAL_DAC_MspInit+0xc8>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d14d      	bne.n	8005f66 <HAL_DAC_MspInit+0xbe>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8005eca:	4b2a      	ldr	r3, [pc, #168]	; (8005f74 <HAL_DAC_MspInit+0xcc>)
 8005ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ece:	4a29      	ldr	r2, [pc, #164]	; (8005f74 <HAL_DAC_MspInit+0xcc>)
 8005ed0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ed4:	6593      	str	r3, [r2, #88]	; 0x58
 8005ed6:	4b27      	ldr	r3, [pc, #156]	; (8005f74 <HAL_DAC_MspInit+0xcc>)
 8005ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ede:	613b      	str	r3, [r7, #16]
 8005ee0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ee2:	4b24      	ldr	r3, [pc, #144]	; (8005f74 <HAL_DAC_MspInit+0xcc>)
 8005ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ee6:	4a23      	ldr	r2, [pc, #140]	; (8005f74 <HAL_DAC_MspInit+0xcc>)
 8005ee8:	f043 0301 	orr.w	r3, r3, #1
 8005eec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005eee:	4b21      	ldr	r3, [pc, #132]	; (8005f74 <HAL_DAC_MspInit+0xcc>)
 8005ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ef2:	f003 0301 	and.w	r3, r3, #1
 8005ef6:	60fb      	str	r3, [r7, #12]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005efa:	2310      	movs	r3, #16
 8005efc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005efe:	2303      	movs	r3, #3
 8005f00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f02:	2300      	movs	r3, #0
 8005f04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f06:	f107 0314 	add.w	r3, r7, #20
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005f10:	f7fb fc0e 	bl	8001730 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8005f14:	4b18      	ldr	r3, [pc, #96]	; (8005f78 <HAL_DAC_MspInit+0xd0>)
 8005f16:	4a19      	ldr	r2, [pc, #100]	; (8005f7c <HAL_DAC_MspInit+0xd4>)
 8005f18:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8005f1a:	4b17      	ldr	r3, [pc, #92]	; (8005f78 <HAL_DAC_MspInit+0xd0>)
 8005f1c:	2206      	movs	r2, #6
 8005f1e:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005f20:	4b15      	ldr	r3, [pc, #84]	; (8005f78 <HAL_DAC_MspInit+0xd0>)
 8005f22:	2210      	movs	r2, #16
 8005f24:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005f26:	4b14      	ldr	r3, [pc, #80]	; (8005f78 <HAL_DAC_MspInit+0xd0>)
 8005f28:	2200      	movs	r2, #0
 8005f2a:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8005f2c:	4b12      	ldr	r3, [pc, #72]	; (8005f78 <HAL_DAC_MspInit+0xd0>)
 8005f2e:	2280      	movs	r2, #128	; 0x80
 8005f30:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005f32:	4b11      	ldr	r3, [pc, #68]	; (8005f78 <HAL_DAC_MspInit+0xd0>)
 8005f34:	2200      	movs	r2, #0
 8005f36:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005f38:	4b0f      	ldr	r3, [pc, #60]	; (8005f78 <HAL_DAC_MspInit+0xd0>)
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_NORMAL;
 8005f3e:	4b0e      	ldr	r3, [pc, #56]	; (8005f78 <HAL_DAC_MspInit+0xd0>)
 8005f40:	2200      	movs	r2, #0
 8005f42:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8005f44:	4b0c      	ldr	r3, [pc, #48]	; (8005f78 <HAL_DAC_MspInit+0xd0>)
 8005f46:	2200      	movs	r2, #0
 8005f48:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8005f4a:	480b      	ldr	r0, [pc, #44]	; (8005f78 <HAL_DAC_MspInit+0xd0>)
 8005f4c:	f7fb fa88 	bl	8001460 <HAL_DMA_Init>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d001      	beq.n	8005f5a <HAL_DAC_MspInit+0xb2>
    {
      Error_Handler();
 8005f56:	f7ff fdbb 	bl	8005ad0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a06      	ldr	r2, [pc, #24]	; (8005f78 <HAL_DAC_MspInit+0xd0>)
 8005f5e:	609a      	str	r2, [r3, #8]
 8005f60:	4a05      	ldr	r2, [pc, #20]	; (8005f78 <HAL_DAC_MspInit+0xd0>)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8005f66:	bf00      	nop
 8005f68:	3728      	adds	r7, #40	; 0x28
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	40007400 	.word	0x40007400
 8005f74:	40021000 	.word	0x40021000
 8005f78:	20000138 	.word	0x20000138
 8005f7c:	40020030 	.word	0x40020030

08005f80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b08a      	sub	sp, #40	; 0x28
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f88:	f107 0314 	add.w	r3, r7, #20
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	601a      	str	r2, [r3, #0]
 8005f90:	605a      	str	r2, [r3, #4]
 8005f92:	609a      	str	r2, [r3, #8]
 8005f94:	60da      	str	r2, [r3, #12]
 8005f96:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a17      	ldr	r2, [pc, #92]	; (8005ffc <HAL_I2C_MspInit+0x7c>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d128      	bne.n	8005ff4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fa2:	4b17      	ldr	r3, [pc, #92]	; (8006000 <HAL_I2C_MspInit+0x80>)
 8005fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fa6:	4a16      	ldr	r2, [pc, #88]	; (8006000 <HAL_I2C_MspInit+0x80>)
 8005fa8:	f043 0302 	orr.w	r3, r3, #2
 8005fac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005fae:	4b14      	ldr	r3, [pc, #80]	; (8006000 <HAL_I2C_MspInit+0x80>)
 8005fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fb2:	f003 0302 	and.w	r3, r3, #2
 8005fb6:	613b      	str	r3, [r7, #16]
 8005fb8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005fba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005fbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005fc0:	2312      	movs	r3, #18
 8005fc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fc8:	2303      	movs	r3, #3
 8005fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005fcc:	2304      	movs	r3, #4
 8005fce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005fd0:	f107 0314 	add.w	r3, r7, #20
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	480b      	ldr	r0, [pc, #44]	; (8006004 <HAL_I2C_MspInit+0x84>)
 8005fd8:	f7fb fbaa 	bl	8001730 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005fdc:	4b08      	ldr	r3, [pc, #32]	; (8006000 <HAL_I2C_MspInit+0x80>)
 8005fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fe0:	4a07      	ldr	r2, [pc, #28]	; (8006000 <HAL_I2C_MspInit+0x80>)
 8005fe2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005fe6:	6593      	str	r3, [r2, #88]	; 0x58
 8005fe8:	4b05      	ldr	r3, [pc, #20]	; (8006000 <HAL_I2C_MspInit+0x80>)
 8005fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ff0:	60fb      	str	r3, [r7, #12]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8005ff4:	bf00      	nop
 8005ff6:	3728      	adds	r7, #40	; 0x28
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	40005800 	.word	0x40005800
 8006000:	40021000 	.word	0x40021000
 8006004:	48000400 	.word	0x48000400

08006008 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a0b      	ldr	r2, [pc, #44]	; (8006044 <HAL_I2C_MspDeInit+0x3c>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d10f      	bne.n	800603a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 800601a:	4b0b      	ldr	r3, [pc, #44]	; (8006048 <HAL_I2C_MspDeInit+0x40>)
 800601c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800601e:	4a0a      	ldr	r2, [pc, #40]	; (8006048 <HAL_I2C_MspDeInit+0x40>)
 8006020:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8006024:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8006026:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800602a:	4808      	ldr	r0, [pc, #32]	; (800604c <HAL_I2C_MspDeInit+0x44>)
 800602c:	f7fb fd28 	bl	8001a80 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8006030:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006034:	4805      	ldr	r0, [pc, #20]	; (800604c <HAL_I2C_MspDeInit+0x44>)
 8006036:	f7fb fd23 	bl	8001a80 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800603a:	bf00      	nop
 800603c:	3708      	adds	r7, #8
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	40005800 	.word	0x40005800
 8006048:	40021000 	.word	0x40021000
 800604c:	48000400 	.word	0x48000400

08006050 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b08a      	sub	sp, #40	; 0x28
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006058:	f107 0314 	add.w	r3, r7, #20
 800605c:	2200      	movs	r2, #0
 800605e:	601a      	str	r2, [r3, #0]
 8006060:	605a      	str	r2, [r3, #4]
 8006062:	609a      	str	r2, [r3, #8]
 8006064:	60da      	str	r2, [r3, #12]
 8006066:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a17      	ldr	r2, [pc, #92]	; (80060cc <HAL_QSPI_MspInit+0x7c>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d128      	bne.n	80060c4 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8006072:	4b17      	ldr	r3, [pc, #92]	; (80060d0 <HAL_QSPI_MspInit+0x80>)
 8006074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006076:	4a16      	ldr	r2, [pc, #88]	; (80060d0 <HAL_QSPI_MspInit+0x80>)
 8006078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800607c:	6513      	str	r3, [r2, #80]	; 0x50
 800607e:	4b14      	ldr	r3, [pc, #80]	; (80060d0 <HAL_QSPI_MspInit+0x80>)
 8006080:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006086:	613b      	str	r3, [r7, #16]
 8006088:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800608a:	4b11      	ldr	r3, [pc, #68]	; (80060d0 <HAL_QSPI_MspInit+0x80>)
 800608c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800608e:	4a10      	ldr	r2, [pc, #64]	; (80060d0 <HAL_QSPI_MspInit+0x80>)
 8006090:	f043 0310 	orr.w	r3, r3, #16
 8006094:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006096:	4b0e      	ldr	r3, [pc, #56]	; (80060d0 <HAL_QSPI_MspInit+0x80>)
 8006098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800609a:	f003 0310 	and.w	r3, r3, #16
 800609e:	60fb      	str	r3, [r7, #12]
 80060a0:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80060a2:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80060a6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060a8:	2302      	movs	r3, #2
 80060aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060ac:	2300      	movs	r3, #0
 80060ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060b0:	2303      	movs	r3, #3
 80060b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80060b4:	230a      	movs	r3, #10
 80060b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80060b8:	f107 0314 	add.w	r3, r7, #20
 80060bc:	4619      	mov	r1, r3
 80060be:	4805      	ldr	r0, [pc, #20]	; (80060d4 <HAL_QSPI_MspInit+0x84>)
 80060c0:	f7fb fb36 	bl	8001730 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80060c4:	bf00      	nop
 80060c6:	3728      	adds	r7, #40	; 0x28
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	a0001000 	.word	0xa0001000
 80060d0:	40021000 	.word	0x40021000
 80060d4:	48001000 	.word	0x48001000

080060d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060e8:	d113      	bne.n	8006112 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80060ea:	4b0c      	ldr	r3, [pc, #48]	; (800611c <HAL_TIM_Base_MspInit+0x44>)
 80060ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ee:	4a0b      	ldr	r2, [pc, #44]	; (800611c <HAL_TIM_Base_MspInit+0x44>)
 80060f0:	f043 0301 	orr.w	r3, r3, #1
 80060f4:	6593      	str	r3, [r2, #88]	; 0x58
 80060f6:	4b09      	ldr	r3, [pc, #36]	; (800611c <HAL_TIM_Base_MspInit+0x44>)
 80060f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060fa:	f003 0301 	and.w	r3, r3, #1
 80060fe:	60fb      	str	r3, [r7, #12]
 8006100:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006102:	2200      	movs	r2, #0
 8006104:	2100      	movs	r1, #0
 8006106:	201c      	movs	r0, #28
 8006108:	f7fb f837 	bl	800117a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800610c:	201c      	movs	r0, #28
 800610e:	f7fb f850 	bl	80011b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8006112:	bf00      	nop
 8006114:	3710      	adds	r7, #16
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	40021000 	.word	0x40021000

08006120 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b08a      	sub	sp, #40	; 0x28
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006128:	f107 0314 	add.w	r3, r7, #20
 800612c:	2200      	movs	r2, #0
 800612e:	601a      	str	r2, [r3, #0]
 8006130:	605a      	str	r2, [r3, #4]
 8006132:	609a      	str	r2, [r3, #8]
 8006134:	60da      	str	r2, [r3, #12]
 8006136:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a17      	ldr	r2, [pc, #92]	; (800619c <HAL_UART_MspInit+0x7c>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d127      	bne.n	8006192 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006142:	4b17      	ldr	r3, [pc, #92]	; (80061a0 <HAL_UART_MspInit+0x80>)
 8006144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006146:	4a16      	ldr	r2, [pc, #88]	; (80061a0 <HAL_UART_MspInit+0x80>)
 8006148:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800614c:	6613      	str	r3, [r2, #96]	; 0x60
 800614e:	4b14      	ldr	r3, [pc, #80]	; (80061a0 <HAL_UART_MspInit+0x80>)
 8006150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006156:	613b      	str	r3, [r7, #16]
 8006158:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800615a:	4b11      	ldr	r3, [pc, #68]	; (80061a0 <HAL_UART_MspInit+0x80>)
 800615c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800615e:	4a10      	ldr	r2, [pc, #64]	; (80061a0 <HAL_UART_MspInit+0x80>)
 8006160:	f043 0302 	orr.w	r3, r3, #2
 8006164:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006166:	4b0e      	ldr	r3, [pc, #56]	; (80061a0 <HAL_UART_MspInit+0x80>)
 8006168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800616a:	f003 0302 	and.w	r3, r3, #2
 800616e:	60fb      	str	r3, [r7, #12]
 8006170:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006172:	23c0      	movs	r3, #192	; 0xc0
 8006174:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006176:	2302      	movs	r3, #2
 8006178:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800617a:	2300      	movs	r3, #0
 800617c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800617e:	2303      	movs	r3, #3
 8006180:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006182:	2307      	movs	r3, #7
 8006184:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006186:	f107 0314 	add.w	r3, r7, #20
 800618a:	4619      	mov	r1, r3
 800618c:	4805      	ldr	r0, [pc, #20]	; (80061a4 <HAL_UART_MspInit+0x84>)
 800618e:	f7fb facf 	bl	8001730 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006192:	bf00      	nop
 8006194:	3728      	adds	r7, #40	; 0x28
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	40013800 	.word	0x40013800
 80061a0:	40021000 	.word	0x40021000
 80061a4:	48000400 	.word	0x48000400

080061a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80061a8:	b480      	push	{r7}
 80061aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80061ac:	bf00      	nop
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr

080061b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80061b6:	b480      	push	{r7}
 80061b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80061ba:	e7fe      	b.n	80061ba <HardFault_Handler+0x4>

080061bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80061bc:	b480      	push	{r7}
 80061be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80061c0:	e7fe      	b.n	80061c0 <MemManage_Handler+0x4>

080061c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80061c2:	b480      	push	{r7}
 80061c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80061c6:	e7fe      	b.n	80061c6 <BusFault_Handler+0x4>

080061c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80061c8:	b480      	push	{r7}
 80061ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80061cc:	e7fe      	b.n	80061cc <UsageFault_Handler+0x4>

080061ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80061ce:	b480      	push	{r7}
 80061d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80061d2:	bf00      	nop
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80061dc:	b480      	push	{r7}
 80061de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80061e0:	bf00      	nop
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr

080061ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80061ea:	b480      	push	{r7}
 80061ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80061ee:	bf00      	nop
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80061fc:	f7fa fea0 	bl	8000f40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006200:	bf00      	nop
 8006202:	bd80      	pop	{r7, pc}

08006204 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8006208:	4802      	ldr	r0, [pc, #8]	; (8006214 <DMA1_Channel3_IRQHandler+0x10>)
 800620a:	f7fb f9e1 	bl	80015d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800620e:	bf00      	nop
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	20000138 	.word	0x20000138

08006218 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800621c:	4802      	ldr	r0, [pc, #8]	; (8006228 <TIM2_IRQHandler+0x10>)
 800621e:	f7fd feec 	bl	8003ffa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006222:	bf00      	nop
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	20000200 	.word	0x20000200

0800622c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b086      	sub	sp, #24
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006234:	4a14      	ldr	r2, [pc, #80]	; (8006288 <_sbrk+0x5c>)
 8006236:	4b15      	ldr	r3, [pc, #84]	; (800628c <_sbrk+0x60>)
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006240:	4b13      	ldr	r3, [pc, #76]	; (8006290 <_sbrk+0x64>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d102      	bne.n	800624e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006248:	4b11      	ldr	r3, [pc, #68]	; (8006290 <_sbrk+0x64>)
 800624a:	4a12      	ldr	r2, [pc, #72]	; (8006294 <_sbrk+0x68>)
 800624c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800624e:	4b10      	ldr	r3, [pc, #64]	; (8006290 <_sbrk+0x64>)
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4413      	add	r3, r2
 8006256:	693a      	ldr	r2, [r7, #16]
 8006258:	429a      	cmp	r2, r3
 800625a:	d207      	bcs.n	800626c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800625c:	f000 f87c 	bl	8006358 <__errno>
 8006260:	4602      	mov	r2, r0
 8006262:	230c      	movs	r3, #12
 8006264:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8006266:	f04f 33ff 	mov.w	r3, #4294967295
 800626a:	e009      	b.n	8006280 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800626c:	4b08      	ldr	r3, [pc, #32]	; (8006290 <_sbrk+0x64>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006272:	4b07      	ldr	r3, [pc, #28]	; (8006290 <_sbrk+0x64>)
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4413      	add	r3, r2
 800627a:	4a05      	ldr	r2, [pc, #20]	; (8006290 <_sbrk+0x64>)
 800627c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800627e:	68fb      	ldr	r3, [r7, #12]
}
 8006280:	4618      	mov	r0, r3
 8006282:	3718      	adds	r7, #24
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}
 8006288:	20018000 	.word	0x20018000
 800628c:	00000400 	.word	0x00000400
 8006290:	200000c8 	.word	0x200000c8
 8006294:	20000360 	.word	0x20000360

08006298 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8006298:	b480      	push	{r7}
 800629a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800629c:	4b17      	ldr	r3, [pc, #92]	; (80062fc <SystemInit+0x64>)
 800629e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062a2:	4a16      	ldr	r2, [pc, #88]	; (80062fc <SystemInit+0x64>)
 80062a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80062a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80062ac:	4b14      	ldr	r3, [pc, #80]	; (8006300 <SystemInit+0x68>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a13      	ldr	r2, [pc, #76]	; (8006300 <SystemInit+0x68>)
 80062b2:	f043 0301 	orr.w	r3, r3, #1
 80062b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80062b8:	4b11      	ldr	r3, [pc, #68]	; (8006300 <SystemInit+0x68>)
 80062ba:	2200      	movs	r2, #0
 80062bc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80062be:	4b10      	ldr	r3, [pc, #64]	; (8006300 <SystemInit+0x68>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a0f      	ldr	r2, [pc, #60]	; (8006300 <SystemInit+0x68>)
 80062c4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80062c8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80062cc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80062ce:	4b0c      	ldr	r3, [pc, #48]	; (8006300 <SystemInit+0x68>)
 80062d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80062d4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80062d6:	4b0a      	ldr	r3, [pc, #40]	; (8006300 <SystemInit+0x68>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a09      	ldr	r2, [pc, #36]	; (8006300 <SystemInit+0x68>)
 80062dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062e0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80062e2:	4b07      	ldr	r3, [pc, #28]	; (8006300 <SystemInit+0x68>)
 80062e4:	2200      	movs	r2, #0
 80062e6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80062e8:	4b04      	ldr	r3, [pc, #16]	; (80062fc <SystemInit+0x64>)
 80062ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80062ee:	609a      	str	r2, [r3, #8]
#endif
}
 80062f0:	bf00      	nop
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	e000ed00 	.word	0xe000ed00
 8006300:	40021000 	.word	0x40021000

08006304 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8006304:	f8df d034 	ldr.w	sp, [pc, #52]	; 800633c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006308:	f7ff ffc6 	bl	8006298 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800630c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800630e:	e003      	b.n	8006318 <LoopCopyDataInit>

08006310 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006310:	4b0b      	ldr	r3, [pc, #44]	; (8006340 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8006312:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006314:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8006316:	3104      	adds	r1, #4

08006318 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006318:	480a      	ldr	r0, [pc, #40]	; (8006344 <LoopForever+0xa>)
	ldr	r3, =_edata
 800631a:	4b0b      	ldr	r3, [pc, #44]	; (8006348 <LoopForever+0xe>)
	adds	r2, r0, r1
 800631c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800631e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006320:	d3f6      	bcc.n	8006310 <CopyDataInit>
	ldr	r2, =_sbss
 8006322:	4a0a      	ldr	r2, [pc, #40]	; (800634c <LoopForever+0x12>)
	b	LoopFillZerobss
 8006324:	e002      	b.n	800632c <LoopFillZerobss>

08006326 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8006326:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006328:	f842 3b04 	str.w	r3, [r2], #4

0800632c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800632c:	4b08      	ldr	r3, [pc, #32]	; (8006350 <LoopForever+0x16>)
	cmp	r2, r3
 800632e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006330:	d3f9      	bcc.n	8006326 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006332:	f000 f817 	bl	8006364 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006336:	f7ff f82f 	bl	8005398 <main>

0800633a <LoopForever>:

LoopForever:
    b LoopForever
 800633a:	e7fe      	b.n	800633a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800633c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8006340:	08007e50 	.word	0x08007e50
	ldr	r0, =_sdata
 8006344:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006348:	200000a8 	.word	0x200000a8
	ldr	r2, =_sbss
 800634c:	200000a8 	.word	0x200000a8
	ldr	r3, = _ebss
 8006350:	20000360 	.word	0x20000360

08006354 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006354:	e7fe      	b.n	8006354 <ADC1_2_IRQHandler>
	...

08006358 <__errno>:
 8006358:	4b01      	ldr	r3, [pc, #4]	; (8006360 <__errno+0x8>)
 800635a:	6818      	ldr	r0, [r3, #0]
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	20000040 	.word	0x20000040

08006364 <__libc_init_array>:
 8006364:	b570      	push	{r4, r5, r6, lr}
 8006366:	4e0d      	ldr	r6, [pc, #52]	; (800639c <__libc_init_array+0x38>)
 8006368:	4c0d      	ldr	r4, [pc, #52]	; (80063a0 <__libc_init_array+0x3c>)
 800636a:	1ba4      	subs	r4, r4, r6
 800636c:	10a4      	asrs	r4, r4, #2
 800636e:	2500      	movs	r5, #0
 8006370:	42a5      	cmp	r5, r4
 8006372:	d109      	bne.n	8006388 <__libc_init_array+0x24>
 8006374:	4e0b      	ldr	r6, [pc, #44]	; (80063a4 <__libc_init_array+0x40>)
 8006376:	4c0c      	ldr	r4, [pc, #48]	; (80063a8 <__libc_init_array+0x44>)
 8006378:	f001 fcd8 	bl	8007d2c <_init>
 800637c:	1ba4      	subs	r4, r4, r6
 800637e:	10a4      	asrs	r4, r4, #2
 8006380:	2500      	movs	r5, #0
 8006382:	42a5      	cmp	r5, r4
 8006384:	d105      	bne.n	8006392 <__libc_init_array+0x2e>
 8006386:	bd70      	pop	{r4, r5, r6, pc}
 8006388:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800638c:	4798      	blx	r3
 800638e:	3501      	adds	r5, #1
 8006390:	e7ee      	b.n	8006370 <__libc_init_array+0xc>
 8006392:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006396:	4798      	blx	r3
 8006398:	3501      	adds	r5, #1
 800639a:	e7f2      	b.n	8006382 <__libc_init_array+0x1e>
 800639c:	08007e48 	.word	0x08007e48
 80063a0:	08007e48 	.word	0x08007e48
 80063a4:	08007e48 	.word	0x08007e48
 80063a8:	08007e4c 	.word	0x08007e4c

080063ac <memset>:
 80063ac:	4402      	add	r2, r0
 80063ae:	4603      	mov	r3, r0
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d100      	bne.n	80063b6 <memset+0xa>
 80063b4:	4770      	bx	lr
 80063b6:	f803 1b01 	strb.w	r1, [r3], #1
 80063ba:	e7f9      	b.n	80063b0 <memset+0x4>

080063bc <siprintf>:
 80063bc:	b40e      	push	{r1, r2, r3}
 80063be:	b500      	push	{lr}
 80063c0:	b09c      	sub	sp, #112	; 0x70
 80063c2:	ab1d      	add	r3, sp, #116	; 0x74
 80063c4:	9002      	str	r0, [sp, #8]
 80063c6:	9006      	str	r0, [sp, #24]
 80063c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80063cc:	4809      	ldr	r0, [pc, #36]	; (80063f4 <siprintf+0x38>)
 80063ce:	9107      	str	r1, [sp, #28]
 80063d0:	9104      	str	r1, [sp, #16]
 80063d2:	4909      	ldr	r1, [pc, #36]	; (80063f8 <siprintf+0x3c>)
 80063d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80063d8:	9105      	str	r1, [sp, #20]
 80063da:	6800      	ldr	r0, [r0, #0]
 80063dc:	9301      	str	r3, [sp, #4]
 80063de:	a902      	add	r1, sp, #8
 80063e0:	f000 f866 	bl	80064b0 <_svfiprintf_r>
 80063e4:	9b02      	ldr	r3, [sp, #8]
 80063e6:	2200      	movs	r2, #0
 80063e8:	701a      	strb	r2, [r3, #0]
 80063ea:	b01c      	add	sp, #112	; 0x70
 80063ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80063f0:	b003      	add	sp, #12
 80063f2:	4770      	bx	lr
 80063f4:	20000040 	.word	0x20000040
 80063f8:	ffff0208 	.word	0xffff0208

080063fc <__ssputs_r>:
 80063fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006400:	688e      	ldr	r6, [r1, #8]
 8006402:	429e      	cmp	r6, r3
 8006404:	4682      	mov	sl, r0
 8006406:	460c      	mov	r4, r1
 8006408:	4690      	mov	r8, r2
 800640a:	4699      	mov	r9, r3
 800640c:	d837      	bhi.n	800647e <__ssputs_r+0x82>
 800640e:	898a      	ldrh	r2, [r1, #12]
 8006410:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006414:	d031      	beq.n	800647a <__ssputs_r+0x7e>
 8006416:	6825      	ldr	r5, [r4, #0]
 8006418:	6909      	ldr	r1, [r1, #16]
 800641a:	1a6f      	subs	r7, r5, r1
 800641c:	6965      	ldr	r5, [r4, #20]
 800641e:	2302      	movs	r3, #2
 8006420:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006424:	fb95 f5f3 	sdiv	r5, r5, r3
 8006428:	f109 0301 	add.w	r3, r9, #1
 800642c:	443b      	add	r3, r7
 800642e:	429d      	cmp	r5, r3
 8006430:	bf38      	it	cc
 8006432:	461d      	movcc	r5, r3
 8006434:	0553      	lsls	r3, r2, #21
 8006436:	d530      	bpl.n	800649a <__ssputs_r+0x9e>
 8006438:	4629      	mov	r1, r5
 800643a:	f000 fb2b 	bl	8006a94 <_malloc_r>
 800643e:	4606      	mov	r6, r0
 8006440:	b950      	cbnz	r0, 8006458 <__ssputs_r+0x5c>
 8006442:	230c      	movs	r3, #12
 8006444:	f8ca 3000 	str.w	r3, [sl]
 8006448:	89a3      	ldrh	r3, [r4, #12]
 800644a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800644e:	81a3      	strh	r3, [r4, #12]
 8006450:	f04f 30ff 	mov.w	r0, #4294967295
 8006454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006458:	463a      	mov	r2, r7
 800645a:	6921      	ldr	r1, [r4, #16]
 800645c:	f000 faa8 	bl	80069b0 <memcpy>
 8006460:	89a3      	ldrh	r3, [r4, #12]
 8006462:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800646a:	81a3      	strh	r3, [r4, #12]
 800646c:	6126      	str	r6, [r4, #16]
 800646e:	6165      	str	r5, [r4, #20]
 8006470:	443e      	add	r6, r7
 8006472:	1bed      	subs	r5, r5, r7
 8006474:	6026      	str	r6, [r4, #0]
 8006476:	60a5      	str	r5, [r4, #8]
 8006478:	464e      	mov	r6, r9
 800647a:	454e      	cmp	r6, r9
 800647c:	d900      	bls.n	8006480 <__ssputs_r+0x84>
 800647e:	464e      	mov	r6, r9
 8006480:	4632      	mov	r2, r6
 8006482:	4641      	mov	r1, r8
 8006484:	6820      	ldr	r0, [r4, #0]
 8006486:	f000 fa9e 	bl	80069c6 <memmove>
 800648a:	68a3      	ldr	r3, [r4, #8]
 800648c:	1b9b      	subs	r3, r3, r6
 800648e:	60a3      	str	r3, [r4, #8]
 8006490:	6823      	ldr	r3, [r4, #0]
 8006492:	441e      	add	r6, r3
 8006494:	6026      	str	r6, [r4, #0]
 8006496:	2000      	movs	r0, #0
 8006498:	e7dc      	b.n	8006454 <__ssputs_r+0x58>
 800649a:	462a      	mov	r2, r5
 800649c:	f000 fb54 	bl	8006b48 <_realloc_r>
 80064a0:	4606      	mov	r6, r0
 80064a2:	2800      	cmp	r0, #0
 80064a4:	d1e2      	bne.n	800646c <__ssputs_r+0x70>
 80064a6:	6921      	ldr	r1, [r4, #16]
 80064a8:	4650      	mov	r0, sl
 80064aa:	f000 faa5 	bl	80069f8 <_free_r>
 80064ae:	e7c8      	b.n	8006442 <__ssputs_r+0x46>

080064b0 <_svfiprintf_r>:
 80064b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064b4:	461d      	mov	r5, r3
 80064b6:	898b      	ldrh	r3, [r1, #12]
 80064b8:	061f      	lsls	r7, r3, #24
 80064ba:	b09d      	sub	sp, #116	; 0x74
 80064bc:	4680      	mov	r8, r0
 80064be:	460c      	mov	r4, r1
 80064c0:	4616      	mov	r6, r2
 80064c2:	d50f      	bpl.n	80064e4 <_svfiprintf_r+0x34>
 80064c4:	690b      	ldr	r3, [r1, #16]
 80064c6:	b96b      	cbnz	r3, 80064e4 <_svfiprintf_r+0x34>
 80064c8:	2140      	movs	r1, #64	; 0x40
 80064ca:	f000 fae3 	bl	8006a94 <_malloc_r>
 80064ce:	6020      	str	r0, [r4, #0]
 80064d0:	6120      	str	r0, [r4, #16]
 80064d2:	b928      	cbnz	r0, 80064e0 <_svfiprintf_r+0x30>
 80064d4:	230c      	movs	r3, #12
 80064d6:	f8c8 3000 	str.w	r3, [r8]
 80064da:	f04f 30ff 	mov.w	r0, #4294967295
 80064de:	e0c8      	b.n	8006672 <_svfiprintf_r+0x1c2>
 80064e0:	2340      	movs	r3, #64	; 0x40
 80064e2:	6163      	str	r3, [r4, #20]
 80064e4:	2300      	movs	r3, #0
 80064e6:	9309      	str	r3, [sp, #36]	; 0x24
 80064e8:	2320      	movs	r3, #32
 80064ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064ee:	2330      	movs	r3, #48	; 0x30
 80064f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064f4:	9503      	str	r5, [sp, #12]
 80064f6:	f04f 0b01 	mov.w	fp, #1
 80064fa:	4637      	mov	r7, r6
 80064fc:	463d      	mov	r5, r7
 80064fe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006502:	b10b      	cbz	r3, 8006508 <_svfiprintf_r+0x58>
 8006504:	2b25      	cmp	r3, #37	; 0x25
 8006506:	d13e      	bne.n	8006586 <_svfiprintf_r+0xd6>
 8006508:	ebb7 0a06 	subs.w	sl, r7, r6
 800650c:	d00b      	beq.n	8006526 <_svfiprintf_r+0x76>
 800650e:	4653      	mov	r3, sl
 8006510:	4632      	mov	r2, r6
 8006512:	4621      	mov	r1, r4
 8006514:	4640      	mov	r0, r8
 8006516:	f7ff ff71 	bl	80063fc <__ssputs_r>
 800651a:	3001      	adds	r0, #1
 800651c:	f000 80a4 	beq.w	8006668 <_svfiprintf_r+0x1b8>
 8006520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006522:	4453      	add	r3, sl
 8006524:	9309      	str	r3, [sp, #36]	; 0x24
 8006526:	783b      	ldrb	r3, [r7, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	f000 809d 	beq.w	8006668 <_svfiprintf_r+0x1b8>
 800652e:	2300      	movs	r3, #0
 8006530:	f04f 32ff 	mov.w	r2, #4294967295
 8006534:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006538:	9304      	str	r3, [sp, #16]
 800653a:	9307      	str	r3, [sp, #28]
 800653c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006540:	931a      	str	r3, [sp, #104]	; 0x68
 8006542:	462f      	mov	r7, r5
 8006544:	2205      	movs	r2, #5
 8006546:	f817 1b01 	ldrb.w	r1, [r7], #1
 800654a:	4850      	ldr	r0, [pc, #320]	; (800668c <_svfiprintf_r+0x1dc>)
 800654c:	f7f9 fe40 	bl	80001d0 <memchr>
 8006550:	9b04      	ldr	r3, [sp, #16]
 8006552:	b9d0      	cbnz	r0, 800658a <_svfiprintf_r+0xda>
 8006554:	06d9      	lsls	r1, r3, #27
 8006556:	bf44      	itt	mi
 8006558:	2220      	movmi	r2, #32
 800655a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800655e:	071a      	lsls	r2, r3, #28
 8006560:	bf44      	itt	mi
 8006562:	222b      	movmi	r2, #43	; 0x2b
 8006564:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006568:	782a      	ldrb	r2, [r5, #0]
 800656a:	2a2a      	cmp	r2, #42	; 0x2a
 800656c:	d015      	beq.n	800659a <_svfiprintf_r+0xea>
 800656e:	9a07      	ldr	r2, [sp, #28]
 8006570:	462f      	mov	r7, r5
 8006572:	2000      	movs	r0, #0
 8006574:	250a      	movs	r5, #10
 8006576:	4639      	mov	r1, r7
 8006578:	f811 3b01 	ldrb.w	r3, [r1], #1
 800657c:	3b30      	subs	r3, #48	; 0x30
 800657e:	2b09      	cmp	r3, #9
 8006580:	d94d      	bls.n	800661e <_svfiprintf_r+0x16e>
 8006582:	b1b8      	cbz	r0, 80065b4 <_svfiprintf_r+0x104>
 8006584:	e00f      	b.n	80065a6 <_svfiprintf_r+0xf6>
 8006586:	462f      	mov	r7, r5
 8006588:	e7b8      	b.n	80064fc <_svfiprintf_r+0x4c>
 800658a:	4a40      	ldr	r2, [pc, #256]	; (800668c <_svfiprintf_r+0x1dc>)
 800658c:	1a80      	subs	r0, r0, r2
 800658e:	fa0b f000 	lsl.w	r0, fp, r0
 8006592:	4318      	orrs	r0, r3
 8006594:	9004      	str	r0, [sp, #16]
 8006596:	463d      	mov	r5, r7
 8006598:	e7d3      	b.n	8006542 <_svfiprintf_r+0x92>
 800659a:	9a03      	ldr	r2, [sp, #12]
 800659c:	1d11      	adds	r1, r2, #4
 800659e:	6812      	ldr	r2, [r2, #0]
 80065a0:	9103      	str	r1, [sp, #12]
 80065a2:	2a00      	cmp	r2, #0
 80065a4:	db01      	blt.n	80065aa <_svfiprintf_r+0xfa>
 80065a6:	9207      	str	r2, [sp, #28]
 80065a8:	e004      	b.n	80065b4 <_svfiprintf_r+0x104>
 80065aa:	4252      	negs	r2, r2
 80065ac:	f043 0302 	orr.w	r3, r3, #2
 80065b0:	9207      	str	r2, [sp, #28]
 80065b2:	9304      	str	r3, [sp, #16]
 80065b4:	783b      	ldrb	r3, [r7, #0]
 80065b6:	2b2e      	cmp	r3, #46	; 0x2e
 80065b8:	d10c      	bne.n	80065d4 <_svfiprintf_r+0x124>
 80065ba:	787b      	ldrb	r3, [r7, #1]
 80065bc:	2b2a      	cmp	r3, #42	; 0x2a
 80065be:	d133      	bne.n	8006628 <_svfiprintf_r+0x178>
 80065c0:	9b03      	ldr	r3, [sp, #12]
 80065c2:	1d1a      	adds	r2, r3, #4
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	9203      	str	r2, [sp, #12]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	bfb8      	it	lt
 80065cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80065d0:	3702      	adds	r7, #2
 80065d2:	9305      	str	r3, [sp, #20]
 80065d4:	4d2e      	ldr	r5, [pc, #184]	; (8006690 <_svfiprintf_r+0x1e0>)
 80065d6:	7839      	ldrb	r1, [r7, #0]
 80065d8:	2203      	movs	r2, #3
 80065da:	4628      	mov	r0, r5
 80065dc:	f7f9 fdf8 	bl	80001d0 <memchr>
 80065e0:	b138      	cbz	r0, 80065f2 <_svfiprintf_r+0x142>
 80065e2:	2340      	movs	r3, #64	; 0x40
 80065e4:	1b40      	subs	r0, r0, r5
 80065e6:	fa03 f000 	lsl.w	r0, r3, r0
 80065ea:	9b04      	ldr	r3, [sp, #16]
 80065ec:	4303      	orrs	r3, r0
 80065ee:	3701      	adds	r7, #1
 80065f0:	9304      	str	r3, [sp, #16]
 80065f2:	7839      	ldrb	r1, [r7, #0]
 80065f4:	4827      	ldr	r0, [pc, #156]	; (8006694 <_svfiprintf_r+0x1e4>)
 80065f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065fa:	2206      	movs	r2, #6
 80065fc:	1c7e      	adds	r6, r7, #1
 80065fe:	f7f9 fde7 	bl	80001d0 <memchr>
 8006602:	2800      	cmp	r0, #0
 8006604:	d038      	beq.n	8006678 <_svfiprintf_r+0x1c8>
 8006606:	4b24      	ldr	r3, [pc, #144]	; (8006698 <_svfiprintf_r+0x1e8>)
 8006608:	bb13      	cbnz	r3, 8006650 <_svfiprintf_r+0x1a0>
 800660a:	9b03      	ldr	r3, [sp, #12]
 800660c:	3307      	adds	r3, #7
 800660e:	f023 0307 	bic.w	r3, r3, #7
 8006612:	3308      	adds	r3, #8
 8006614:	9303      	str	r3, [sp, #12]
 8006616:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006618:	444b      	add	r3, r9
 800661a:	9309      	str	r3, [sp, #36]	; 0x24
 800661c:	e76d      	b.n	80064fa <_svfiprintf_r+0x4a>
 800661e:	fb05 3202 	mla	r2, r5, r2, r3
 8006622:	2001      	movs	r0, #1
 8006624:	460f      	mov	r7, r1
 8006626:	e7a6      	b.n	8006576 <_svfiprintf_r+0xc6>
 8006628:	2300      	movs	r3, #0
 800662a:	3701      	adds	r7, #1
 800662c:	9305      	str	r3, [sp, #20]
 800662e:	4619      	mov	r1, r3
 8006630:	250a      	movs	r5, #10
 8006632:	4638      	mov	r0, r7
 8006634:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006638:	3a30      	subs	r2, #48	; 0x30
 800663a:	2a09      	cmp	r2, #9
 800663c:	d903      	bls.n	8006646 <_svfiprintf_r+0x196>
 800663e:	2b00      	cmp	r3, #0
 8006640:	d0c8      	beq.n	80065d4 <_svfiprintf_r+0x124>
 8006642:	9105      	str	r1, [sp, #20]
 8006644:	e7c6      	b.n	80065d4 <_svfiprintf_r+0x124>
 8006646:	fb05 2101 	mla	r1, r5, r1, r2
 800664a:	2301      	movs	r3, #1
 800664c:	4607      	mov	r7, r0
 800664e:	e7f0      	b.n	8006632 <_svfiprintf_r+0x182>
 8006650:	ab03      	add	r3, sp, #12
 8006652:	9300      	str	r3, [sp, #0]
 8006654:	4622      	mov	r2, r4
 8006656:	4b11      	ldr	r3, [pc, #68]	; (800669c <_svfiprintf_r+0x1ec>)
 8006658:	a904      	add	r1, sp, #16
 800665a:	4640      	mov	r0, r8
 800665c:	f3af 8000 	nop.w
 8006660:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006664:	4681      	mov	r9, r0
 8006666:	d1d6      	bne.n	8006616 <_svfiprintf_r+0x166>
 8006668:	89a3      	ldrh	r3, [r4, #12]
 800666a:	065b      	lsls	r3, r3, #25
 800666c:	f53f af35 	bmi.w	80064da <_svfiprintf_r+0x2a>
 8006670:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006672:	b01d      	add	sp, #116	; 0x74
 8006674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006678:	ab03      	add	r3, sp, #12
 800667a:	9300      	str	r3, [sp, #0]
 800667c:	4622      	mov	r2, r4
 800667e:	4b07      	ldr	r3, [pc, #28]	; (800669c <_svfiprintf_r+0x1ec>)
 8006680:	a904      	add	r1, sp, #16
 8006682:	4640      	mov	r0, r8
 8006684:	f000 f882 	bl	800678c <_printf_i>
 8006688:	e7ea      	b.n	8006660 <_svfiprintf_r+0x1b0>
 800668a:	bf00      	nop
 800668c:	08007dc4 	.word	0x08007dc4
 8006690:	08007dca 	.word	0x08007dca
 8006694:	08007dce 	.word	0x08007dce
 8006698:	00000000 	.word	0x00000000
 800669c:	080063fd 	.word	0x080063fd

080066a0 <_printf_common>:
 80066a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066a4:	4691      	mov	r9, r2
 80066a6:	461f      	mov	r7, r3
 80066a8:	688a      	ldr	r2, [r1, #8]
 80066aa:	690b      	ldr	r3, [r1, #16]
 80066ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066b0:	4293      	cmp	r3, r2
 80066b2:	bfb8      	it	lt
 80066b4:	4613      	movlt	r3, r2
 80066b6:	f8c9 3000 	str.w	r3, [r9]
 80066ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066be:	4606      	mov	r6, r0
 80066c0:	460c      	mov	r4, r1
 80066c2:	b112      	cbz	r2, 80066ca <_printf_common+0x2a>
 80066c4:	3301      	adds	r3, #1
 80066c6:	f8c9 3000 	str.w	r3, [r9]
 80066ca:	6823      	ldr	r3, [r4, #0]
 80066cc:	0699      	lsls	r1, r3, #26
 80066ce:	bf42      	ittt	mi
 80066d0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80066d4:	3302      	addmi	r3, #2
 80066d6:	f8c9 3000 	strmi.w	r3, [r9]
 80066da:	6825      	ldr	r5, [r4, #0]
 80066dc:	f015 0506 	ands.w	r5, r5, #6
 80066e0:	d107      	bne.n	80066f2 <_printf_common+0x52>
 80066e2:	f104 0a19 	add.w	sl, r4, #25
 80066e6:	68e3      	ldr	r3, [r4, #12]
 80066e8:	f8d9 2000 	ldr.w	r2, [r9]
 80066ec:	1a9b      	subs	r3, r3, r2
 80066ee:	42ab      	cmp	r3, r5
 80066f0:	dc28      	bgt.n	8006744 <_printf_common+0xa4>
 80066f2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80066f6:	6822      	ldr	r2, [r4, #0]
 80066f8:	3300      	adds	r3, #0
 80066fa:	bf18      	it	ne
 80066fc:	2301      	movne	r3, #1
 80066fe:	0692      	lsls	r2, r2, #26
 8006700:	d42d      	bmi.n	800675e <_printf_common+0xbe>
 8006702:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006706:	4639      	mov	r1, r7
 8006708:	4630      	mov	r0, r6
 800670a:	47c0      	blx	r8
 800670c:	3001      	adds	r0, #1
 800670e:	d020      	beq.n	8006752 <_printf_common+0xb2>
 8006710:	6823      	ldr	r3, [r4, #0]
 8006712:	68e5      	ldr	r5, [r4, #12]
 8006714:	f8d9 2000 	ldr.w	r2, [r9]
 8006718:	f003 0306 	and.w	r3, r3, #6
 800671c:	2b04      	cmp	r3, #4
 800671e:	bf08      	it	eq
 8006720:	1aad      	subeq	r5, r5, r2
 8006722:	68a3      	ldr	r3, [r4, #8]
 8006724:	6922      	ldr	r2, [r4, #16]
 8006726:	bf0c      	ite	eq
 8006728:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800672c:	2500      	movne	r5, #0
 800672e:	4293      	cmp	r3, r2
 8006730:	bfc4      	itt	gt
 8006732:	1a9b      	subgt	r3, r3, r2
 8006734:	18ed      	addgt	r5, r5, r3
 8006736:	f04f 0900 	mov.w	r9, #0
 800673a:	341a      	adds	r4, #26
 800673c:	454d      	cmp	r5, r9
 800673e:	d11a      	bne.n	8006776 <_printf_common+0xd6>
 8006740:	2000      	movs	r0, #0
 8006742:	e008      	b.n	8006756 <_printf_common+0xb6>
 8006744:	2301      	movs	r3, #1
 8006746:	4652      	mov	r2, sl
 8006748:	4639      	mov	r1, r7
 800674a:	4630      	mov	r0, r6
 800674c:	47c0      	blx	r8
 800674e:	3001      	adds	r0, #1
 8006750:	d103      	bne.n	800675a <_printf_common+0xba>
 8006752:	f04f 30ff 	mov.w	r0, #4294967295
 8006756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800675a:	3501      	adds	r5, #1
 800675c:	e7c3      	b.n	80066e6 <_printf_common+0x46>
 800675e:	18e1      	adds	r1, r4, r3
 8006760:	1c5a      	adds	r2, r3, #1
 8006762:	2030      	movs	r0, #48	; 0x30
 8006764:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006768:	4422      	add	r2, r4
 800676a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800676e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006772:	3302      	adds	r3, #2
 8006774:	e7c5      	b.n	8006702 <_printf_common+0x62>
 8006776:	2301      	movs	r3, #1
 8006778:	4622      	mov	r2, r4
 800677a:	4639      	mov	r1, r7
 800677c:	4630      	mov	r0, r6
 800677e:	47c0      	blx	r8
 8006780:	3001      	adds	r0, #1
 8006782:	d0e6      	beq.n	8006752 <_printf_common+0xb2>
 8006784:	f109 0901 	add.w	r9, r9, #1
 8006788:	e7d8      	b.n	800673c <_printf_common+0x9c>
	...

0800678c <_printf_i>:
 800678c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006790:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006794:	460c      	mov	r4, r1
 8006796:	7e09      	ldrb	r1, [r1, #24]
 8006798:	b085      	sub	sp, #20
 800679a:	296e      	cmp	r1, #110	; 0x6e
 800679c:	4617      	mov	r7, r2
 800679e:	4606      	mov	r6, r0
 80067a0:	4698      	mov	r8, r3
 80067a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80067a4:	f000 80b3 	beq.w	800690e <_printf_i+0x182>
 80067a8:	d822      	bhi.n	80067f0 <_printf_i+0x64>
 80067aa:	2963      	cmp	r1, #99	; 0x63
 80067ac:	d036      	beq.n	800681c <_printf_i+0x90>
 80067ae:	d80a      	bhi.n	80067c6 <_printf_i+0x3a>
 80067b0:	2900      	cmp	r1, #0
 80067b2:	f000 80b9 	beq.w	8006928 <_printf_i+0x19c>
 80067b6:	2958      	cmp	r1, #88	; 0x58
 80067b8:	f000 8083 	beq.w	80068c2 <_printf_i+0x136>
 80067bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067c0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80067c4:	e032      	b.n	800682c <_printf_i+0xa0>
 80067c6:	2964      	cmp	r1, #100	; 0x64
 80067c8:	d001      	beq.n	80067ce <_printf_i+0x42>
 80067ca:	2969      	cmp	r1, #105	; 0x69
 80067cc:	d1f6      	bne.n	80067bc <_printf_i+0x30>
 80067ce:	6820      	ldr	r0, [r4, #0]
 80067d0:	6813      	ldr	r3, [r2, #0]
 80067d2:	0605      	lsls	r5, r0, #24
 80067d4:	f103 0104 	add.w	r1, r3, #4
 80067d8:	d52a      	bpl.n	8006830 <_printf_i+0xa4>
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	6011      	str	r1, [r2, #0]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	da03      	bge.n	80067ea <_printf_i+0x5e>
 80067e2:	222d      	movs	r2, #45	; 0x2d
 80067e4:	425b      	negs	r3, r3
 80067e6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80067ea:	486f      	ldr	r0, [pc, #444]	; (80069a8 <_printf_i+0x21c>)
 80067ec:	220a      	movs	r2, #10
 80067ee:	e039      	b.n	8006864 <_printf_i+0xd8>
 80067f0:	2973      	cmp	r1, #115	; 0x73
 80067f2:	f000 809d 	beq.w	8006930 <_printf_i+0x1a4>
 80067f6:	d808      	bhi.n	800680a <_printf_i+0x7e>
 80067f8:	296f      	cmp	r1, #111	; 0x6f
 80067fa:	d020      	beq.n	800683e <_printf_i+0xb2>
 80067fc:	2970      	cmp	r1, #112	; 0x70
 80067fe:	d1dd      	bne.n	80067bc <_printf_i+0x30>
 8006800:	6823      	ldr	r3, [r4, #0]
 8006802:	f043 0320 	orr.w	r3, r3, #32
 8006806:	6023      	str	r3, [r4, #0]
 8006808:	e003      	b.n	8006812 <_printf_i+0x86>
 800680a:	2975      	cmp	r1, #117	; 0x75
 800680c:	d017      	beq.n	800683e <_printf_i+0xb2>
 800680e:	2978      	cmp	r1, #120	; 0x78
 8006810:	d1d4      	bne.n	80067bc <_printf_i+0x30>
 8006812:	2378      	movs	r3, #120	; 0x78
 8006814:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006818:	4864      	ldr	r0, [pc, #400]	; (80069ac <_printf_i+0x220>)
 800681a:	e055      	b.n	80068c8 <_printf_i+0x13c>
 800681c:	6813      	ldr	r3, [r2, #0]
 800681e:	1d19      	adds	r1, r3, #4
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	6011      	str	r1, [r2, #0]
 8006824:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006828:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800682c:	2301      	movs	r3, #1
 800682e:	e08c      	b.n	800694a <_printf_i+0x1be>
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	6011      	str	r1, [r2, #0]
 8006834:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006838:	bf18      	it	ne
 800683a:	b21b      	sxthne	r3, r3
 800683c:	e7cf      	b.n	80067de <_printf_i+0x52>
 800683e:	6813      	ldr	r3, [r2, #0]
 8006840:	6825      	ldr	r5, [r4, #0]
 8006842:	1d18      	adds	r0, r3, #4
 8006844:	6010      	str	r0, [r2, #0]
 8006846:	0628      	lsls	r0, r5, #24
 8006848:	d501      	bpl.n	800684e <_printf_i+0xc2>
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	e002      	b.n	8006854 <_printf_i+0xc8>
 800684e:	0668      	lsls	r0, r5, #25
 8006850:	d5fb      	bpl.n	800684a <_printf_i+0xbe>
 8006852:	881b      	ldrh	r3, [r3, #0]
 8006854:	4854      	ldr	r0, [pc, #336]	; (80069a8 <_printf_i+0x21c>)
 8006856:	296f      	cmp	r1, #111	; 0x6f
 8006858:	bf14      	ite	ne
 800685a:	220a      	movne	r2, #10
 800685c:	2208      	moveq	r2, #8
 800685e:	2100      	movs	r1, #0
 8006860:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006864:	6865      	ldr	r5, [r4, #4]
 8006866:	60a5      	str	r5, [r4, #8]
 8006868:	2d00      	cmp	r5, #0
 800686a:	f2c0 8095 	blt.w	8006998 <_printf_i+0x20c>
 800686e:	6821      	ldr	r1, [r4, #0]
 8006870:	f021 0104 	bic.w	r1, r1, #4
 8006874:	6021      	str	r1, [r4, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d13d      	bne.n	80068f6 <_printf_i+0x16a>
 800687a:	2d00      	cmp	r5, #0
 800687c:	f040 808e 	bne.w	800699c <_printf_i+0x210>
 8006880:	4665      	mov	r5, ip
 8006882:	2a08      	cmp	r2, #8
 8006884:	d10b      	bne.n	800689e <_printf_i+0x112>
 8006886:	6823      	ldr	r3, [r4, #0]
 8006888:	07db      	lsls	r3, r3, #31
 800688a:	d508      	bpl.n	800689e <_printf_i+0x112>
 800688c:	6923      	ldr	r3, [r4, #16]
 800688e:	6862      	ldr	r2, [r4, #4]
 8006890:	429a      	cmp	r2, r3
 8006892:	bfde      	ittt	le
 8006894:	2330      	movle	r3, #48	; 0x30
 8006896:	f805 3c01 	strble.w	r3, [r5, #-1]
 800689a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800689e:	ebac 0305 	sub.w	r3, ip, r5
 80068a2:	6123      	str	r3, [r4, #16]
 80068a4:	f8cd 8000 	str.w	r8, [sp]
 80068a8:	463b      	mov	r3, r7
 80068aa:	aa03      	add	r2, sp, #12
 80068ac:	4621      	mov	r1, r4
 80068ae:	4630      	mov	r0, r6
 80068b0:	f7ff fef6 	bl	80066a0 <_printf_common>
 80068b4:	3001      	adds	r0, #1
 80068b6:	d14d      	bne.n	8006954 <_printf_i+0x1c8>
 80068b8:	f04f 30ff 	mov.w	r0, #4294967295
 80068bc:	b005      	add	sp, #20
 80068be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80068c2:	4839      	ldr	r0, [pc, #228]	; (80069a8 <_printf_i+0x21c>)
 80068c4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80068c8:	6813      	ldr	r3, [r2, #0]
 80068ca:	6821      	ldr	r1, [r4, #0]
 80068cc:	1d1d      	adds	r5, r3, #4
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	6015      	str	r5, [r2, #0]
 80068d2:	060a      	lsls	r2, r1, #24
 80068d4:	d50b      	bpl.n	80068ee <_printf_i+0x162>
 80068d6:	07ca      	lsls	r2, r1, #31
 80068d8:	bf44      	itt	mi
 80068da:	f041 0120 	orrmi.w	r1, r1, #32
 80068de:	6021      	strmi	r1, [r4, #0]
 80068e0:	b91b      	cbnz	r3, 80068ea <_printf_i+0x15e>
 80068e2:	6822      	ldr	r2, [r4, #0]
 80068e4:	f022 0220 	bic.w	r2, r2, #32
 80068e8:	6022      	str	r2, [r4, #0]
 80068ea:	2210      	movs	r2, #16
 80068ec:	e7b7      	b.n	800685e <_printf_i+0xd2>
 80068ee:	064d      	lsls	r5, r1, #25
 80068f0:	bf48      	it	mi
 80068f2:	b29b      	uxthmi	r3, r3
 80068f4:	e7ef      	b.n	80068d6 <_printf_i+0x14a>
 80068f6:	4665      	mov	r5, ip
 80068f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80068fc:	fb02 3311 	mls	r3, r2, r1, r3
 8006900:	5cc3      	ldrb	r3, [r0, r3]
 8006902:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006906:	460b      	mov	r3, r1
 8006908:	2900      	cmp	r1, #0
 800690a:	d1f5      	bne.n	80068f8 <_printf_i+0x16c>
 800690c:	e7b9      	b.n	8006882 <_printf_i+0xf6>
 800690e:	6813      	ldr	r3, [r2, #0]
 8006910:	6825      	ldr	r5, [r4, #0]
 8006912:	6961      	ldr	r1, [r4, #20]
 8006914:	1d18      	adds	r0, r3, #4
 8006916:	6010      	str	r0, [r2, #0]
 8006918:	0628      	lsls	r0, r5, #24
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	d501      	bpl.n	8006922 <_printf_i+0x196>
 800691e:	6019      	str	r1, [r3, #0]
 8006920:	e002      	b.n	8006928 <_printf_i+0x19c>
 8006922:	066a      	lsls	r2, r5, #25
 8006924:	d5fb      	bpl.n	800691e <_printf_i+0x192>
 8006926:	8019      	strh	r1, [r3, #0]
 8006928:	2300      	movs	r3, #0
 800692a:	6123      	str	r3, [r4, #16]
 800692c:	4665      	mov	r5, ip
 800692e:	e7b9      	b.n	80068a4 <_printf_i+0x118>
 8006930:	6813      	ldr	r3, [r2, #0]
 8006932:	1d19      	adds	r1, r3, #4
 8006934:	6011      	str	r1, [r2, #0]
 8006936:	681d      	ldr	r5, [r3, #0]
 8006938:	6862      	ldr	r2, [r4, #4]
 800693a:	2100      	movs	r1, #0
 800693c:	4628      	mov	r0, r5
 800693e:	f7f9 fc47 	bl	80001d0 <memchr>
 8006942:	b108      	cbz	r0, 8006948 <_printf_i+0x1bc>
 8006944:	1b40      	subs	r0, r0, r5
 8006946:	6060      	str	r0, [r4, #4]
 8006948:	6863      	ldr	r3, [r4, #4]
 800694a:	6123      	str	r3, [r4, #16]
 800694c:	2300      	movs	r3, #0
 800694e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006952:	e7a7      	b.n	80068a4 <_printf_i+0x118>
 8006954:	6923      	ldr	r3, [r4, #16]
 8006956:	462a      	mov	r2, r5
 8006958:	4639      	mov	r1, r7
 800695a:	4630      	mov	r0, r6
 800695c:	47c0      	blx	r8
 800695e:	3001      	adds	r0, #1
 8006960:	d0aa      	beq.n	80068b8 <_printf_i+0x12c>
 8006962:	6823      	ldr	r3, [r4, #0]
 8006964:	079b      	lsls	r3, r3, #30
 8006966:	d413      	bmi.n	8006990 <_printf_i+0x204>
 8006968:	68e0      	ldr	r0, [r4, #12]
 800696a:	9b03      	ldr	r3, [sp, #12]
 800696c:	4298      	cmp	r0, r3
 800696e:	bfb8      	it	lt
 8006970:	4618      	movlt	r0, r3
 8006972:	e7a3      	b.n	80068bc <_printf_i+0x130>
 8006974:	2301      	movs	r3, #1
 8006976:	464a      	mov	r2, r9
 8006978:	4639      	mov	r1, r7
 800697a:	4630      	mov	r0, r6
 800697c:	47c0      	blx	r8
 800697e:	3001      	adds	r0, #1
 8006980:	d09a      	beq.n	80068b8 <_printf_i+0x12c>
 8006982:	3501      	adds	r5, #1
 8006984:	68e3      	ldr	r3, [r4, #12]
 8006986:	9a03      	ldr	r2, [sp, #12]
 8006988:	1a9b      	subs	r3, r3, r2
 800698a:	42ab      	cmp	r3, r5
 800698c:	dcf2      	bgt.n	8006974 <_printf_i+0x1e8>
 800698e:	e7eb      	b.n	8006968 <_printf_i+0x1dc>
 8006990:	2500      	movs	r5, #0
 8006992:	f104 0919 	add.w	r9, r4, #25
 8006996:	e7f5      	b.n	8006984 <_printf_i+0x1f8>
 8006998:	2b00      	cmp	r3, #0
 800699a:	d1ac      	bne.n	80068f6 <_printf_i+0x16a>
 800699c:	7803      	ldrb	r3, [r0, #0]
 800699e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069a2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069a6:	e76c      	b.n	8006882 <_printf_i+0xf6>
 80069a8:	08007dd5 	.word	0x08007dd5
 80069ac:	08007de6 	.word	0x08007de6

080069b0 <memcpy>:
 80069b0:	b510      	push	{r4, lr}
 80069b2:	1e43      	subs	r3, r0, #1
 80069b4:	440a      	add	r2, r1
 80069b6:	4291      	cmp	r1, r2
 80069b8:	d100      	bne.n	80069bc <memcpy+0xc>
 80069ba:	bd10      	pop	{r4, pc}
 80069bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069c4:	e7f7      	b.n	80069b6 <memcpy+0x6>

080069c6 <memmove>:
 80069c6:	4288      	cmp	r0, r1
 80069c8:	b510      	push	{r4, lr}
 80069ca:	eb01 0302 	add.w	r3, r1, r2
 80069ce:	d807      	bhi.n	80069e0 <memmove+0x1a>
 80069d0:	1e42      	subs	r2, r0, #1
 80069d2:	4299      	cmp	r1, r3
 80069d4:	d00a      	beq.n	80069ec <memmove+0x26>
 80069d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069da:	f802 4f01 	strb.w	r4, [r2, #1]!
 80069de:	e7f8      	b.n	80069d2 <memmove+0xc>
 80069e0:	4283      	cmp	r3, r0
 80069e2:	d9f5      	bls.n	80069d0 <memmove+0xa>
 80069e4:	1881      	adds	r1, r0, r2
 80069e6:	1ad2      	subs	r2, r2, r3
 80069e8:	42d3      	cmn	r3, r2
 80069ea:	d100      	bne.n	80069ee <memmove+0x28>
 80069ec:	bd10      	pop	{r4, pc}
 80069ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80069f2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80069f6:	e7f7      	b.n	80069e8 <memmove+0x22>

080069f8 <_free_r>:
 80069f8:	b538      	push	{r3, r4, r5, lr}
 80069fa:	4605      	mov	r5, r0
 80069fc:	2900      	cmp	r1, #0
 80069fe:	d045      	beq.n	8006a8c <_free_r+0x94>
 8006a00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a04:	1f0c      	subs	r4, r1, #4
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	bfb8      	it	lt
 8006a0a:	18e4      	addlt	r4, r4, r3
 8006a0c:	f000 f8d2 	bl	8006bb4 <__malloc_lock>
 8006a10:	4a1f      	ldr	r2, [pc, #124]	; (8006a90 <_free_r+0x98>)
 8006a12:	6813      	ldr	r3, [r2, #0]
 8006a14:	4610      	mov	r0, r2
 8006a16:	b933      	cbnz	r3, 8006a26 <_free_r+0x2e>
 8006a18:	6063      	str	r3, [r4, #4]
 8006a1a:	6014      	str	r4, [r2, #0]
 8006a1c:	4628      	mov	r0, r5
 8006a1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a22:	f000 b8c8 	b.w	8006bb6 <__malloc_unlock>
 8006a26:	42a3      	cmp	r3, r4
 8006a28:	d90c      	bls.n	8006a44 <_free_r+0x4c>
 8006a2a:	6821      	ldr	r1, [r4, #0]
 8006a2c:	1862      	adds	r2, r4, r1
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	bf04      	itt	eq
 8006a32:	681a      	ldreq	r2, [r3, #0]
 8006a34:	685b      	ldreq	r3, [r3, #4]
 8006a36:	6063      	str	r3, [r4, #4]
 8006a38:	bf04      	itt	eq
 8006a3a:	1852      	addeq	r2, r2, r1
 8006a3c:	6022      	streq	r2, [r4, #0]
 8006a3e:	6004      	str	r4, [r0, #0]
 8006a40:	e7ec      	b.n	8006a1c <_free_r+0x24>
 8006a42:	4613      	mov	r3, r2
 8006a44:	685a      	ldr	r2, [r3, #4]
 8006a46:	b10a      	cbz	r2, 8006a4c <_free_r+0x54>
 8006a48:	42a2      	cmp	r2, r4
 8006a4a:	d9fa      	bls.n	8006a42 <_free_r+0x4a>
 8006a4c:	6819      	ldr	r1, [r3, #0]
 8006a4e:	1858      	adds	r0, r3, r1
 8006a50:	42a0      	cmp	r0, r4
 8006a52:	d10b      	bne.n	8006a6c <_free_r+0x74>
 8006a54:	6820      	ldr	r0, [r4, #0]
 8006a56:	4401      	add	r1, r0
 8006a58:	1858      	adds	r0, r3, r1
 8006a5a:	4282      	cmp	r2, r0
 8006a5c:	6019      	str	r1, [r3, #0]
 8006a5e:	d1dd      	bne.n	8006a1c <_free_r+0x24>
 8006a60:	6810      	ldr	r0, [r2, #0]
 8006a62:	6852      	ldr	r2, [r2, #4]
 8006a64:	605a      	str	r2, [r3, #4]
 8006a66:	4401      	add	r1, r0
 8006a68:	6019      	str	r1, [r3, #0]
 8006a6a:	e7d7      	b.n	8006a1c <_free_r+0x24>
 8006a6c:	d902      	bls.n	8006a74 <_free_r+0x7c>
 8006a6e:	230c      	movs	r3, #12
 8006a70:	602b      	str	r3, [r5, #0]
 8006a72:	e7d3      	b.n	8006a1c <_free_r+0x24>
 8006a74:	6820      	ldr	r0, [r4, #0]
 8006a76:	1821      	adds	r1, r4, r0
 8006a78:	428a      	cmp	r2, r1
 8006a7a:	bf04      	itt	eq
 8006a7c:	6811      	ldreq	r1, [r2, #0]
 8006a7e:	6852      	ldreq	r2, [r2, #4]
 8006a80:	6062      	str	r2, [r4, #4]
 8006a82:	bf04      	itt	eq
 8006a84:	1809      	addeq	r1, r1, r0
 8006a86:	6021      	streq	r1, [r4, #0]
 8006a88:	605c      	str	r4, [r3, #4]
 8006a8a:	e7c7      	b.n	8006a1c <_free_r+0x24>
 8006a8c:	bd38      	pop	{r3, r4, r5, pc}
 8006a8e:	bf00      	nop
 8006a90:	200000cc 	.word	0x200000cc

08006a94 <_malloc_r>:
 8006a94:	b570      	push	{r4, r5, r6, lr}
 8006a96:	1ccd      	adds	r5, r1, #3
 8006a98:	f025 0503 	bic.w	r5, r5, #3
 8006a9c:	3508      	adds	r5, #8
 8006a9e:	2d0c      	cmp	r5, #12
 8006aa0:	bf38      	it	cc
 8006aa2:	250c      	movcc	r5, #12
 8006aa4:	2d00      	cmp	r5, #0
 8006aa6:	4606      	mov	r6, r0
 8006aa8:	db01      	blt.n	8006aae <_malloc_r+0x1a>
 8006aaa:	42a9      	cmp	r1, r5
 8006aac:	d903      	bls.n	8006ab6 <_malloc_r+0x22>
 8006aae:	230c      	movs	r3, #12
 8006ab0:	6033      	str	r3, [r6, #0]
 8006ab2:	2000      	movs	r0, #0
 8006ab4:	bd70      	pop	{r4, r5, r6, pc}
 8006ab6:	f000 f87d 	bl	8006bb4 <__malloc_lock>
 8006aba:	4a21      	ldr	r2, [pc, #132]	; (8006b40 <_malloc_r+0xac>)
 8006abc:	6814      	ldr	r4, [r2, #0]
 8006abe:	4621      	mov	r1, r4
 8006ac0:	b991      	cbnz	r1, 8006ae8 <_malloc_r+0x54>
 8006ac2:	4c20      	ldr	r4, [pc, #128]	; (8006b44 <_malloc_r+0xb0>)
 8006ac4:	6823      	ldr	r3, [r4, #0]
 8006ac6:	b91b      	cbnz	r3, 8006ad0 <_malloc_r+0x3c>
 8006ac8:	4630      	mov	r0, r6
 8006aca:	f000 f863 	bl	8006b94 <_sbrk_r>
 8006ace:	6020      	str	r0, [r4, #0]
 8006ad0:	4629      	mov	r1, r5
 8006ad2:	4630      	mov	r0, r6
 8006ad4:	f000 f85e 	bl	8006b94 <_sbrk_r>
 8006ad8:	1c43      	adds	r3, r0, #1
 8006ada:	d124      	bne.n	8006b26 <_malloc_r+0x92>
 8006adc:	230c      	movs	r3, #12
 8006ade:	6033      	str	r3, [r6, #0]
 8006ae0:	4630      	mov	r0, r6
 8006ae2:	f000 f868 	bl	8006bb6 <__malloc_unlock>
 8006ae6:	e7e4      	b.n	8006ab2 <_malloc_r+0x1e>
 8006ae8:	680b      	ldr	r3, [r1, #0]
 8006aea:	1b5b      	subs	r3, r3, r5
 8006aec:	d418      	bmi.n	8006b20 <_malloc_r+0x8c>
 8006aee:	2b0b      	cmp	r3, #11
 8006af0:	d90f      	bls.n	8006b12 <_malloc_r+0x7e>
 8006af2:	600b      	str	r3, [r1, #0]
 8006af4:	50cd      	str	r5, [r1, r3]
 8006af6:	18cc      	adds	r4, r1, r3
 8006af8:	4630      	mov	r0, r6
 8006afa:	f000 f85c 	bl	8006bb6 <__malloc_unlock>
 8006afe:	f104 000b 	add.w	r0, r4, #11
 8006b02:	1d23      	adds	r3, r4, #4
 8006b04:	f020 0007 	bic.w	r0, r0, #7
 8006b08:	1ac3      	subs	r3, r0, r3
 8006b0a:	d0d3      	beq.n	8006ab4 <_malloc_r+0x20>
 8006b0c:	425a      	negs	r2, r3
 8006b0e:	50e2      	str	r2, [r4, r3]
 8006b10:	e7d0      	b.n	8006ab4 <_malloc_r+0x20>
 8006b12:	428c      	cmp	r4, r1
 8006b14:	684b      	ldr	r3, [r1, #4]
 8006b16:	bf16      	itet	ne
 8006b18:	6063      	strne	r3, [r4, #4]
 8006b1a:	6013      	streq	r3, [r2, #0]
 8006b1c:	460c      	movne	r4, r1
 8006b1e:	e7eb      	b.n	8006af8 <_malloc_r+0x64>
 8006b20:	460c      	mov	r4, r1
 8006b22:	6849      	ldr	r1, [r1, #4]
 8006b24:	e7cc      	b.n	8006ac0 <_malloc_r+0x2c>
 8006b26:	1cc4      	adds	r4, r0, #3
 8006b28:	f024 0403 	bic.w	r4, r4, #3
 8006b2c:	42a0      	cmp	r0, r4
 8006b2e:	d005      	beq.n	8006b3c <_malloc_r+0xa8>
 8006b30:	1a21      	subs	r1, r4, r0
 8006b32:	4630      	mov	r0, r6
 8006b34:	f000 f82e 	bl	8006b94 <_sbrk_r>
 8006b38:	3001      	adds	r0, #1
 8006b3a:	d0cf      	beq.n	8006adc <_malloc_r+0x48>
 8006b3c:	6025      	str	r5, [r4, #0]
 8006b3e:	e7db      	b.n	8006af8 <_malloc_r+0x64>
 8006b40:	200000cc 	.word	0x200000cc
 8006b44:	200000d0 	.word	0x200000d0

08006b48 <_realloc_r>:
 8006b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b4a:	4607      	mov	r7, r0
 8006b4c:	4614      	mov	r4, r2
 8006b4e:	460e      	mov	r6, r1
 8006b50:	b921      	cbnz	r1, 8006b5c <_realloc_r+0x14>
 8006b52:	4611      	mov	r1, r2
 8006b54:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006b58:	f7ff bf9c 	b.w	8006a94 <_malloc_r>
 8006b5c:	b922      	cbnz	r2, 8006b68 <_realloc_r+0x20>
 8006b5e:	f7ff ff4b 	bl	80069f8 <_free_r>
 8006b62:	4625      	mov	r5, r4
 8006b64:	4628      	mov	r0, r5
 8006b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b68:	f000 f826 	bl	8006bb8 <_malloc_usable_size_r>
 8006b6c:	42a0      	cmp	r0, r4
 8006b6e:	d20f      	bcs.n	8006b90 <_realloc_r+0x48>
 8006b70:	4621      	mov	r1, r4
 8006b72:	4638      	mov	r0, r7
 8006b74:	f7ff ff8e 	bl	8006a94 <_malloc_r>
 8006b78:	4605      	mov	r5, r0
 8006b7a:	2800      	cmp	r0, #0
 8006b7c:	d0f2      	beq.n	8006b64 <_realloc_r+0x1c>
 8006b7e:	4631      	mov	r1, r6
 8006b80:	4622      	mov	r2, r4
 8006b82:	f7ff ff15 	bl	80069b0 <memcpy>
 8006b86:	4631      	mov	r1, r6
 8006b88:	4638      	mov	r0, r7
 8006b8a:	f7ff ff35 	bl	80069f8 <_free_r>
 8006b8e:	e7e9      	b.n	8006b64 <_realloc_r+0x1c>
 8006b90:	4635      	mov	r5, r6
 8006b92:	e7e7      	b.n	8006b64 <_realloc_r+0x1c>

08006b94 <_sbrk_r>:
 8006b94:	b538      	push	{r3, r4, r5, lr}
 8006b96:	4c06      	ldr	r4, [pc, #24]	; (8006bb0 <_sbrk_r+0x1c>)
 8006b98:	2300      	movs	r3, #0
 8006b9a:	4605      	mov	r5, r0
 8006b9c:	4608      	mov	r0, r1
 8006b9e:	6023      	str	r3, [r4, #0]
 8006ba0:	f7ff fb44 	bl	800622c <_sbrk>
 8006ba4:	1c43      	adds	r3, r0, #1
 8006ba6:	d102      	bne.n	8006bae <_sbrk_r+0x1a>
 8006ba8:	6823      	ldr	r3, [r4, #0]
 8006baa:	b103      	cbz	r3, 8006bae <_sbrk_r+0x1a>
 8006bac:	602b      	str	r3, [r5, #0]
 8006bae:	bd38      	pop	{r3, r4, r5, pc}
 8006bb0:	2000035c 	.word	0x2000035c

08006bb4 <__malloc_lock>:
 8006bb4:	4770      	bx	lr

08006bb6 <__malloc_unlock>:
 8006bb6:	4770      	bx	lr

08006bb8 <_malloc_usable_size_r>:
 8006bb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bbc:	1f18      	subs	r0, r3, #4
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	bfbc      	itt	lt
 8006bc2:	580b      	ldrlt	r3, [r1, r0]
 8006bc4:	18c0      	addlt	r0, r0, r3
 8006bc6:	4770      	bx	lr

08006bc8 <pow>:
 8006bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bcc:	ed2d 8b04 	vpush	{d8-d9}
 8006bd0:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8006ea4 <pow+0x2dc>
 8006bd4:	b08d      	sub	sp, #52	; 0x34
 8006bd6:	ec57 6b10 	vmov	r6, r7, d0
 8006bda:	ec55 4b11 	vmov	r4, r5, d1
 8006bde:	f000 f9bf 	bl	8006f60 <__ieee754_pow>
 8006be2:	f999 3000 	ldrsb.w	r3, [r9]
 8006be6:	9300      	str	r3, [sp, #0]
 8006be8:	3301      	adds	r3, #1
 8006bea:	eeb0 8a40 	vmov.f32	s16, s0
 8006bee:	eef0 8a60 	vmov.f32	s17, s1
 8006bf2:	46c8      	mov	r8, r9
 8006bf4:	d05f      	beq.n	8006cb6 <pow+0xee>
 8006bf6:	4622      	mov	r2, r4
 8006bf8:	462b      	mov	r3, r5
 8006bfa:	4620      	mov	r0, r4
 8006bfc:	4629      	mov	r1, r5
 8006bfe:	f7f9 ff8d 	bl	8000b1c <__aeabi_dcmpun>
 8006c02:	4683      	mov	fp, r0
 8006c04:	2800      	cmp	r0, #0
 8006c06:	d156      	bne.n	8006cb6 <pow+0xee>
 8006c08:	4632      	mov	r2, r6
 8006c0a:	463b      	mov	r3, r7
 8006c0c:	4630      	mov	r0, r6
 8006c0e:	4639      	mov	r1, r7
 8006c10:	f7f9 ff84 	bl	8000b1c <__aeabi_dcmpun>
 8006c14:	9001      	str	r0, [sp, #4]
 8006c16:	b1e8      	cbz	r0, 8006c54 <pow+0x8c>
 8006c18:	2200      	movs	r2, #0
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	4620      	mov	r0, r4
 8006c1e:	4629      	mov	r1, r5
 8006c20:	f7f9 ff4a 	bl	8000ab8 <__aeabi_dcmpeq>
 8006c24:	2800      	cmp	r0, #0
 8006c26:	d046      	beq.n	8006cb6 <pow+0xee>
 8006c28:	2301      	movs	r3, #1
 8006c2a:	9302      	str	r3, [sp, #8]
 8006c2c:	4b96      	ldr	r3, [pc, #600]	; (8006e88 <pow+0x2c0>)
 8006c2e:	9303      	str	r3, [sp, #12]
 8006c30:	4b96      	ldr	r3, [pc, #600]	; (8006e8c <pow+0x2c4>)
 8006c32:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8006c36:	2200      	movs	r2, #0
 8006c38:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006c3c:	9b00      	ldr	r3, [sp, #0]
 8006c3e:	2b02      	cmp	r3, #2
 8006c40:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006c44:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006c48:	d033      	beq.n	8006cb2 <pow+0xea>
 8006c4a:	a802      	add	r0, sp, #8
 8006c4c:	f000 ff57 	bl	8007afe <matherr>
 8006c50:	bb48      	cbnz	r0, 8006ca6 <pow+0xde>
 8006c52:	e05d      	b.n	8006d10 <pow+0x148>
 8006c54:	f04f 0a00 	mov.w	sl, #0
 8006c58:	f04f 0b00 	mov.w	fp, #0
 8006c5c:	4652      	mov	r2, sl
 8006c5e:	465b      	mov	r3, fp
 8006c60:	4630      	mov	r0, r6
 8006c62:	4639      	mov	r1, r7
 8006c64:	f7f9 ff28 	bl	8000ab8 <__aeabi_dcmpeq>
 8006c68:	ec4b ab19 	vmov	d9, sl, fp
 8006c6c:	2800      	cmp	r0, #0
 8006c6e:	d054      	beq.n	8006d1a <pow+0x152>
 8006c70:	4652      	mov	r2, sl
 8006c72:	465b      	mov	r3, fp
 8006c74:	4620      	mov	r0, r4
 8006c76:	4629      	mov	r1, r5
 8006c78:	f7f9 ff1e 	bl	8000ab8 <__aeabi_dcmpeq>
 8006c7c:	4680      	mov	r8, r0
 8006c7e:	b318      	cbz	r0, 8006cc8 <pow+0x100>
 8006c80:	2301      	movs	r3, #1
 8006c82:	9302      	str	r3, [sp, #8]
 8006c84:	4b80      	ldr	r3, [pc, #512]	; (8006e88 <pow+0x2c0>)
 8006c86:	9303      	str	r3, [sp, #12]
 8006c88:	9b01      	ldr	r3, [sp, #4]
 8006c8a:	930a      	str	r3, [sp, #40]	; 0x28
 8006c8c:	9b00      	ldr	r3, [sp, #0]
 8006c8e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006c92:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006c96:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d0d5      	beq.n	8006c4a <pow+0x82>
 8006c9e:	4b7b      	ldr	r3, [pc, #492]	; (8006e8c <pow+0x2c4>)
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006ca6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ca8:	b11b      	cbz	r3, 8006cb2 <pow+0xea>
 8006caa:	f7ff fb55 	bl	8006358 <__errno>
 8006cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cb0:	6003      	str	r3, [r0, #0]
 8006cb2:	ed9d 8b08 	vldr	d8, [sp, #32]
 8006cb6:	eeb0 0a48 	vmov.f32	s0, s16
 8006cba:	eef0 0a68 	vmov.f32	s1, s17
 8006cbe:	b00d      	add	sp, #52	; 0x34
 8006cc0:	ecbd 8b04 	vpop	{d8-d9}
 8006cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cc8:	ec45 4b10 	vmov	d0, r4, r5
 8006ccc:	f000 ff0f 	bl	8007aee <finite>
 8006cd0:	2800      	cmp	r0, #0
 8006cd2:	d0f0      	beq.n	8006cb6 <pow+0xee>
 8006cd4:	4652      	mov	r2, sl
 8006cd6:	465b      	mov	r3, fp
 8006cd8:	4620      	mov	r0, r4
 8006cda:	4629      	mov	r1, r5
 8006cdc:	f7f9 fef6 	bl	8000acc <__aeabi_dcmplt>
 8006ce0:	2800      	cmp	r0, #0
 8006ce2:	d0e8      	beq.n	8006cb6 <pow+0xee>
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	9302      	str	r3, [sp, #8]
 8006ce8:	4b67      	ldr	r3, [pc, #412]	; (8006e88 <pow+0x2c0>)
 8006cea:	9303      	str	r3, [sp, #12]
 8006cec:	f999 3000 	ldrsb.w	r3, [r9]
 8006cf0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8006cf4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006cf8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006cfc:	b913      	cbnz	r3, 8006d04 <pow+0x13c>
 8006cfe:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8006d02:	e7a2      	b.n	8006c4a <pow+0x82>
 8006d04:	4962      	ldr	r1, [pc, #392]	; (8006e90 <pow+0x2c8>)
 8006d06:	2000      	movs	r0, #0
 8006d08:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006d0c:	2b02      	cmp	r3, #2
 8006d0e:	d19c      	bne.n	8006c4a <pow+0x82>
 8006d10:	f7ff fb22 	bl	8006358 <__errno>
 8006d14:	2321      	movs	r3, #33	; 0x21
 8006d16:	6003      	str	r3, [r0, #0]
 8006d18:	e7c5      	b.n	8006ca6 <pow+0xde>
 8006d1a:	eeb0 0a48 	vmov.f32	s0, s16
 8006d1e:	eef0 0a68 	vmov.f32	s1, s17
 8006d22:	f000 fee4 	bl	8007aee <finite>
 8006d26:	9000      	str	r0, [sp, #0]
 8006d28:	2800      	cmp	r0, #0
 8006d2a:	f040 8081 	bne.w	8006e30 <pow+0x268>
 8006d2e:	ec47 6b10 	vmov	d0, r6, r7
 8006d32:	f000 fedc 	bl	8007aee <finite>
 8006d36:	2800      	cmp	r0, #0
 8006d38:	d07a      	beq.n	8006e30 <pow+0x268>
 8006d3a:	ec45 4b10 	vmov	d0, r4, r5
 8006d3e:	f000 fed6 	bl	8007aee <finite>
 8006d42:	2800      	cmp	r0, #0
 8006d44:	d074      	beq.n	8006e30 <pow+0x268>
 8006d46:	ec53 2b18 	vmov	r2, r3, d8
 8006d4a:	ee18 0a10 	vmov	r0, s16
 8006d4e:	4619      	mov	r1, r3
 8006d50:	f7f9 fee4 	bl	8000b1c <__aeabi_dcmpun>
 8006d54:	f999 9000 	ldrsb.w	r9, [r9]
 8006d58:	4b4b      	ldr	r3, [pc, #300]	; (8006e88 <pow+0x2c0>)
 8006d5a:	b1b0      	cbz	r0, 8006d8a <pow+0x1c2>
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006d62:	9b00      	ldr	r3, [sp, #0]
 8006d64:	930a      	str	r3, [sp, #40]	; 0x28
 8006d66:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006d6a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006d6e:	f1b9 0f00 	cmp.w	r9, #0
 8006d72:	d0c4      	beq.n	8006cfe <pow+0x136>
 8006d74:	4652      	mov	r2, sl
 8006d76:	465b      	mov	r3, fp
 8006d78:	4650      	mov	r0, sl
 8006d7a:	4659      	mov	r1, fp
 8006d7c:	f7f9 fd5e 	bl	800083c <__aeabi_ddiv>
 8006d80:	f1b9 0f02 	cmp.w	r9, #2
 8006d84:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006d88:	e7c1      	b.n	8006d0e <pow+0x146>
 8006d8a:	2203      	movs	r2, #3
 8006d8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006d90:	900a      	str	r0, [sp, #40]	; 0x28
 8006d92:	4629      	mov	r1, r5
 8006d94:	4620      	mov	r0, r4
 8006d96:	2200      	movs	r2, #0
 8006d98:	4b3e      	ldr	r3, [pc, #248]	; (8006e94 <pow+0x2cc>)
 8006d9a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006d9e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006da2:	f7f9 fc21 	bl	80005e8 <__aeabi_dmul>
 8006da6:	4604      	mov	r4, r0
 8006da8:	460d      	mov	r5, r1
 8006daa:	f1b9 0f00 	cmp.w	r9, #0
 8006dae:	d124      	bne.n	8006dfa <pow+0x232>
 8006db0:	4b39      	ldr	r3, [pc, #228]	; (8006e98 <pow+0x2d0>)
 8006db2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006db6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006dba:	4630      	mov	r0, r6
 8006dbc:	4652      	mov	r2, sl
 8006dbe:	465b      	mov	r3, fp
 8006dc0:	4639      	mov	r1, r7
 8006dc2:	f7f9 fe83 	bl	8000acc <__aeabi_dcmplt>
 8006dc6:	2800      	cmp	r0, #0
 8006dc8:	d056      	beq.n	8006e78 <pow+0x2b0>
 8006dca:	ec45 4b10 	vmov	d0, r4, r5
 8006dce:	f000 fea3 	bl	8007b18 <rint>
 8006dd2:	4622      	mov	r2, r4
 8006dd4:	462b      	mov	r3, r5
 8006dd6:	ec51 0b10 	vmov	r0, r1, d0
 8006dda:	f7f9 fe6d 	bl	8000ab8 <__aeabi_dcmpeq>
 8006dde:	b920      	cbnz	r0, 8006dea <pow+0x222>
 8006de0:	4b2e      	ldr	r3, [pc, #184]	; (8006e9c <pow+0x2d4>)
 8006de2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006de6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006dea:	f998 3000 	ldrsb.w	r3, [r8]
 8006dee:	2b02      	cmp	r3, #2
 8006df0:	d142      	bne.n	8006e78 <pow+0x2b0>
 8006df2:	f7ff fab1 	bl	8006358 <__errno>
 8006df6:	2322      	movs	r3, #34	; 0x22
 8006df8:	e78d      	b.n	8006d16 <pow+0x14e>
 8006dfa:	4b29      	ldr	r3, [pc, #164]	; (8006ea0 <pow+0x2d8>)
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006e02:	4630      	mov	r0, r6
 8006e04:	4652      	mov	r2, sl
 8006e06:	465b      	mov	r3, fp
 8006e08:	4639      	mov	r1, r7
 8006e0a:	f7f9 fe5f 	bl	8000acc <__aeabi_dcmplt>
 8006e0e:	2800      	cmp	r0, #0
 8006e10:	d0eb      	beq.n	8006dea <pow+0x222>
 8006e12:	ec45 4b10 	vmov	d0, r4, r5
 8006e16:	f000 fe7f 	bl	8007b18 <rint>
 8006e1a:	4622      	mov	r2, r4
 8006e1c:	462b      	mov	r3, r5
 8006e1e:	ec51 0b10 	vmov	r0, r1, d0
 8006e22:	f7f9 fe49 	bl	8000ab8 <__aeabi_dcmpeq>
 8006e26:	2800      	cmp	r0, #0
 8006e28:	d1df      	bne.n	8006dea <pow+0x222>
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	4b18      	ldr	r3, [pc, #96]	; (8006e90 <pow+0x2c8>)
 8006e2e:	e7da      	b.n	8006de6 <pow+0x21e>
 8006e30:	2200      	movs	r2, #0
 8006e32:	2300      	movs	r3, #0
 8006e34:	ec51 0b18 	vmov	r0, r1, d8
 8006e38:	f7f9 fe3e 	bl	8000ab8 <__aeabi_dcmpeq>
 8006e3c:	2800      	cmp	r0, #0
 8006e3e:	f43f af3a 	beq.w	8006cb6 <pow+0xee>
 8006e42:	ec47 6b10 	vmov	d0, r6, r7
 8006e46:	f000 fe52 	bl	8007aee <finite>
 8006e4a:	2800      	cmp	r0, #0
 8006e4c:	f43f af33 	beq.w	8006cb6 <pow+0xee>
 8006e50:	ec45 4b10 	vmov	d0, r4, r5
 8006e54:	f000 fe4b 	bl	8007aee <finite>
 8006e58:	2800      	cmp	r0, #0
 8006e5a:	f43f af2c 	beq.w	8006cb6 <pow+0xee>
 8006e5e:	2304      	movs	r3, #4
 8006e60:	9302      	str	r3, [sp, #8]
 8006e62:	4b09      	ldr	r3, [pc, #36]	; (8006e88 <pow+0x2c0>)
 8006e64:	9303      	str	r3, [sp, #12]
 8006e66:	2300      	movs	r3, #0
 8006e68:	930a      	str	r3, [sp, #40]	; 0x28
 8006e6a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006e6e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006e72:	ed8d 9b08 	vstr	d9, [sp, #32]
 8006e76:	e7b8      	b.n	8006dea <pow+0x222>
 8006e78:	a802      	add	r0, sp, #8
 8006e7a:	f000 fe40 	bl	8007afe <matherr>
 8006e7e:	2800      	cmp	r0, #0
 8006e80:	f47f af11 	bne.w	8006ca6 <pow+0xde>
 8006e84:	e7b5      	b.n	8006df2 <pow+0x22a>
 8006e86:	bf00      	nop
 8006e88:	08007df7 	.word	0x08007df7
 8006e8c:	3ff00000 	.word	0x3ff00000
 8006e90:	fff00000 	.word	0xfff00000
 8006e94:	3fe00000 	.word	0x3fe00000
 8006e98:	47efffff 	.word	0x47efffff
 8006e9c:	c7efffff 	.word	0xc7efffff
 8006ea0:	7ff00000 	.word	0x7ff00000
 8006ea4:	200000a4 	.word	0x200000a4

08006ea8 <sqrt>:
 8006ea8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006eac:	ed2d 8b02 	vpush	{d8}
 8006eb0:	b08b      	sub	sp, #44	; 0x2c
 8006eb2:	ec55 4b10 	vmov	r4, r5, d0
 8006eb6:	f000 fd61 	bl	800797c <__ieee754_sqrt>
 8006eba:	4b26      	ldr	r3, [pc, #152]	; (8006f54 <sqrt+0xac>)
 8006ebc:	eeb0 8a40 	vmov.f32	s16, s0
 8006ec0:	eef0 8a60 	vmov.f32	s17, s1
 8006ec4:	f993 6000 	ldrsb.w	r6, [r3]
 8006ec8:	1c73      	adds	r3, r6, #1
 8006eca:	d02a      	beq.n	8006f22 <sqrt+0x7a>
 8006ecc:	4622      	mov	r2, r4
 8006ece:	462b      	mov	r3, r5
 8006ed0:	4620      	mov	r0, r4
 8006ed2:	4629      	mov	r1, r5
 8006ed4:	f7f9 fe22 	bl	8000b1c <__aeabi_dcmpun>
 8006ed8:	4607      	mov	r7, r0
 8006eda:	bb10      	cbnz	r0, 8006f22 <sqrt+0x7a>
 8006edc:	f04f 0800 	mov.w	r8, #0
 8006ee0:	f04f 0900 	mov.w	r9, #0
 8006ee4:	4642      	mov	r2, r8
 8006ee6:	464b      	mov	r3, r9
 8006ee8:	4620      	mov	r0, r4
 8006eea:	4629      	mov	r1, r5
 8006eec:	f7f9 fdee 	bl	8000acc <__aeabi_dcmplt>
 8006ef0:	b1b8      	cbz	r0, 8006f22 <sqrt+0x7a>
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	9300      	str	r3, [sp, #0]
 8006ef6:	4b18      	ldr	r3, [pc, #96]	; (8006f58 <sqrt+0xb0>)
 8006ef8:	9301      	str	r3, [sp, #4]
 8006efa:	9708      	str	r7, [sp, #32]
 8006efc:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8006f00:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006f04:	b9b6      	cbnz	r6, 8006f34 <sqrt+0x8c>
 8006f06:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006f0a:	4668      	mov	r0, sp
 8006f0c:	f000 fdf7 	bl	8007afe <matherr>
 8006f10:	b1d0      	cbz	r0, 8006f48 <sqrt+0xa0>
 8006f12:	9b08      	ldr	r3, [sp, #32]
 8006f14:	b11b      	cbz	r3, 8006f1e <sqrt+0x76>
 8006f16:	f7ff fa1f 	bl	8006358 <__errno>
 8006f1a:	9b08      	ldr	r3, [sp, #32]
 8006f1c:	6003      	str	r3, [r0, #0]
 8006f1e:	ed9d 8b06 	vldr	d8, [sp, #24]
 8006f22:	eeb0 0a48 	vmov.f32	s0, s16
 8006f26:	eef0 0a68 	vmov.f32	s1, s17
 8006f2a:	b00b      	add	sp, #44	; 0x2c
 8006f2c:	ecbd 8b02 	vpop	{d8}
 8006f30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f34:	4642      	mov	r2, r8
 8006f36:	464b      	mov	r3, r9
 8006f38:	4640      	mov	r0, r8
 8006f3a:	4649      	mov	r1, r9
 8006f3c:	f7f9 fc7e 	bl	800083c <__aeabi_ddiv>
 8006f40:	2e02      	cmp	r6, #2
 8006f42:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006f46:	d1e0      	bne.n	8006f0a <sqrt+0x62>
 8006f48:	f7ff fa06 	bl	8006358 <__errno>
 8006f4c:	2321      	movs	r3, #33	; 0x21
 8006f4e:	6003      	str	r3, [r0, #0]
 8006f50:	e7df      	b.n	8006f12 <sqrt+0x6a>
 8006f52:	bf00      	nop
 8006f54:	200000a4 	.word	0x200000a4
 8006f58:	08007dfb 	.word	0x08007dfb
 8006f5c:	00000000 	.word	0x00000000

08006f60 <__ieee754_pow>:
 8006f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f64:	b091      	sub	sp, #68	; 0x44
 8006f66:	ed8d 1b00 	vstr	d1, [sp]
 8006f6a:	e9dd 2900 	ldrd	r2, r9, [sp]
 8006f6e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8006f72:	ea58 0302 	orrs.w	r3, r8, r2
 8006f76:	ec57 6b10 	vmov	r6, r7, d0
 8006f7a:	f000 84be 	beq.w	80078fa <__ieee754_pow+0x99a>
 8006f7e:	4b7a      	ldr	r3, [pc, #488]	; (8007168 <__ieee754_pow+0x208>)
 8006f80:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8006f84:	429c      	cmp	r4, r3
 8006f86:	463d      	mov	r5, r7
 8006f88:	ee10 aa10 	vmov	sl, s0
 8006f8c:	dc09      	bgt.n	8006fa2 <__ieee754_pow+0x42>
 8006f8e:	d103      	bne.n	8006f98 <__ieee754_pow+0x38>
 8006f90:	b93e      	cbnz	r6, 8006fa2 <__ieee754_pow+0x42>
 8006f92:	45a0      	cmp	r8, r4
 8006f94:	dc0d      	bgt.n	8006fb2 <__ieee754_pow+0x52>
 8006f96:	e001      	b.n	8006f9c <__ieee754_pow+0x3c>
 8006f98:	4598      	cmp	r8, r3
 8006f9a:	dc02      	bgt.n	8006fa2 <__ieee754_pow+0x42>
 8006f9c:	4598      	cmp	r8, r3
 8006f9e:	d10e      	bne.n	8006fbe <__ieee754_pow+0x5e>
 8006fa0:	b16a      	cbz	r2, 8006fbe <__ieee754_pow+0x5e>
 8006fa2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006fa6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006faa:	ea54 030a 	orrs.w	r3, r4, sl
 8006fae:	f000 84a4 	beq.w	80078fa <__ieee754_pow+0x99a>
 8006fb2:	486e      	ldr	r0, [pc, #440]	; (800716c <__ieee754_pow+0x20c>)
 8006fb4:	b011      	add	sp, #68	; 0x44
 8006fb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fba:	f000 bda5 	b.w	8007b08 <nan>
 8006fbe:	2d00      	cmp	r5, #0
 8006fc0:	da53      	bge.n	800706a <__ieee754_pow+0x10a>
 8006fc2:	4b6b      	ldr	r3, [pc, #428]	; (8007170 <__ieee754_pow+0x210>)
 8006fc4:	4598      	cmp	r8, r3
 8006fc6:	dc4d      	bgt.n	8007064 <__ieee754_pow+0x104>
 8006fc8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006fcc:	4598      	cmp	r8, r3
 8006fce:	dd4c      	ble.n	800706a <__ieee754_pow+0x10a>
 8006fd0:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006fd4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006fd8:	2b14      	cmp	r3, #20
 8006fda:	dd26      	ble.n	800702a <__ieee754_pow+0xca>
 8006fdc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006fe0:	fa22 f103 	lsr.w	r1, r2, r3
 8006fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d13e      	bne.n	800706a <__ieee754_pow+0x10a>
 8006fec:	f001 0101 	and.w	r1, r1, #1
 8006ff0:	f1c1 0b02 	rsb	fp, r1, #2
 8006ff4:	2a00      	cmp	r2, #0
 8006ff6:	d15b      	bne.n	80070b0 <__ieee754_pow+0x150>
 8006ff8:	4b5b      	ldr	r3, [pc, #364]	; (8007168 <__ieee754_pow+0x208>)
 8006ffa:	4598      	cmp	r8, r3
 8006ffc:	d124      	bne.n	8007048 <__ieee754_pow+0xe8>
 8006ffe:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007002:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007006:	ea53 030a 	orrs.w	r3, r3, sl
 800700a:	f000 8476 	beq.w	80078fa <__ieee754_pow+0x99a>
 800700e:	4b59      	ldr	r3, [pc, #356]	; (8007174 <__ieee754_pow+0x214>)
 8007010:	429c      	cmp	r4, r3
 8007012:	dd2d      	ble.n	8007070 <__ieee754_pow+0x110>
 8007014:	f1b9 0f00 	cmp.w	r9, #0
 8007018:	f280 8473 	bge.w	8007902 <__ieee754_pow+0x9a2>
 800701c:	2000      	movs	r0, #0
 800701e:	2100      	movs	r1, #0
 8007020:	ec41 0b10 	vmov	d0, r0, r1
 8007024:	b011      	add	sp, #68	; 0x44
 8007026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800702a:	2a00      	cmp	r2, #0
 800702c:	d13e      	bne.n	80070ac <__ieee754_pow+0x14c>
 800702e:	f1c3 0314 	rsb	r3, r3, #20
 8007032:	fa48 f103 	asr.w	r1, r8, r3
 8007036:	fa01 f303 	lsl.w	r3, r1, r3
 800703a:	4543      	cmp	r3, r8
 800703c:	f040 8469 	bne.w	8007912 <__ieee754_pow+0x9b2>
 8007040:	f001 0101 	and.w	r1, r1, #1
 8007044:	f1c1 0b02 	rsb	fp, r1, #2
 8007048:	4b4b      	ldr	r3, [pc, #300]	; (8007178 <__ieee754_pow+0x218>)
 800704a:	4598      	cmp	r8, r3
 800704c:	d118      	bne.n	8007080 <__ieee754_pow+0x120>
 800704e:	f1b9 0f00 	cmp.w	r9, #0
 8007052:	f280 845a 	bge.w	800790a <__ieee754_pow+0x9aa>
 8007056:	4948      	ldr	r1, [pc, #288]	; (8007178 <__ieee754_pow+0x218>)
 8007058:	4632      	mov	r2, r6
 800705a:	463b      	mov	r3, r7
 800705c:	2000      	movs	r0, #0
 800705e:	f7f9 fbed 	bl	800083c <__aeabi_ddiv>
 8007062:	e7dd      	b.n	8007020 <__ieee754_pow+0xc0>
 8007064:	f04f 0b02 	mov.w	fp, #2
 8007068:	e7c4      	b.n	8006ff4 <__ieee754_pow+0x94>
 800706a:	f04f 0b00 	mov.w	fp, #0
 800706e:	e7c1      	b.n	8006ff4 <__ieee754_pow+0x94>
 8007070:	f1b9 0f00 	cmp.w	r9, #0
 8007074:	dad2      	bge.n	800701c <__ieee754_pow+0xbc>
 8007076:	e9dd 0300 	ldrd	r0, r3, [sp]
 800707a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800707e:	e7cf      	b.n	8007020 <__ieee754_pow+0xc0>
 8007080:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8007084:	d106      	bne.n	8007094 <__ieee754_pow+0x134>
 8007086:	4632      	mov	r2, r6
 8007088:	463b      	mov	r3, r7
 800708a:	4610      	mov	r0, r2
 800708c:	4619      	mov	r1, r3
 800708e:	f7f9 faab 	bl	80005e8 <__aeabi_dmul>
 8007092:	e7c5      	b.n	8007020 <__ieee754_pow+0xc0>
 8007094:	4b39      	ldr	r3, [pc, #228]	; (800717c <__ieee754_pow+0x21c>)
 8007096:	4599      	cmp	r9, r3
 8007098:	d10a      	bne.n	80070b0 <__ieee754_pow+0x150>
 800709a:	2d00      	cmp	r5, #0
 800709c:	db08      	blt.n	80070b0 <__ieee754_pow+0x150>
 800709e:	ec47 6b10 	vmov	d0, r6, r7
 80070a2:	b011      	add	sp, #68	; 0x44
 80070a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070a8:	f000 bc68 	b.w	800797c <__ieee754_sqrt>
 80070ac:	f04f 0b00 	mov.w	fp, #0
 80070b0:	ec47 6b10 	vmov	d0, r6, r7
 80070b4:	f000 fd12 	bl	8007adc <fabs>
 80070b8:	ec51 0b10 	vmov	r0, r1, d0
 80070bc:	f1ba 0f00 	cmp.w	sl, #0
 80070c0:	d127      	bne.n	8007112 <__ieee754_pow+0x1b2>
 80070c2:	b124      	cbz	r4, 80070ce <__ieee754_pow+0x16e>
 80070c4:	4b2c      	ldr	r3, [pc, #176]	; (8007178 <__ieee754_pow+0x218>)
 80070c6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d121      	bne.n	8007112 <__ieee754_pow+0x1b2>
 80070ce:	f1b9 0f00 	cmp.w	r9, #0
 80070d2:	da05      	bge.n	80070e0 <__ieee754_pow+0x180>
 80070d4:	4602      	mov	r2, r0
 80070d6:	460b      	mov	r3, r1
 80070d8:	2000      	movs	r0, #0
 80070da:	4927      	ldr	r1, [pc, #156]	; (8007178 <__ieee754_pow+0x218>)
 80070dc:	f7f9 fbae 	bl	800083c <__aeabi_ddiv>
 80070e0:	2d00      	cmp	r5, #0
 80070e2:	da9d      	bge.n	8007020 <__ieee754_pow+0xc0>
 80070e4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80070e8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80070ec:	ea54 030b 	orrs.w	r3, r4, fp
 80070f0:	d108      	bne.n	8007104 <__ieee754_pow+0x1a4>
 80070f2:	4602      	mov	r2, r0
 80070f4:	460b      	mov	r3, r1
 80070f6:	4610      	mov	r0, r2
 80070f8:	4619      	mov	r1, r3
 80070fa:	f7f9 f8bd 	bl	8000278 <__aeabi_dsub>
 80070fe:	4602      	mov	r2, r0
 8007100:	460b      	mov	r3, r1
 8007102:	e7ac      	b.n	800705e <__ieee754_pow+0xfe>
 8007104:	f1bb 0f01 	cmp.w	fp, #1
 8007108:	d18a      	bne.n	8007020 <__ieee754_pow+0xc0>
 800710a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800710e:	4619      	mov	r1, r3
 8007110:	e786      	b.n	8007020 <__ieee754_pow+0xc0>
 8007112:	0fed      	lsrs	r5, r5, #31
 8007114:	1e6b      	subs	r3, r5, #1
 8007116:	930d      	str	r3, [sp, #52]	; 0x34
 8007118:	ea5b 0303 	orrs.w	r3, fp, r3
 800711c:	d102      	bne.n	8007124 <__ieee754_pow+0x1c4>
 800711e:	4632      	mov	r2, r6
 8007120:	463b      	mov	r3, r7
 8007122:	e7e8      	b.n	80070f6 <__ieee754_pow+0x196>
 8007124:	4b16      	ldr	r3, [pc, #88]	; (8007180 <__ieee754_pow+0x220>)
 8007126:	4598      	cmp	r8, r3
 8007128:	f340 80fe 	ble.w	8007328 <__ieee754_pow+0x3c8>
 800712c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007130:	4598      	cmp	r8, r3
 8007132:	dd0a      	ble.n	800714a <__ieee754_pow+0x1ea>
 8007134:	4b0f      	ldr	r3, [pc, #60]	; (8007174 <__ieee754_pow+0x214>)
 8007136:	429c      	cmp	r4, r3
 8007138:	dc0d      	bgt.n	8007156 <__ieee754_pow+0x1f6>
 800713a:	f1b9 0f00 	cmp.w	r9, #0
 800713e:	f6bf af6d 	bge.w	800701c <__ieee754_pow+0xbc>
 8007142:	a307      	add	r3, pc, #28	; (adr r3, 8007160 <__ieee754_pow+0x200>)
 8007144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007148:	e79f      	b.n	800708a <__ieee754_pow+0x12a>
 800714a:	4b0e      	ldr	r3, [pc, #56]	; (8007184 <__ieee754_pow+0x224>)
 800714c:	429c      	cmp	r4, r3
 800714e:	ddf4      	ble.n	800713a <__ieee754_pow+0x1da>
 8007150:	4b09      	ldr	r3, [pc, #36]	; (8007178 <__ieee754_pow+0x218>)
 8007152:	429c      	cmp	r4, r3
 8007154:	dd18      	ble.n	8007188 <__ieee754_pow+0x228>
 8007156:	f1b9 0f00 	cmp.w	r9, #0
 800715a:	dcf2      	bgt.n	8007142 <__ieee754_pow+0x1e2>
 800715c:	e75e      	b.n	800701c <__ieee754_pow+0xbc>
 800715e:	bf00      	nop
 8007160:	8800759c 	.word	0x8800759c
 8007164:	7e37e43c 	.word	0x7e37e43c
 8007168:	7ff00000 	.word	0x7ff00000
 800716c:	08007dc9 	.word	0x08007dc9
 8007170:	433fffff 	.word	0x433fffff
 8007174:	3fefffff 	.word	0x3fefffff
 8007178:	3ff00000 	.word	0x3ff00000
 800717c:	3fe00000 	.word	0x3fe00000
 8007180:	41e00000 	.word	0x41e00000
 8007184:	3feffffe 	.word	0x3feffffe
 8007188:	2200      	movs	r2, #0
 800718a:	4b63      	ldr	r3, [pc, #396]	; (8007318 <__ieee754_pow+0x3b8>)
 800718c:	f7f9 f874 	bl	8000278 <__aeabi_dsub>
 8007190:	a355      	add	r3, pc, #340	; (adr r3, 80072e8 <__ieee754_pow+0x388>)
 8007192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007196:	4604      	mov	r4, r0
 8007198:	460d      	mov	r5, r1
 800719a:	f7f9 fa25 	bl	80005e8 <__aeabi_dmul>
 800719e:	a354      	add	r3, pc, #336	; (adr r3, 80072f0 <__ieee754_pow+0x390>)
 80071a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a4:	4606      	mov	r6, r0
 80071a6:	460f      	mov	r7, r1
 80071a8:	4620      	mov	r0, r4
 80071aa:	4629      	mov	r1, r5
 80071ac:	f7f9 fa1c 	bl	80005e8 <__aeabi_dmul>
 80071b0:	2200      	movs	r2, #0
 80071b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071b6:	4b59      	ldr	r3, [pc, #356]	; (800731c <__ieee754_pow+0x3bc>)
 80071b8:	4620      	mov	r0, r4
 80071ba:	4629      	mov	r1, r5
 80071bc:	f7f9 fa14 	bl	80005e8 <__aeabi_dmul>
 80071c0:	4602      	mov	r2, r0
 80071c2:	460b      	mov	r3, r1
 80071c4:	a14c      	add	r1, pc, #304	; (adr r1, 80072f8 <__ieee754_pow+0x398>)
 80071c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071ca:	f7f9 f855 	bl	8000278 <__aeabi_dsub>
 80071ce:	4622      	mov	r2, r4
 80071d0:	462b      	mov	r3, r5
 80071d2:	f7f9 fa09 	bl	80005e8 <__aeabi_dmul>
 80071d6:	4602      	mov	r2, r0
 80071d8:	460b      	mov	r3, r1
 80071da:	2000      	movs	r0, #0
 80071dc:	4950      	ldr	r1, [pc, #320]	; (8007320 <__ieee754_pow+0x3c0>)
 80071de:	f7f9 f84b 	bl	8000278 <__aeabi_dsub>
 80071e2:	4622      	mov	r2, r4
 80071e4:	462b      	mov	r3, r5
 80071e6:	4680      	mov	r8, r0
 80071e8:	4689      	mov	r9, r1
 80071ea:	4620      	mov	r0, r4
 80071ec:	4629      	mov	r1, r5
 80071ee:	f7f9 f9fb 	bl	80005e8 <__aeabi_dmul>
 80071f2:	4602      	mov	r2, r0
 80071f4:	460b      	mov	r3, r1
 80071f6:	4640      	mov	r0, r8
 80071f8:	4649      	mov	r1, r9
 80071fa:	f7f9 f9f5 	bl	80005e8 <__aeabi_dmul>
 80071fe:	a340      	add	r3, pc, #256	; (adr r3, 8007300 <__ieee754_pow+0x3a0>)
 8007200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007204:	f7f9 f9f0 	bl	80005e8 <__aeabi_dmul>
 8007208:	4602      	mov	r2, r0
 800720a:	460b      	mov	r3, r1
 800720c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007210:	f7f9 f832 	bl	8000278 <__aeabi_dsub>
 8007214:	4602      	mov	r2, r0
 8007216:	460b      	mov	r3, r1
 8007218:	4604      	mov	r4, r0
 800721a:	460d      	mov	r5, r1
 800721c:	4630      	mov	r0, r6
 800721e:	4639      	mov	r1, r7
 8007220:	f7f9 f82c 	bl	800027c <__adddf3>
 8007224:	2000      	movs	r0, #0
 8007226:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800722a:	4632      	mov	r2, r6
 800722c:	463b      	mov	r3, r7
 800722e:	f7f9 f823 	bl	8000278 <__aeabi_dsub>
 8007232:	4602      	mov	r2, r0
 8007234:	460b      	mov	r3, r1
 8007236:	4620      	mov	r0, r4
 8007238:	4629      	mov	r1, r5
 800723a:	f7f9 f81d 	bl	8000278 <__aeabi_dsub>
 800723e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007240:	f10b 33ff 	add.w	r3, fp, #4294967295
 8007244:	4313      	orrs	r3, r2
 8007246:	4606      	mov	r6, r0
 8007248:	460f      	mov	r7, r1
 800724a:	f040 81eb 	bne.w	8007624 <__ieee754_pow+0x6c4>
 800724e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8007308 <__ieee754_pow+0x3a8>
 8007252:	e9dd 4500 	ldrd	r4, r5, [sp]
 8007256:	2400      	movs	r4, #0
 8007258:	4622      	mov	r2, r4
 800725a:	462b      	mov	r3, r5
 800725c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007260:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007264:	f7f9 f808 	bl	8000278 <__aeabi_dsub>
 8007268:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800726c:	f7f9 f9bc 	bl	80005e8 <__aeabi_dmul>
 8007270:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007274:	4680      	mov	r8, r0
 8007276:	4689      	mov	r9, r1
 8007278:	4630      	mov	r0, r6
 800727a:	4639      	mov	r1, r7
 800727c:	f7f9 f9b4 	bl	80005e8 <__aeabi_dmul>
 8007280:	4602      	mov	r2, r0
 8007282:	460b      	mov	r3, r1
 8007284:	4640      	mov	r0, r8
 8007286:	4649      	mov	r1, r9
 8007288:	f7f8 fff8 	bl	800027c <__adddf3>
 800728c:	4622      	mov	r2, r4
 800728e:	462b      	mov	r3, r5
 8007290:	4680      	mov	r8, r0
 8007292:	4689      	mov	r9, r1
 8007294:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007298:	f7f9 f9a6 	bl	80005e8 <__aeabi_dmul>
 800729c:	460b      	mov	r3, r1
 800729e:	4604      	mov	r4, r0
 80072a0:	460d      	mov	r5, r1
 80072a2:	4602      	mov	r2, r0
 80072a4:	4649      	mov	r1, r9
 80072a6:	4640      	mov	r0, r8
 80072a8:	e9cd 4500 	strd	r4, r5, [sp]
 80072ac:	f7f8 ffe6 	bl	800027c <__adddf3>
 80072b0:	4b1c      	ldr	r3, [pc, #112]	; (8007324 <__ieee754_pow+0x3c4>)
 80072b2:	4299      	cmp	r1, r3
 80072b4:	4606      	mov	r6, r0
 80072b6:	460f      	mov	r7, r1
 80072b8:	468b      	mov	fp, r1
 80072ba:	f340 82f7 	ble.w	80078ac <__ieee754_pow+0x94c>
 80072be:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80072c2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80072c6:	4303      	orrs	r3, r0
 80072c8:	f000 81ea 	beq.w	80076a0 <__ieee754_pow+0x740>
 80072cc:	a310      	add	r3, pc, #64	; (adr r3, 8007310 <__ieee754_pow+0x3b0>)
 80072ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072d6:	f7f9 f987 	bl	80005e8 <__aeabi_dmul>
 80072da:	a30d      	add	r3, pc, #52	; (adr r3, 8007310 <__ieee754_pow+0x3b0>)
 80072dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e0:	e6d5      	b.n	800708e <__ieee754_pow+0x12e>
 80072e2:	bf00      	nop
 80072e4:	f3af 8000 	nop.w
 80072e8:	60000000 	.word	0x60000000
 80072ec:	3ff71547 	.word	0x3ff71547
 80072f0:	f85ddf44 	.word	0xf85ddf44
 80072f4:	3e54ae0b 	.word	0x3e54ae0b
 80072f8:	55555555 	.word	0x55555555
 80072fc:	3fd55555 	.word	0x3fd55555
 8007300:	652b82fe 	.word	0x652b82fe
 8007304:	3ff71547 	.word	0x3ff71547
 8007308:	00000000 	.word	0x00000000
 800730c:	bff00000 	.word	0xbff00000
 8007310:	8800759c 	.word	0x8800759c
 8007314:	7e37e43c 	.word	0x7e37e43c
 8007318:	3ff00000 	.word	0x3ff00000
 800731c:	3fd00000 	.word	0x3fd00000
 8007320:	3fe00000 	.word	0x3fe00000
 8007324:	408fffff 	.word	0x408fffff
 8007328:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800732c:	f04f 0200 	mov.w	r2, #0
 8007330:	da05      	bge.n	800733e <__ieee754_pow+0x3de>
 8007332:	4bd3      	ldr	r3, [pc, #844]	; (8007680 <__ieee754_pow+0x720>)
 8007334:	f7f9 f958 	bl	80005e8 <__aeabi_dmul>
 8007338:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800733c:	460c      	mov	r4, r1
 800733e:	1523      	asrs	r3, r4, #20
 8007340:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007344:	4413      	add	r3, r2
 8007346:	9309      	str	r3, [sp, #36]	; 0x24
 8007348:	4bce      	ldr	r3, [pc, #824]	; (8007684 <__ieee754_pow+0x724>)
 800734a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800734e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007352:	429c      	cmp	r4, r3
 8007354:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007358:	dd08      	ble.n	800736c <__ieee754_pow+0x40c>
 800735a:	4bcb      	ldr	r3, [pc, #812]	; (8007688 <__ieee754_pow+0x728>)
 800735c:	429c      	cmp	r4, r3
 800735e:	f340 815e 	ble.w	800761e <__ieee754_pow+0x6be>
 8007362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007364:	3301      	adds	r3, #1
 8007366:	9309      	str	r3, [sp, #36]	; 0x24
 8007368:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800736c:	f04f 0a00 	mov.w	sl, #0
 8007370:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8007374:	930c      	str	r3, [sp, #48]	; 0x30
 8007376:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007378:	4bc4      	ldr	r3, [pc, #784]	; (800768c <__ieee754_pow+0x72c>)
 800737a:	4413      	add	r3, r2
 800737c:	ed93 7b00 	vldr	d7, [r3]
 8007380:	4629      	mov	r1, r5
 8007382:	ec53 2b17 	vmov	r2, r3, d7
 8007386:	ed8d 7b06 	vstr	d7, [sp, #24]
 800738a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800738e:	f7f8 ff73 	bl	8000278 <__aeabi_dsub>
 8007392:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007396:	4606      	mov	r6, r0
 8007398:	460f      	mov	r7, r1
 800739a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800739e:	f7f8 ff6d 	bl	800027c <__adddf3>
 80073a2:	4602      	mov	r2, r0
 80073a4:	460b      	mov	r3, r1
 80073a6:	2000      	movs	r0, #0
 80073a8:	49b9      	ldr	r1, [pc, #740]	; (8007690 <__ieee754_pow+0x730>)
 80073aa:	f7f9 fa47 	bl	800083c <__aeabi_ddiv>
 80073ae:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80073b2:	4602      	mov	r2, r0
 80073b4:	460b      	mov	r3, r1
 80073b6:	4630      	mov	r0, r6
 80073b8:	4639      	mov	r1, r7
 80073ba:	f7f9 f915 	bl	80005e8 <__aeabi_dmul>
 80073be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073c2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80073c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80073ca:	2300      	movs	r3, #0
 80073cc:	9302      	str	r3, [sp, #8]
 80073ce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80073d2:	106d      	asrs	r5, r5, #1
 80073d4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80073d8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80073dc:	2200      	movs	r2, #0
 80073de:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80073e2:	4640      	mov	r0, r8
 80073e4:	4649      	mov	r1, r9
 80073e6:	4614      	mov	r4, r2
 80073e8:	461d      	mov	r5, r3
 80073ea:	f7f9 f8fd 	bl	80005e8 <__aeabi_dmul>
 80073ee:	4602      	mov	r2, r0
 80073f0:	460b      	mov	r3, r1
 80073f2:	4630      	mov	r0, r6
 80073f4:	4639      	mov	r1, r7
 80073f6:	f7f8 ff3f 	bl	8000278 <__aeabi_dsub>
 80073fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80073fe:	4606      	mov	r6, r0
 8007400:	460f      	mov	r7, r1
 8007402:	4620      	mov	r0, r4
 8007404:	4629      	mov	r1, r5
 8007406:	f7f8 ff37 	bl	8000278 <__aeabi_dsub>
 800740a:	4602      	mov	r2, r0
 800740c:	460b      	mov	r3, r1
 800740e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007412:	f7f8 ff31 	bl	8000278 <__aeabi_dsub>
 8007416:	4642      	mov	r2, r8
 8007418:	464b      	mov	r3, r9
 800741a:	f7f9 f8e5 	bl	80005e8 <__aeabi_dmul>
 800741e:	4602      	mov	r2, r0
 8007420:	460b      	mov	r3, r1
 8007422:	4630      	mov	r0, r6
 8007424:	4639      	mov	r1, r7
 8007426:	f7f8 ff27 	bl	8000278 <__aeabi_dsub>
 800742a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800742e:	f7f9 f8db 	bl	80005e8 <__aeabi_dmul>
 8007432:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007436:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800743a:	4610      	mov	r0, r2
 800743c:	4619      	mov	r1, r3
 800743e:	f7f9 f8d3 	bl	80005e8 <__aeabi_dmul>
 8007442:	a37b      	add	r3, pc, #492	; (adr r3, 8007630 <__ieee754_pow+0x6d0>)
 8007444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007448:	4604      	mov	r4, r0
 800744a:	460d      	mov	r5, r1
 800744c:	f7f9 f8cc 	bl	80005e8 <__aeabi_dmul>
 8007450:	a379      	add	r3, pc, #484	; (adr r3, 8007638 <__ieee754_pow+0x6d8>)
 8007452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007456:	f7f8 ff11 	bl	800027c <__adddf3>
 800745a:	4622      	mov	r2, r4
 800745c:	462b      	mov	r3, r5
 800745e:	f7f9 f8c3 	bl	80005e8 <__aeabi_dmul>
 8007462:	a377      	add	r3, pc, #476	; (adr r3, 8007640 <__ieee754_pow+0x6e0>)
 8007464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007468:	f7f8 ff08 	bl	800027c <__adddf3>
 800746c:	4622      	mov	r2, r4
 800746e:	462b      	mov	r3, r5
 8007470:	f7f9 f8ba 	bl	80005e8 <__aeabi_dmul>
 8007474:	a374      	add	r3, pc, #464	; (adr r3, 8007648 <__ieee754_pow+0x6e8>)
 8007476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747a:	f7f8 feff 	bl	800027c <__adddf3>
 800747e:	4622      	mov	r2, r4
 8007480:	462b      	mov	r3, r5
 8007482:	f7f9 f8b1 	bl	80005e8 <__aeabi_dmul>
 8007486:	a372      	add	r3, pc, #456	; (adr r3, 8007650 <__ieee754_pow+0x6f0>)
 8007488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800748c:	f7f8 fef6 	bl	800027c <__adddf3>
 8007490:	4622      	mov	r2, r4
 8007492:	462b      	mov	r3, r5
 8007494:	f7f9 f8a8 	bl	80005e8 <__aeabi_dmul>
 8007498:	a36f      	add	r3, pc, #444	; (adr r3, 8007658 <__ieee754_pow+0x6f8>)
 800749a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749e:	f7f8 feed 	bl	800027c <__adddf3>
 80074a2:	4622      	mov	r2, r4
 80074a4:	4606      	mov	r6, r0
 80074a6:	460f      	mov	r7, r1
 80074a8:	462b      	mov	r3, r5
 80074aa:	4620      	mov	r0, r4
 80074ac:	4629      	mov	r1, r5
 80074ae:	f7f9 f89b 	bl	80005e8 <__aeabi_dmul>
 80074b2:	4602      	mov	r2, r0
 80074b4:	460b      	mov	r3, r1
 80074b6:	4630      	mov	r0, r6
 80074b8:	4639      	mov	r1, r7
 80074ba:	f7f9 f895 	bl	80005e8 <__aeabi_dmul>
 80074be:	4642      	mov	r2, r8
 80074c0:	4604      	mov	r4, r0
 80074c2:	460d      	mov	r5, r1
 80074c4:	464b      	mov	r3, r9
 80074c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074ca:	f7f8 fed7 	bl	800027c <__adddf3>
 80074ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80074d2:	f7f9 f889 	bl	80005e8 <__aeabi_dmul>
 80074d6:	4622      	mov	r2, r4
 80074d8:	462b      	mov	r3, r5
 80074da:	f7f8 fecf 	bl	800027c <__adddf3>
 80074de:	4642      	mov	r2, r8
 80074e0:	4606      	mov	r6, r0
 80074e2:	460f      	mov	r7, r1
 80074e4:	464b      	mov	r3, r9
 80074e6:	4640      	mov	r0, r8
 80074e8:	4649      	mov	r1, r9
 80074ea:	f7f9 f87d 	bl	80005e8 <__aeabi_dmul>
 80074ee:	2200      	movs	r2, #0
 80074f0:	4b68      	ldr	r3, [pc, #416]	; (8007694 <__ieee754_pow+0x734>)
 80074f2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80074f6:	f7f8 fec1 	bl	800027c <__adddf3>
 80074fa:	4632      	mov	r2, r6
 80074fc:	463b      	mov	r3, r7
 80074fe:	f7f8 febd 	bl	800027c <__adddf3>
 8007502:	9802      	ldr	r0, [sp, #8]
 8007504:	460d      	mov	r5, r1
 8007506:	4604      	mov	r4, r0
 8007508:	4602      	mov	r2, r0
 800750a:	460b      	mov	r3, r1
 800750c:	4640      	mov	r0, r8
 800750e:	4649      	mov	r1, r9
 8007510:	f7f9 f86a 	bl	80005e8 <__aeabi_dmul>
 8007514:	2200      	movs	r2, #0
 8007516:	4680      	mov	r8, r0
 8007518:	4689      	mov	r9, r1
 800751a:	4b5e      	ldr	r3, [pc, #376]	; (8007694 <__ieee754_pow+0x734>)
 800751c:	4620      	mov	r0, r4
 800751e:	4629      	mov	r1, r5
 8007520:	f7f8 feaa 	bl	8000278 <__aeabi_dsub>
 8007524:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007528:	f7f8 fea6 	bl	8000278 <__aeabi_dsub>
 800752c:	4602      	mov	r2, r0
 800752e:	460b      	mov	r3, r1
 8007530:	4630      	mov	r0, r6
 8007532:	4639      	mov	r1, r7
 8007534:	f7f8 fea0 	bl	8000278 <__aeabi_dsub>
 8007538:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800753c:	f7f9 f854 	bl	80005e8 <__aeabi_dmul>
 8007540:	4622      	mov	r2, r4
 8007542:	4606      	mov	r6, r0
 8007544:	460f      	mov	r7, r1
 8007546:	462b      	mov	r3, r5
 8007548:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800754c:	f7f9 f84c 	bl	80005e8 <__aeabi_dmul>
 8007550:	4602      	mov	r2, r0
 8007552:	460b      	mov	r3, r1
 8007554:	4630      	mov	r0, r6
 8007556:	4639      	mov	r1, r7
 8007558:	f7f8 fe90 	bl	800027c <__adddf3>
 800755c:	4606      	mov	r6, r0
 800755e:	460f      	mov	r7, r1
 8007560:	4602      	mov	r2, r0
 8007562:	460b      	mov	r3, r1
 8007564:	4640      	mov	r0, r8
 8007566:	4649      	mov	r1, r9
 8007568:	f7f8 fe88 	bl	800027c <__adddf3>
 800756c:	9802      	ldr	r0, [sp, #8]
 800756e:	a33c      	add	r3, pc, #240	; (adr r3, 8007660 <__ieee754_pow+0x700>)
 8007570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007574:	4604      	mov	r4, r0
 8007576:	460d      	mov	r5, r1
 8007578:	f7f9 f836 	bl	80005e8 <__aeabi_dmul>
 800757c:	4642      	mov	r2, r8
 800757e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007582:	464b      	mov	r3, r9
 8007584:	4620      	mov	r0, r4
 8007586:	4629      	mov	r1, r5
 8007588:	f7f8 fe76 	bl	8000278 <__aeabi_dsub>
 800758c:	4602      	mov	r2, r0
 800758e:	460b      	mov	r3, r1
 8007590:	4630      	mov	r0, r6
 8007592:	4639      	mov	r1, r7
 8007594:	f7f8 fe70 	bl	8000278 <__aeabi_dsub>
 8007598:	a333      	add	r3, pc, #204	; (adr r3, 8007668 <__ieee754_pow+0x708>)
 800759a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800759e:	f7f9 f823 	bl	80005e8 <__aeabi_dmul>
 80075a2:	a333      	add	r3, pc, #204	; (adr r3, 8007670 <__ieee754_pow+0x710>)
 80075a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a8:	4606      	mov	r6, r0
 80075aa:	460f      	mov	r7, r1
 80075ac:	4620      	mov	r0, r4
 80075ae:	4629      	mov	r1, r5
 80075b0:	f7f9 f81a 	bl	80005e8 <__aeabi_dmul>
 80075b4:	4602      	mov	r2, r0
 80075b6:	460b      	mov	r3, r1
 80075b8:	4630      	mov	r0, r6
 80075ba:	4639      	mov	r1, r7
 80075bc:	f7f8 fe5e 	bl	800027c <__adddf3>
 80075c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075c2:	4b35      	ldr	r3, [pc, #212]	; (8007698 <__ieee754_pow+0x738>)
 80075c4:	4413      	add	r3, r2
 80075c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ca:	f7f8 fe57 	bl	800027c <__adddf3>
 80075ce:	4604      	mov	r4, r0
 80075d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075d2:	460d      	mov	r5, r1
 80075d4:	f7f8 ff9e 	bl	8000514 <__aeabi_i2d>
 80075d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075da:	4b30      	ldr	r3, [pc, #192]	; (800769c <__ieee754_pow+0x73c>)
 80075dc:	4413      	add	r3, r2
 80075de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80075e2:	4606      	mov	r6, r0
 80075e4:	460f      	mov	r7, r1
 80075e6:	4622      	mov	r2, r4
 80075e8:	462b      	mov	r3, r5
 80075ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075ee:	f7f8 fe45 	bl	800027c <__adddf3>
 80075f2:	4642      	mov	r2, r8
 80075f4:	464b      	mov	r3, r9
 80075f6:	f7f8 fe41 	bl	800027c <__adddf3>
 80075fa:	4632      	mov	r2, r6
 80075fc:	463b      	mov	r3, r7
 80075fe:	f7f8 fe3d 	bl	800027c <__adddf3>
 8007602:	9802      	ldr	r0, [sp, #8]
 8007604:	4632      	mov	r2, r6
 8007606:	463b      	mov	r3, r7
 8007608:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800760c:	f7f8 fe34 	bl	8000278 <__aeabi_dsub>
 8007610:	4642      	mov	r2, r8
 8007612:	464b      	mov	r3, r9
 8007614:	f7f8 fe30 	bl	8000278 <__aeabi_dsub>
 8007618:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800761c:	e607      	b.n	800722e <__ieee754_pow+0x2ce>
 800761e:	f04f 0a01 	mov.w	sl, #1
 8007622:	e6a5      	b.n	8007370 <__ieee754_pow+0x410>
 8007624:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8007678 <__ieee754_pow+0x718>
 8007628:	e613      	b.n	8007252 <__ieee754_pow+0x2f2>
 800762a:	bf00      	nop
 800762c:	f3af 8000 	nop.w
 8007630:	4a454eef 	.word	0x4a454eef
 8007634:	3fca7e28 	.word	0x3fca7e28
 8007638:	93c9db65 	.word	0x93c9db65
 800763c:	3fcd864a 	.word	0x3fcd864a
 8007640:	a91d4101 	.word	0xa91d4101
 8007644:	3fd17460 	.word	0x3fd17460
 8007648:	518f264d 	.word	0x518f264d
 800764c:	3fd55555 	.word	0x3fd55555
 8007650:	db6fabff 	.word	0xdb6fabff
 8007654:	3fdb6db6 	.word	0x3fdb6db6
 8007658:	33333303 	.word	0x33333303
 800765c:	3fe33333 	.word	0x3fe33333
 8007660:	e0000000 	.word	0xe0000000
 8007664:	3feec709 	.word	0x3feec709
 8007668:	dc3a03fd 	.word	0xdc3a03fd
 800766c:	3feec709 	.word	0x3feec709
 8007670:	145b01f5 	.word	0x145b01f5
 8007674:	be3e2fe0 	.word	0xbe3e2fe0
 8007678:	00000000 	.word	0x00000000
 800767c:	3ff00000 	.word	0x3ff00000
 8007680:	43400000 	.word	0x43400000
 8007684:	0003988e 	.word	0x0003988e
 8007688:	000bb679 	.word	0x000bb679
 800768c:	08007e00 	.word	0x08007e00
 8007690:	3ff00000 	.word	0x3ff00000
 8007694:	40080000 	.word	0x40080000
 8007698:	08007e20 	.word	0x08007e20
 800769c:	08007e10 	.word	0x08007e10
 80076a0:	a3b4      	add	r3, pc, #720	; (adr r3, 8007974 <__ieee754_pow+0xa14>)
 80076a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a6:	4640      	mov	r0, r8
 80076a8:	4649      	mov	r1, r9
 80076aa:	f7f8 fde7 	bl	800027c <__adddf3>
 80076ae:	4622      	mov	r2, r4
 80076b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076b4:	462b      	mov	r3, r5
 80076b6:	4630      	mov	r0, r6
 80076b8:	4639      	mov	r1, r7
 80076ba:	f7f8 fddd 	bl	8000278 <__aeabi_dsub>
 80076be:	4602      	mov	r2, r0
 80076c0:	460b      	mov	r3, r1
 80076c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076c6:	f7f9 fa1f 	bl	8000b08 <__aeabi_dcmpgt>
 80076ca:	2800      	cmp	r0, #0
 80076cc:	f47f adfe 	bne.w	80072cc <__ieee754_pow+0x36c>
 80076d0:	4aa3      	ldr	r2, [pc, #652]	; (8007960 <__ieee754_pow+0xa00>)
 80076d2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80076d6:	4293      	cmp	r3, r2
 80076d8:	f340 810a 	ble.w	80078f0 <__ieee754_pow+0x990>
 80076dc:	151b      	asrs	r3, r3, #20
 80076de:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80076e2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80076e6:	fa4a f303 	asr.w	r3, sl, r3
 80076ea:	445b      	add	r3, fp
 80076ec:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80076f0:	4e9c      	ldr	r6, [pc, #624]	; (8007964 <__ieee754_pow+0xa04>)
 80076f2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80076f6:	4116      	asrs	r6, r2
 80076f8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80076fc:	2000      	movs	r0, #0
 80076fe:	ea23 0106 	bic.w	r1, r3, r6
 8007702:	f1c2 0214 	rsb	r2, r2, #20
 8007706:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800770a:	fa4a fa02 	asr.w	sl, sl, r2
 800770e:	f1bb 0f00 	cmp.w	fp, #0
 8007712:	4602      	mov	r2, r0
 8007714:	460b      	mov	r3, r1
 8007716:	4620      	mov	r0, r4
 8007718:	4629      	mov	r1, r5
 800771a:	bfb8      	it	lt
 800771c:	f1ca 0a00 	rsblt	sl, sl, #0
 8007720:	f7f8 fdaa 	bl	8000278 <__aeabi_dsub>
 8007724:	e9cd 0100 	strd	r0, r1, [sp]
 8007728:	4642      	mov	r2, r8
 800772a:	464b      	mov	r3, r9
 800772c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007730:	f7f8 fda4 	bl	800027c <__adddf3>
 8007734:	2000      	movs	r0, #0
 8007736:	a378      	add	r3, pc, #480	; (adr r3, 8007918 <__ieee754_pow+0x9b8>)
 8007738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800773c:	4604      	mov	r4, r0
 800773e:	460d      	mov	r5, r1
 8007740:	f7f8 ff52 	bl	80005e8 <__aeabi_dmul>
 8007744:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007748:	4606      	mov	r6, r0
 800774a:	460f      	mov	r7, r1
 800774c:	4620      	mov	r0, r4
 800774e:	4629      	mov	r1, r5
 8007750:	f7f8 fd92 	bl	8000278 <__aeabi_dsub>
 8007754:	4602      	mov	r2, r0
 8007756:	460b      	mov	r3, r1
 8007758:	4640      	mov	r0, r8
 800775a:	4649      	mov	r1, r9
 800775c:	f7f8 fd8c 	bl	8000278 <__aeabi_dsub>
 8007760:	a36f      	add	r3, pc, #444	; (adr r3, 8007920 <__ieee754_pow+0x9c0>)
 8007762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007766:	f7f8 ff3f 	bl	80005e8 <__aeabi_dmul>
 800776a:	a36f      	add	r3, pc, #444	; (adr r3, 8007928 <__ieee754_pow+0x9c8>)
 800776c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007770:	4680      	mov	r8, r0
 8007772:	4689      	mov	r9, r1
 8007774:	4620      	mov	r0, r4
 8007776:	4629      	mov	r1, r5
 8007778:	f7f8 ff36 	bl	80005e8 <__aeabi_dmul>
 800777c:	4602      	mov	r2, r0
 800777e:	460b      	mov	r3, r1
 8007780:	4640      	mov	r0, r8
 8007782:	4649      	mov	r1, r9
 8007784:	f7f8 fd7a 	bl	800027c <__adddf3>
 8007788:	4604      	mov	r4, r0
 800778a:	460d      	mov	r5, r1
 800778c:	4602      	mov	r2, r0
 800778e:	460b      	mov	r3, r1
 8007790:	4630      	mov	r0, r6
 8007792:	4639      	mov	r1, r7
 8007794:	f7f8 fd72 	bl	800027c <__adddf3>
 8007798:	4632      	mov	r2, r6
 800779a:	463b      	mov	r3, r7
 800779c:	4680      	mov	r8, r0
 800779e:	4689      	mov	r9, r1
 80077a0:	f7f8 fd6a 	bl	8000278 <__aeabi_dsub>
 80077a4:	4602      	mov	r2, r0
 80077a6:	460b      	mov	r3, r1
 80077a8:	4620      	mov	r0, r4
 80077aa:	4629      	mov	r1, r5
 80077ac:	f7f8 fd64 	bl	8000278 <__aeabi_dsub>
 80077b0:	4642      	mov	r2, r8
 80077b2:	4606      	mov	r6, r0
 80077b4:	460f      	mov	r7, r1
 80077b6:	464b      	mov	r3, r9
 80077b8:	4640      	mov	r0, r8
 80077ba:	4649      	mov	r1, r9
 80077bc:	f7f8 ff14 	bl	80005e8 <__aeabi_dmul>
 80077c0:	a35b      	add	r3, pc, #364	; (adr r3, 8007930 <__ieee754_pow+0x9d0>)
 80077c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c6:	4604      	mov	r4, r0
 80077c8:	460d      	mov	r5, r1
 80077ca:	f7f8 ff0d 	bl	80005e8 <__aeabi_dmul>
 80077ce:	a35a      	add	r3, pc, #360	; (adr r3, 8007938 <__ieee754_pow+0x9d8>)
 80077d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d4:	f7f8 fd50 	bl	8000278 <__aeabi_dsub>
 80077d8:	4622      	mov	r2, r4
 80077da:	462b      	mov	r3, r5
 80077dc:	f7f8 ff04 	bl	80005e8 <__aeabi_dmul>
 80077e0:	a357      	add	r3, pc, #348	; (adr r3, 8007940 <__ieee754_pow+0x9e0>)
 80077e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e6:	f7f8 fd49 	bl	800027c <__adddf3>
 80077ea:	4622      	mov	r2, r4
 80077ec:	462b      	mov	r3, r5
 80077ee:	f7f8 fefb 	bl	80005e8 <__aeabi_dmul>
 80077f2:	a355      	add	r3, pc, #340	; (adr r3, 8007948 <__ieee754_pow+0x9e8>)
 80077f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f8:	f7f8 fd3e 	bl	8000278 <__aeabi_dsub>
 80077fc:	4622      	mov	r2, r4
 80077fe:	462b      	mov	r3, r5
 8007800:	f7f8 fef2 	bl	80005e8 <__aeabi_dmul>
 8007804:	a352      	add	r3, pc, #328	; (adr r3, 8007950 <__ieee754_pow+0x9f0>)
 8007806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780a:	f7f8 fd37 	bl	800027c <__adddf3>
 800780e:	4622      	mov	r2, r4
 8007810:	462b      	mov	r3, r5
 8007812:	f7f8 fee9 	bl	80005e8 <__aeabi_dmul>
 8007816:	4602      	mov	r2, r0
 8007818:	460b      	mov	r3, r1
 800781a:	4640      	mov	r0, r8
 800781c:	4649      	mov	r1, r9
 800781e:	f7f8 fd2b 	bl	8000278 <__aeabi_dsub>
 8007822:	4604      	mov	r4, r0
 8007824:	460d      	mov	r5, r1
 8007826:	4602      	mov	r2, r0
 8007828:	460b      	mov	r3, r1
 800782a:	4640      	mov	r0, r8
 800782c:	4649      	mov	r1, r9
 800782e:	f7f8 fedb 	bl	80005e8 <__aeabi_dmul>
 8007832:	2200      	movs	r2, #0
 8007834:	e9cd 0100 	strd	r0, r1, [sp]
 8007838:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800783c:	4620      	mov	r0, r4
 800783e:	4629      	mov	r1, r5
 8007840:	f7f8 fd1a 	bl	8000278 <__aeabi_dsub>
 8007844:	4602      	mov	r2, r0
 8007846:	460b      	mov	r3, r1
 8007848:	e9dd 0100 	ldrd	r0, r1, [sp]
 800784c:	f7f8 fff6 	bl	800083c <__aeabi_ddiv>
 8007850:	4632      	mov	r2, r6
 8007852:	4604      	mov	r4, r0
 8007854:	460d      	mov	r5, r1
 8007856:	463b      	mov	r3, r7
 8007858:	4640      	mov	r0, r8
 800785a:	4649      	mov	r1, r9
 800785c:	f7f8 fec4 	bl	80005e8 <__aeabi_dmul>
 8007860:	4632      	mov	r2, r6
 8007862:	463b      	mov	r3, r7
 8007864:	f7f8 fd0a 	bl	800027c <__adddf3>
 8007868:	4602      	mov	r2, r0
 800786a:	460b      	mov	r3, r1
 800786c:	4620      	mov	r0, r4
 800786e:	4629      	mov	r1, r5
 8007870:	f7f8 fd02 	bl	8000278 <__aeabi_dsub>
 8007874:	4642      	mov	r2, r8
 8007876:	464b      	mov	r3, r9
 8007878:	f7f8 fcfe 	bl	8000278 <__aeabi_dsub>
 800787c:	4602      	mov	r2, r0
 800787e:	460b      	mov	r3, r1
 8007880:	2000      	movs	r0, #0
 8007882:	4939      	ldr	r1, [pc, #228]	; (8007968 <__ieee754_pow+0xa08>)
 8007884:	f7f8 fcf8 	bl	8000278 <__aeabi_dsub>
 8007888:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800788c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8007890:	4602      	mov	r2, r0
 8007892:	460b      	mov	r3, r1
 8007894:	da2f      	bge.n	80078f6 <__ieee754_pow+0x996>
 8007896:	4650      	mov	r0, sl
 8007898:	ec43 2b10 	vmov	d0, r2, r3
 800789c:	f000 f9c0 	bl	8007c20 <scalbn>
 80078a0:	ec51 0b10 	vmov	r0, r1, d0
 80078a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078a8:	f7ff bbf1 	b.w	800708e <__ieee754_pow+0x12e>
 80078ac:	4b2f      	ldr	r3, [pc, #188]	; (800796c <__ieee754_pow+0xa0c>)
 80078ae:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80078b2:	429e      	cmp	r6, r3
 80078b4:	f77f af0c 	ble.w	80076d0 <__ieee754_pow+0x770>
 80078b8:	4b2d      	ldr	r3, [pc, #180]	; (8007970 <__ieee754_pow+0xa10>)
 80078ba:	440b      	add	r3, r1
 80078bc:	4303      	orrs	r3, r0
 80078be:	d00b      	beq.n	80078d8 <__ieee754_pow+0x978>
 80078c0:	a325      	add	r3, pc, #148	; (adr r3, 8007958 <__ieee754_pow+0x9f8>)
 80078c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078ca:	f7f8 fe8d 	bl	80005e8 <__aeabi_dmul>
 80078ce:	a322      	add	r3, pc, #136	; (adr r3, 8007958 <__ieee754_pow+0x9f8>)
 80078d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d4:	f7ff bbdb 	b.w	800708e <__ieee754_pow+0x12e>
 80078d8:	4622      	mov	r2, r4
 80078da:	462b      	mov	r3, r5
 80078dc:	f7f8 fccc 	bl	8000278 <__aeabi_dsub>
 80078e0:	4642      	mov	r2, r8
 80078e2:	464b      	mov	r3, r9
 80078e4:	f7f9 f906 	bl	8000af4 <__aeabi_dcmpge>
 80078e8:	2800      	cmp	r0, #0
 80078ea:	f43f aef1 	beq.w	80076d0 <__ieee754_pow+0x770>
 80078ee:	e7e7      	b.n	80078c0 <__ieee754_pow+0x960>
 80078f0:	f04f 0a00 	mov.w	sl, #0
 80078f4:	e718      	b.n	8007728 <__ieee754_pow+0x7c8>
 80078f6:	4621      	mov	r1, r4
 80078f8:	e7d4      	b.n	80078a4 <__ieee754_pow+0x944>
 80078fa:	2000      	movs	r0, #0
 80078fc:	491a      	ldr	r1, [pc, #104]	; (8007968 <__ieee754_pow+0xa08>)
 80078fe:	f7ff bb8f 	b.w	8007020 <__ieee754_pow+0xc0>
 8007902:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007906:	f7ff bb8b 	b.w	8007020 <__ieee754_pow+0xc0>
 800790a:	4630      	mov	r0, r6
 800790c:	4639      	mov	r1, r7
 800790e:	f7ff bb87 	b.w	8007020 <__ieee754_pow+0xc0>
 8007912:	4693      	mov	fp, r2
 8007914:	f7ff bb98 	b.w	8007048 <__ieee754_pow+0xe8>
 8007918:	00000000 	.word	0x00000000
 800791c:	3fe62e43 	.word	0x3fe62e43
 8007920:	fefa39ef 	.word	0xfefa39ef
 8007924:	3fe62e42 	.word	0x3fe62e42
 8007928:	0ca86c39 	.word	0x0ca86c39
 800792c:	be205c61 	.word	0xbe205c61
 8007930:	72bea4d0 	.word	0x72bea4d0
 8007934:	3e663769 	.word	0x3e663769
 8007938:	c5d26bf1 	.word	0xc5d26bf1
 800793c:	3ebbbd41 	.word	0x3ebbbd41
 8007940:	af25de2c 	.word	0xaf25de2c
 8007944:	3f11566a 	.word	0x3f11566a
 8007948:	16bebd93 	.word	0x16bebd93
 800794c:	3f66c16c 	.word	0x3f66c16c
 8007950:	5555553e 	.word	0x5555553e
 8007954:	3fc55555 	.word	0x3fc55555
 8007958:	c2f8f359 	.word	0xc2f8f359
 800795c:	01a56e1f 	.word	0x01a56e1f
 8007960:	3fe00000 	.word	0x3fe00000
 8007964:	000fffff 	.word	0x000fffff
 8007968:	3ff00000 	.word	0x3ff00000
 800796c:	4090cbff 	.word	0x4090cbff
 8007970:	3f6f3400 	.word	0x3f6f3400
 8007974:	652b82fe 	.word	0x652b82fe
 8007978:	3c971547 	.word	0x3c971547

0800797c <__ieee754_sqrt>:
 800797c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007980:	4955      	ldr	r1, [pc, #340]	; (8007ad8 <__ieee754_sqrt+0x15c>)
 8007982:	ec55 4b10 	vmov	r4, r5, d0
 8007986:	43a9      	bics	r1, r5
 8007988:	462b      	mov	r3, r5
 800798a:	462a      	mov	r2, r5
 800798c:	d112      	bne.n	80079b4 <__ieee754_sqrt+0x38>
 800798e:	ee10 2a10 	vmov	r2, s0
 8007992:	ee10 0a10 	vmov	r0, s0
 8007996:	4629      	mov	r1, r5
 8007998:	f7f8 fe26 	bl	80005e8 <__aeabi_dmul>
 800799c:	4602      	mov	r2, r0
 800799e:	460b      	mov	r3, r1
 80079a0:	4620      	mov	r0, r4
 80079a2:	4629      	mov	r1, r5
 80079a4:	f7f8 fc6a 	bl	800027c <__adddf3>
 80079a8:	4604      	mov	r4, r0
 80079aa:	460d      	mov	r5, r1
 80079ac:	ec45 4b10 	vmov	d0, r4, r5
 80079b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079b4:	2d00      	cmp	r5, #0
 80079b6:	ee10 0a10 	vmov	r0, s0
 80079ba:	4621      	mov	r1, r4
 80079bc:	dc0f      	bgt.n	80079de <__ieee754_sqrt+0x62>
 80079be:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80079c2:	4330      	orrs	r0, r6
 80079c4:	d0f2      	beq.n	80079ac <__ieee754_sqrt+0x30>
 80079c6:	b155      	cbz	r5, 80079de <__ieee754_sqrt+0x62>
 80079c8:	ee10 2a10 	vmov	r2, s0
 80079cc:	4620      	mov	r0, r4
 80079ce:	4629      	mov	r1, r5
 80079d0:	f7f8 fc52 	bl	8000278 <__aeabi_dsub>
 80079d4:	4602      	mov	r2, r0
 80079d6:	460b      	mov	r3, r1
 80079d8:	f7f8 ff30 	bl	800083c <__aeabi_ddiv>
 80079dc:	e7e4      	b.n	80079a8 <__ieee754_sqrt+0x2c>
 80079de:	151b      	asrs	r3, r3, #20
 80079e0:	d073      	beq.n	8007aca <__ieee754_sqrt+0x14e>
 80079e2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80079e6:	07dd      	lsls	r5, r3, #31
 80079e8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80079ec:	bf48      	it	mi
 80079ee:	0fc8      	lsrmi	r0, r1, #31
 80079f0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80079f4:	bf44      	itt	mi
 80079f6:	0049      	lslmi	r1, r1, #1
 80079f8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80079fc:	2500      	movs	r5, #0
 80079fe:	1058      	asrs	r0, r3, #1
 8007a00:	0fcb      	lsrs	r3, r1, #31
 8007a02:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8007a06:	0049      	lsls	r1, r1, #1
 8007a08:	2316      	movs	r3, #22
 8007a0a:	462c      	mov	r4, r5
 8007a0c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8007a10:	19a7      	adds	r7, r4, r6
 8007a12:	4297      	cmp	r7, r2
 8007a14:	bfde      	ittt	le
 8007a16:	19bc      	addle	r4, r7, r6
 8007a18:	1bd2      	suble	r2, r2, r7
 8007a1a:	19ad      	addle	r5, r5, r6
 8007a1c:	0fcf      	lsrs	r7, r1, #31
 8007a1e:	3b01      	subs	r3, #1
 8007a20:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8007a24:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007a28:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007a2c:	d1f0      	bne.n	8007a10 <__ieee754_sqrt+0x94>
 8007a2e:	f04f 0c20 	mov.w	ip, #32
 8007a32:	469e      	mov	lr, r3
 8007a34:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007a38:	42a2      	cmp	r2, r4
 8007a3a:	eb06 070e 	add.w	r7, r6, lr
 8007a3e:	dc02      	bgt.n	8007a46 <__ieee754_sqrt+0xca>
 8007a40:	d112      	bne.n	8007a68 <__ieee754_sqrt+0xec>
 8007a42:	428f      	cmp	r7, r1
 8007a44:	d810      	bhi.n	8007a68 <__ieee754_sqrt+0xec>
 8007a46:	2f00      	cmp	r7, #0
 8007a48:	eb07 0e06 	add.w	lr, r7, r6
 8007a4c:	da42      	bge.n	8007ad4 <__ieee754_sqrt+0x158>
 8007a4e:	f1be 0f00 	cmp.w	lr, #0
 8007a52:	db3f      	blt.n	8007ad4 <__ieee754_sqrt+0x158>
 8007a54:	f104 0801 	add.w	r8, r4, #1
 8007a58:	1b12      	subs	r2, r2, r4
 8007a5a:	428f      	cmp	r7, r1
 8007a5c:	bf88      	it	hi
 8007a5e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007a62:	1bc9      	subs	r1, r1, r7
 8007a64:	4433      	add	r3, r6
 8007a66:	4644      	mov	r4, r8
 8007a68:	0052      	lsls	r2, r2, #1
 8007a6a:	f1bc 0c01 	subs.w	ip, ip, #1
 8007a6e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8007a72:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007a76:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007a7a:	d1dd      	bne.n	8007a38 <__ieee754_sqrt+0xbc>
 8007a7c:	430a      	orrs	r2, r1
 8007a7e:	d006      	beq.n	8007a8e <__ieee754_sqrt+0x112>
 8007a80:	1c5c      	adds	r4, r3, #1
 8007a82:	bf13      	iteet	ne
 8007a84:	3301      	addne	r3, #1
 8007a86:	3501      	addeq	r5, #1
 8007a88:	4663      	moveq	r3, ip
 8007a8a:	f023 0301 	bicne.w	r3, r3, #1
 8007a8e:	106a      	asrs	r2, r5, #1
 8007a90:	085b      	lsrs	r3, r3, #1
 8007a92:	07e9      	lsls	r1, r5, #31
 8007a94:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007a98:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8007a9c:	bf48      	it	mi
 8007a9e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8007aa2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8007aa6:	461c      	mov	r4, r3
 8007aa8:	e780      	b.n	80079ac <__ieee754_sqrt+0x30>
 8007aaa:	0aca      	lsrs	r2, r1, #11
 8007aac:	3815      	subs	r0, #21
 8007aae:	0549      	lsls	r1, r1, #21
 8007ab0:	2a00      	cmp	r2, #0
 8007ab2:	d0fa      	beq.n	8007aaa <__ieee754_sqrt+0x12e>
 8007ab4:	02d6      	lsls	r6, r2, #11
 8007ab6:	d50a      	bpl.n	8007ace <__ieee754_sqrt+0x152>
 8007ab8:	f1c3 0420 	rsb	r4, r3, #32
 8007abc:	fa21 f404 	lsr.w	r4, r1, r4
 8007ac0:	1e5d      	subs	r5, r3, #1
 8007ac2:	4099      	lsls	r1, r3
 8007ac4:	4322      	orrs	r2, r4
 8007ac6:	1b43      	subs	r3, r0, r5
 8007ac8:	e78b      	b.n	80079e2 <__ieee754_sqrt+0x66>
 8007aca:	4618      	mov	r0, r3
 8007acc:	e7f0      	b.n	8007ab0 <__ieee754_sqrt+0x134>
 8007ace:	0052      	lsls	r2, r2, #1
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	e7ef      	b.n	8007ab4 <__ieee754_sqrt+0x138>
 8007ad4:	46a0      	mov	r8, r4
 8007ad6:	e7bf      	b.n	8007a58 <__ieee754_sqrt+0xdc>
 8007ad8:	7ff00000 	.word	0x7ff00000

08007adc <fabs>:
 8007adc:	ec51 0b10 	vmov	r0, r1, d0
 8007ae0:	ee10 2a10 	vmov	r2, s0
 8007ae4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007ae8:	ec43 2b10 	vmov	d0, r2, r3
 8007aec:	4770      	bx	lr

08007aee <finite>:
 8007aee:	ee10 3a90 	vmov	r3, s1
 8007af2:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8007af6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007afa:	0fc0      	lsrs	r0, r0, #31
 8007afc:	4770      	bx	lr

08007afe <matherr>:
 8007afe:	2000      	movs	r0, #0
 8007b00:	4770      	bx	lr
 8007b02:	0000      	movs	r0, r0
 8007b04:	0000      	movs	r0, r0
	...

08007b08 <nan>:
 8007b08:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007b10 <nan+0x8>
 8007b0c:	4770      	bx	lr
 8007b0e:	bf00      	nop
 8007b10:	00000000 	.word	0x00000000
 8007b14:	7ff80000 	.word	0x7ff80000

08007b18 <rint>:
 8007b18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b1a:	ec51 0b10 	vmov	r0, r1, d0
 8007b1e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007b22:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8007b26:	2e13      	cmp	r6, #19
 8007b28:	460b      	mov	r3, r1
 8007b2a:	ee10 4a10 	vmov	r4, s0
 8007b2e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8007b32:	dc56      	bgt.n	8007be2 <rint+0xca>
 8007b34:	2e00      	cmp	r6, #0
 8007b36:	da2b      	bge.n	8007b90 <rint+0x78>
 8007b38:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8007b3c:	4302      	orrs	r2, r0
 8007b3e:	d023      	beq.n	8007b88 <rint+0x70>
 8007b40:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8007b44:	4302      	orrs	r2, r0
 8007b46:	4254      	negs	r4, r2
 8007b48:	4314      	orrs	r4, r2
 8007b4a:	0c4b      	lsrs	r3, r1, #17
 8007b4c:	0b24      	lsrs	r4, r4, #12
 8007b4e:	045b      	lsls	r3, r3, #17
 8007b50:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8007b54:	ea44 0103 	orr.w	r1, r4, r3
 8007b58:	460b      	mov	r3, r1
 8007b5a:	492f      	ldr	r1, [pc, #188]	; (8007c18 <rint+0x100>)
 8007b5c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8007b60:	e9d1 6700 	ldrd	r6, r7, [r1]
 8007b64:	4602      	mov	r2, r0
 8007b66:	4639      	mov	r1, r7
 8007b68:	4630      	mov	r0, r6
 8007b6a:	f7f8 fb87 	bl	800027c <__adddf3>
 8007b6e:	e9cd 0100 	strd	r0, r1, [sp]
 8007b72:	463b      	mov	r3, r7
 8007b74:	4632      	mov	r2, r6
 8007b76:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b7a:	f7f8 fb7d 	bl	8000278 <__aeabi_dsub>
 8007b7e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007b82:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8007b86:	4639      	mov	r1, r7
 8007b88:	ec41 0b10 	vmov	d0, r0, r1
 8007b8c:	b003      	add	sp, #12
 8007b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b90:	4a22      	ldr	r2, [pc, #136]	; (8007c1c <rint+0x104>)
 8007b92:	4132      	asrs	r2, r6
 8007b94:	ea01 0702 	and.w	r7, r1, r2
 8007b98:	4307      	orrs	r7, r0
 8007b9a:	d0f5      	beq.n	8007b88 <rint+0x70>
 8007b9c:	0852      	lsrs	r2, r2, #1
 8007b9e:	4011      	ands	r1, r2
 8007ba0:	430c      	orrs	r4, r1
 8007ba2:	d00b      	beq.n	8007bbc <rint+0xa4>
 8007ba4:	ea23 0202 	bic.w	r2, r3, r2
 8007ba8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007bac:	2e13      	cmp	r6, #19
 8007bae:	fa43 f306 	asr.w	r3, r3, r6
 8007bb2:	bf0c      	ite	eq
 8007bb4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8007bb8:	2400      	movne	r4, #0
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	4916      	ldr	r1, [pc, #88]	; (8007c18 <rint+0x100>)
 8007bbe:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8007bc2:	4622      	mov	r2, r4
 8007bc4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007bc8:	4620      	mov	r0, r4
 8007bca:	4629      	mov	r1, r5
 8007bcc:	f7f8 fb56 	bl	800027c <__adddf3>
 8007bd0:	e9cd 0100 	strd	r0, r1, [sp]
 8007bd4:	4622      	mov	r2, r4
 8007bd6:	462b      	mov	r3, r5
 8007bd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007bdc:	f7f8 fb4c 	bl	8000278 <__aeabi_dsub>
 8007be0:	e7d2      	b.n	8007b88 <rint+0x70>
 8007be2:	2e33      	cmp	r6, #51	; 0x33
 8007be4:	dd07      	ble.n	8007bf6 <rint+0xde>
 8007be6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007bea:	d1cd      	bne.n	8007b88 <rint+0x70>
 8007bec:	ee10 2a10 	vmov	r2, s0
 8007bf0:	f7f8 fb44 	bl	800027c <__adddf3>
 8007bf4:	e7c8      	b.n	8007b88 <rint+0x70>
 8007bf6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8007bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8007bfe:	40f2      	lsrs	r2, r6
 8007c00:	4210      	tst	r0, r2
 8007c02:	d0c1      	beq.n	8007b88 <rint+0x70>
 8007c04:	0852      	lsrs	r2, r2, #1
 8007c06:	4210      	tst	r0, r2
 8007c08:	bf1f      	itttt	ne
 8007c0a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8007c0e:	ea20 0202 	bicne.w	r2, r0, r2
 8007c12:	4134      	asrne	r4, r6
 8007c14:	4314      	orrne	r4, r2
 8007c16:	e7d1      	b.n	8007bbc <rint+0xa4>
 8007c18:	08007e30 	.word	0x08007e30
 8007c1c:	000fffff 	.word	0x000fffff

08007c20 <scalbn>:
 8007c20:	b570      	push	{r4, r5, r6, lr}
 8007c22:	ec55 4b10 	vmov	r4, r5, d0
 8007c26:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007c2a:	4606      	mov	r6, r0
 8007c2c:	462b      	mov	r3, r5
 8007c2e:	b9aa      	cbnz	r2, 8007c5c <scalbn+0x3c>
 8007c30:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007c34:	4323      	orrs	r3, r4
 8007c36:	d03b      	beq.n	8007cb0 <scalbn+0x90>
 8007c38:	4b31      	ldr	r3, [pc, #196]	; (8007d00 <scalbn+0xe0>)
 8007c3a:	4629      	mov	r1, r5
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	ee10 0a10 	vmov	r0, s0
 8007c42:	f7f8 fcd1 	bl	80005e8 <__aeabi_dmul>
 8007c46:	4b2f      	ldr	r3, [pc, #188]	; (8007d04 <scalbn+0xe4>)
 8007c48:	429e      	cmp	r6, r3
 8007c4a:	4604      	mov	r4, r0
 8007c4c:	460d      	mov	r5, r1
 8007c4e:	da12      	bge.n	8007c76 <scalbn+0x56>
 8007c50:	a327      	add	r3, pc, #156	; (adr r3, 8007cf0 <scalbn+0xd0>)
 8007c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c56:	f7f8 fcc7 	bl	80005e8 <__aeabi_dmul>
 8007c5a:	e009      	b.n	8007c70 <scalbn+0x50>
 8007c5c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007c60:	428a      	cmp	r2, r1
 8007c62:	d10c      	bne.n	8007c7e <scalbn+0x5e>
 8007c64:	ee10 2a10 	vmov	r2, s0
 8007c68:	4620      	mov	r0, r4
 8007c6a:	4629      	mov	r1, r5
 8007c6c:	f7f8 fb06 	bl	800027c <__adddf3>
 8007c70:	4604      	mov	r4, r0
 8007c72:	460d      	mov	r5, r1
 8007c74:	e01c      	b.n	8007cb0 <scalbn+0x90>
 8007c76:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	3a36      	subs	r2, #54	; 0x36
 8007c7e:	4432      	add	r2, r6
 8007c80:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007c84:	428a      	cmp	r2, r1
 8007c86:	dd0b      	ble.n	8007ca0 <scalbn+0x80>
 8007c88:	ec45 4b11 	vmov	d1, r4, r5
 8007c8c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8007cf8 <scalbn+0xd8>
 8007c90:	f000 f83c 	bl	8007d0c <copysign>
 8007c94:	a318      	add	r3, pc, #96	; (adr r3, 8007cf8 <scalbn+0xd8>)
 8007c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9a:	ec51 0b10 	vmov	r0, r1, d0
 8007c9e:	e7da      	b.n	8007c56 <scalbn+0x36>
 8007ca0:	2a00      	cmp	r2, #0
 8007ca2:	dd08      	ble.n	8007cb6 <scalbn+0x96>
 8007ca4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007ca8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007cac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007cb0:	ec45 4b10 	vmov	d0, r4, r5
 8007cb4:	bd70      	pop	{r4, r5, r6, pc}
 8007cb6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007cba:	da0d      	bge.n	8007cd8 <scalbn+0xb8>
 8007cbc:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007cc0:	429e      	cmp	r6, r3
 8007cc2:	ec45 4b11 	vmov	d1, r4, r5
 8007cc6:	dce1      	bgt.n	8007c8c <scalbn+0x6c>
 8007cc8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8007cf0 <scalbn+0xd0>
 8007ccc:	f000 f81e 	bl	8007d0c <copysign>
 8007cd0:	a307      	add	r3, pc, #28	; (adr r3, 8007cf0 <scalbn+0xd0>)
 8007cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd6:	e7e0      	b.n	8007c9a <scalbn+0x7a>
 8007cd8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007cdc:	3236      	adds	r2, #54	; 0x36
 8007cde:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007ce2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007ce6:	4620      	mov	r0, r4
 8007ce8:	4629      	mov	r1, r5
 8007cea:	2200      	movs	r2, #0
 8007cec:	4b06      	ldr	r3, [pc, #24]	; (8007d08 <scalbn+0xe8>)
 8007cee:	e7b2      	b.n	8007c56 <scalbn+0x36>
 8007cf0:	c2f8f359 	.word	0xc2f8f359
 8007cf4:	01a56e1f 	.word	0x01a56e1f
 8007cf8:	8800759c 	.word	0x8800759c
 8007cfc:	7e37e43c 	.word	0x7e37e43c
 8007d00:	43500000 	.word	0x43500000
 8007d04:	ffff3cb0 	.word	0xffff3cb0
 8007d08:	3c900000 	.word	0x3c900000

08007d0c <copysign>:
 8007d0c:	ec51 0b10 	vmov	r0, r1, d0
 8007d10:	ee11 0a90 	vmov	r0, s3
 8007d14:	ee10 2a10 	vmov	r2, s0
 8007d18:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007d1c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8007d20:	ea41 0300 	orr.w	r3, r1, r0
 8007d24:	ec43 2b10 	vmov	d0, r2, r3
 8007d28:	4770      	bx	lr
	...

08007d2c <_init>:
 8007d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d2e:	bf00      	nop
 8007d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d32:	bc08      	pop	{r3}
 8007d34:	469e      	mov	lr, r3
 8007d36:	4770      	bx	lr

08007d38 <_fini>:
 8007d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d3a:	bf00      	nop
 8007d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d3e:	bc08      	pop	{r3}
 8007d40:	469e      	mov	lr, r3
 8007d42:	4770      	bx	lr
