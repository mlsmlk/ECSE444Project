
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006008  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08006198  08006198  00016198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006234  08006234  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  08006234  08006234  00016234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800623c  0800623c  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800623c  0800623c  0001623c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006240  08006240  00016240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08006244  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000037c  200000a4  080062e8  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000420  080062e8  00020420  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000189d3  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ce3  00000000  00000000  00038aa7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015d8  00000000  00000000  0003b790  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001460  00000000  00000000  0003cd68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029144  00000000  00000000  0003e1c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011a2e  00000000  00000000  0006730c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fc18f  00000000  00000000  00078d3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00174ec9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f7c  00000000  00000000  00174f44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a4 	.word	0x200000a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006180 	.word	0x08006180

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a8 	.word	0x200000a8
 80001cc:	08006180 	.word	0x08006180

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000576:	2300      	movs	r3, #0
 8000578:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800057a:	2003      	movs	r0, #3
 800057c:	f000 f8ff 	bl	800077e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000580:	2000      	movs	r0, #0
 8000582:	f005 f897 	bl	80056b4 <HAL_InitTick>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d002      	beq.n	8000592 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800058c:	2301      	movs	r3, #1
 800058e:	71fb      	strb	r3, [r7, #7]
 8000590:	e001      	b.n	8000596 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000592:	f004 feeb 	bl	800536c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000596:	79fb      	ldrb	r3, [r7, #7]
}
 8000598:	4618      	mov	r0, r3
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}

080005a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <HAL_IncTick+0x20>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	461a      	mov	r2, r3
 80005aa:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <HAL_IncTick+0x24>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4413      	add	r3, r2
 80005b0:	4a04      	ldr	r2, [pc, #16]	; (80005c4 <HAL_IncTick+0x24>)
 80005b2:	6013      	str	r3, [r2, #0]
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20000004 	.word	0x20000004
 80005c4:	200000d0 	.word	0x200000d0

080005c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  return uwTick;
 80005cc:	4b03      	ldr	r3, [pc, #12]	; (80005dc <HAL_GetTick+0x14>)
 80005ce:	681b      	ldr	r3, [r3, #0]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	200000d0 	.word	0x200000d0

080005e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005e8:	f7ff ffee 	bl	80005c8 <HAL_GetTick>
 80005ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005f8:	d005      	beq.n	8000606 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80005fa:	4b09      	ldr	r3, [pc, #36]	; (8000620 <HAL_Delay+0x40>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	461a      	mov	r2, r3
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	4413      	add	r3, r2
 8000604:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000606:	bf00      	nop
 8000608:	f7ff ffde 	bl	80005c8 <HAL_GetTick>
 800060c:	4602      	mov	r2, r0
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	1ad3      	subs	r3, r2, r3
 8000612:	68fa      	ldr	r2, [r7, #12]
 8000614:	429a      	cmp	r2, r3
 8000616:	d8f7      	bhi.n	8000608 <HAL_Delay+0x28>
  {
  }
}
 8000618:	bf00      	nop
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000004 	.word	0x20000004

08000624 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	f003 0307 	and.w	r3, r3, #7
 8000632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <__NVIC_SetPriorityGrouping+0x44>)
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800063a:	68ba      	ldr	r2, [r7, #8]
 800063c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000640:	4013      	ands	r3, r2
 8000642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800064c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000656:	4a04      	ldr	r2, [pc, #16]	; (8000668 <__NVIC_SetPriorityGrouping+0x44>)
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	60d3      	str	r3, [r2, #12]
}
 800065c:	bf00      	nop
 800065e:	3714      	adds	r7, #20
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000670:	4b04      	ldr	r3, [pc, #16]	; (8000684 <__NVIC_GetPriorityGrouping+0x18>)
 8000672:	68db      	ldr	r3, [r3, #12]
 8000674:	0a1b      	lsrs	r3, r3, #8
 8000676:	f003 0307 	and.w	r3, r3, #7
}
 800067a:	4618      	mov	r0, r3
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000696:	2b00      	cmp	r3, #0
 8000698:	db0b      	blt.n	80006b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	f003 021f 	and.w	r2, r3, #31
 80006a0:	4907      	ldr	r1, [pc, #28]	; (80006c0 <__NVIC_EnableIRQ+0x38>)
 80006a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a6:	095b      	lsrs	r3, r3, #5
 80006a8:	2001      	movs	r0, #1
 80006aa:	fa00 f202 	lsl.w	r2, r0, r2
 80006ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80006b2:	bf00      	nop
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	e000e100 	.word	0xe000e100

080006c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	6039      	str	r1, [r7, #0]
 80006ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	db0a      	blt.n	80006ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	490c      	ldr	r1, [pc, #48]	; (8000710 <__NVIC_SetPriority+0x4c>)
 80006de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e2:	0112      	lsls	r2, r2, #4
 80006e4:	b2d2      	uxtb	r2, r2
 80006e6:	440b      	add	r3, r1
 80006e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006ec:	e00a      	b.n	8000704 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	b2da      	uxtb	r2, r3
 80006f2:	4908      	ldr	r1, [pc, #32]	; (8000714 <__NVIC_SetPriority+0x50>)
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	f003 030f 	and.w	r3, r3, #15
 80006fa:	3b04      	subs	r3, #4
 80006fc:	0112      	lsls	r2, r2, #4
 80006fe:	b2d2      	uxtb	r2, r2
 8000700:	440b      	add	r3, r1
 8000702:	761a      	strb	r2, [r3, #24]
}
 8000704:	bf00      	nop
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr
 8000710:	e000e100 	.word	0xe000e100
 8000714:	e000ed00 	.word	0xe000ed00

08000718 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000718:	b480      	push	{r7}
 800071a:	b089      	sub	sp, #36	; 0x24
 800071c:	af00      	add	r7, sp, #0
 800071e:	60f8      	str	r0, [r7, #12]
 8000720:	60b9      	str	r1, [r7, #8]
 8000722:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	f003 0307 	and.w	r3, r3, #7
 800072a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800072c:	69fb      	ldr	r3, [r7, #28]
 800072e:	f1c3 0307 	rsb	r3, r3, #7
 8000732:	2b04      	cmp	r3, #4
 8000734:	bf28      	it	cs
 8000736:	2304      	movcs	r3, #4
 8000738:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800073a:	69fb      	ldr	r3, [r7, #28]
 800073c:	3304      	adds	r3, #4
 800073e:	2b06      	cmp	r3, #6
 8000740:	d902      	bls.n	8000748 <NVIC_EncodePriority+0x30>
 8000742:	69fb      	ldr	r3, [r7, #28]
 8000744:	3b03      	subs	r3, #3
 8000746:	e000      	b.n	800074a <NVIC_EncodePriority+0x32>
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800074c:	f04f 32ff 	mov.w	r2, #4294967295
 8000750:	69bb      	ldr	r3, [r7, #24]
 8000752:	fa02 f303 	lsl.w	r3, r2, r3
 8000756:	43da      	mvns	r2, r3
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	401a      	ands	r2, r3
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000760:	f04f 31ff 	mov.w	r1, #4294967295
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	fa01 f303 	lsl.w	r3, r1, r3
 800076a:	43d9      	mvns	r1, r3
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000770:	4313      	orrs	r3, r2
         );
}
 8000772:	4618      	mov	r0, r3
 8000774:	3724      	adds	r7, #36	; 0x24
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr

0800077e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800077e:	b580      	push	{r7, lr}
 8000780:	b082      	sub	sp, #8
 8000782:	af00      	add	r7, sp, #0
 8000784:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f7ff ff4c 	bl	8000624 <__NVIC_SetPriorityGrouping>
}
 800078c:	bf00      	nop
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}

08000794 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	60b9      	str	r1, [r7, #8]
 800079e:	607a      	str	r2, [r7, #4]
 80007a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007a6:	f7ff ff61 	bl	800066c <__NVIC_GetPriorityGrouping>
 80007aa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ac:	687a      	ldr	r2, [r7, #4]
 80007ae:	68b9      	ldr	r1, [r7, #8]
 80007b0:	6978      	ldr	r0, [r7, #20]
 80007b2:	f7ff ffb1 	bl	8000718 <NVIC_EncodePriority>
 80007b6:	4602      	mov	r2, r0
 80007b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007bc:	4611      	mov	r1, r2
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff ff80 	bl	80006c4 <__NVIC_SetPriority>
}
 80007c4:	bf00      	nop
 80007c6:	3718      	adds	r7, #24
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff ff54 	bl	8000688 <__NVIC_EnableIRQ>
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d101      	bne.n	80007fa <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80007f6:	2301      	movs	r3, #1
 80007f8:	e014      	b.n	8000824 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	791b      	ldrb	r3, [r3, #4]
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	2b00      	cmp	r3, #0
 8000802:	d105      	bne.n	8000810 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2200      	movs	r2, #0
 8000808:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f004 fdd2 	bl	80053b4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2202      	movs	r2, #2
 8000814:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2201      	movs	r2, #1
 8000820:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000822:	2300      	movs	r3, #0
}
 8000824:	4618      	mov	r0, r3
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}

0800082c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b088      	sub	sp, #32
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8000838:	2300      	movs	r3, #0
 800083a:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	795b      	ldrb	r3, [r3, #5]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d101      	bne.n	8000848 <HAL_DAC_ConfigChannel+0x1c>
 8000844:	2302      	movs	r3, #2
 8000846:	e107      	b.n	8000a58 <HAL_DAC_ConfigChannel+0x22c>
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	2201      	movs	r2, #1
 800084c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	2202      	movs	r2, #2
 8000852:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2b04      	cmp	r3, #4
 800085a:	d174      	bne.n	8000946 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800085c:	f7ff feb4 	bl	80005c8 <HAL_GetTick>
 8000860:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d134      	bne.n	80008d2 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000868:	e011      	b.n	800088e <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800086a:	f7ff fead 	bl	80005c8 <HAL_GetTick>
 800086e:	4602      	mov	r2, r0
 8000870:	69fb      	ldr	r3, [r7, #28]
 8000872:	1ad3      	subs	r3, r2, r3
 8000874:	2b01      	cmp	r3, #1
 8000876:	d90a      	bls.n	800088e <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	691b      	ldr	r3, [r3, #16]
 800087c:	f043 0208 	orr.w	r2, r3, #8
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	2203      	movs	r2, #3
 8000888:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800088a:	2303      	movs	r3, #3
 800088c:	e0e4      	b.n	8000a58 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000894:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000898:	2b00      	cmp	r3, #0
 800089a:	d1e6      	bne.n	800086a <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800089c:	2001      	movs	r0, #1
 800089e:	f7ff fe9f 	bl	80005e0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	68ba      	ldr	r2, [r7, #8]
 80008a8:	6992      	ldr	r2, [r2, #24]
 80008aa:	641a      	str	r2, [r3, #64]	; 0x40
 80008ac:	e01e      	b.n	80008ec <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80008ae:	f7ff fe8b 	bl	80005c8 <HAL_GetTick>
 80008b2:	4602      	mov	r2, r0
 80008b4:	69fb      	ldr	r3, [r7, #28]
 80008b6:	1ad3      	subs	r3, r2, r3
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d90a      	bls.n	80008d2 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	691b      	ldr	r3, [r3, #16]
 80008c0:	f043 0208 	orr.w	r2, r3, #8
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	2203      	movs	r2, #3
 80008cc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80008ce:	2303      	movs	r3, #3
 80008d0:	e0c2      	b.n	8000a58 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008d8:	2b00      	cmp	r3, #0
 80008da:	dbe8      	blt.n	80008ae <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80008dc:	2001      	movs	r0, #1
 80008de:	f7ff fe7f 	bl	80005e0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	68ba      	ldr	r2, [r7, #8]
 80008e8:	6992      	ldr	r2, [r2, #24]
 80008ea:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	f003 0310 	and.w	r3, r3, #16
 80008f8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80008fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000900:	43db      	mvns	r3, r3
 8000902:	ea02 0103 	and.w	r1, r2, r3
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	69da      	ldr	r2, [r3, #28]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	f003 0310 	and.w	r3, r3, #16
 8000910:	409a      	lsls	r2, r3
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	430a      	orrs	r2, r1
 8000918:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	f003 0310 	and.w	r3, r3, #16
 8000926:	21ff      	movs	r1, #255	; 0xff
 8000928:	fa01 f303 	lsl.w	r3, r1, r3
 800092c:	43db      	mvns	r3, r3
 800092e:	ea02 0103 	and.w	r1, r2, r3
 8000932:	68bb      	ldr	r3, [r7, #8]
 8000934:	6a1a      	ldr	r2, [r3, #32]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	f003 0310 	and.w	r3, r3, #16
 800093c:	409a      	lsls	r2, r3
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	430a      	orrs	r2, r1
 8000944:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	691b      	ldr	r3, [r3, #16]
 800094a:	2b01      	cmp	r3, #1
 800094c:	d11d      	bne.n	800098a <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000954:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	f003 0310 	and.w	r3, r3, #16
 800095c:	221f      	movs	r2, #31
 800095e:	fa02 f303 	lsl.w	r3, r2, r3
 8000962:	43db      	mvns	r3, r3
 8000964:	69ba      	ldr	r2, [r7, #24]
 8000966:	4013      	ands	r3, r2
 8000968:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	695b      	ldr	r3, [r3, #20]
 800096e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	f003 0310 	and.w	r3, r3, #16
 8000976:	697a      	ldr	r2, [r7, #20]
 8000978:	fa02 f303 	lsl.w	r3, r2, r3
 800097c:	69ba      	ldr	r2, [r7, #24]
 800097e:	4313      	orrs	r3, r2
 8000980:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	69ba      	ldr	r2, [r7, #24]
 8000988:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000990:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	f003 0310 	and.w	r3, r3, #16
 8000998:	2207      	movs	r2, #7
 800099a:	fa02 f303 	lsl.w	r3, r2, r3
 800099e:	43db      	mvns	r3, r3
 80009a0:	69ba      	ldr	r2, [r7, #24]
 80009a2:	4013      	ands	r3, r2
 80009a4:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	689b      	ldr	r3, [r3, #8]
 80009ae:	431a      	orrs	r2, r3
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f003 0310 	and.w	r3, r3, #16
 80009be:	697a      	ldr	r2, [r7, #20]
 80009c0:	fa02 f303 	lsl.w	r3, r2, r3
 80009c4:	69ba      	ldr	r2, [r7, #24]
 80009c6:	4313      	orrs	r3, r2
 80009c8:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	69ba      	ldr	r2, [r7, #24]
 80009d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	6819      	ldr	r1, [r3, #0]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	f003 0310 	and.w	r3, r3, #16
 80009de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009e2:	fa02 f303 	lsl.w	r3, r2, r3
 80009e6:	43da      	mvns	r2, r3
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	400a      	ands	r2, r1
 80009ee:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	f003 0310 	and.w	r3, r3, #16
 80009fe:	f640 72fc 	movw	r2, #4092	; 0xffc
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	43db      	mvns	r3, r3
 8000a08:	69ba      	ldr	r2, [r7, #24]
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f003 0310 	and.w	r3, r3, #16
 8000a1a:	697a      	ldr	r2, [r7, #20]
 8000a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a20:	69ba      	ldr	r2, [r7, #24]
 8000a22:	4313      	orrs	r3, r2
 8000a24:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	69ba      	ldr	r2, [r7, #24]
 8000a2c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	6819      	ldr	r1, [r3, #0]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f003 0310 	and.w	r3, r3, #16
 8000a3a:	22c0      	movs	r2, #192	; 0xc0
 8000a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a40:	43da      	mvns	r2, r3
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	400a      	ands	r2, r1
 8000a48:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	2200      	movs	r2, #0
 8000a54:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000a56:	2300      	movs	r3, #0
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3720      	adds	r7, #32
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b085      	sub	sp, #20
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d101      	bne.n	8000a72 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	e098      	b.n	8000ba4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	461a      	mov	r2, r3
 8000a78:	4b4d      	ldr	r3, [pc, #308]	; (8000bb0 <HAL_DMA_Init+0x150>)
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	d80f      	bhi.n	8000a9e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	461a      	mov	r2, r3
 8000a84:	4b4b      	ldr	r3, [pc, #300]	; (8000bb4 <HAL_DMA_Init+0x154>)
 8000a86:	4413      	add	r3, r2
 8000a88:	4a4b      	ldr	r2, [pc, #300]	; (8000bb8 <HAL_DMA_Init+0x158>)
 8000a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a8e:	091b      	lsrs	r3, r3, #4
 8000a90:	009a      	lsls	r2, r3, #2
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4a48      	ldr	r2, [pc, #288]	; (8000bbc <HAL_DMA_Init+0x15c>)
 8000a9a:	641a      	str	r2, [r3, #64]	; 0x40
 8000a9c:	e00e      	b.n	8000abc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	4b46      	ldr	r3, [pc, #280]	; (8000bc0 <HAL_DMA_Init+0x160>)
 8000aa6:	4413      	add	r3, r2
 8000aa8:	4a43      	ldr	r2, [pc, #268]	; (8000bb8 <HAL_DMA_Init+0x158>)
 8000aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8000aae:	091b      	lsrs	r3, r3, #4
 8000ab0:	009a      	lsls	r2, r3, #2
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4a42      	ldr	r2, [pc, #264]	; (8000bc4 <HAL_DMA_Init+0x164>)
 8000aba:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2202      	movs	r2, #2
 8000ac0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000ad6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000ae0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	691b      	ldr	r3, [r3, #16]
 8000ae6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000aec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	699b      	ldr	r3, [r3, #24]
 8000af2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000af8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6a1b      	ldr	r3, [r3, #32]
 8000afe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000b00:	68fa      	ldr	r2, [r7, #12]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	68fa      	ldr	r2, [r7, #12]
 8000b0c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	689b      	ldr	r3, [r3, #8]
 8000b12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000b16:	d039      	beq.n	8000b8c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1c:	4a27      	ldr	r2, [pc, #156]	; (8000bbc <HAL_DMA_Init+0x15c>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d11a      	bne.n	8000b58 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000b22:	4b29      	ldr	r3, [pc, #164]	; (8000bc8 <HAL_DMA_Init+0x168>)
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2a:	f003 031c 	and.w	r3, r3, #28
 8000b2e:	210f      	movs	r1, #15
 8000b30:	fa01 f303 	lsl.w	r3, r1, r3
 8000b34:	43db      	mvns	r3, r3
 8000b36:	4924      	ldr	r1, [pc, #144]	; (8000bc8 <HAL_DMA_Init+0x168>)
 8000b38:	4013      	ands	r3, r2
 8000b3a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000b3c:	4b22      	ldr	r3, [pc, #136]	; (8000bc8 <HAL_DMA_Init+0x168>)
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6859      	ldr	r1, [r3, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b48:	f003 031c 	and.w	r3, r3, #28
 8000b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b50:	491d      	ldr	r1, [pc, #116]	; (8000bc8 <HAL_DMA_Init+0x168>)
 8000b52:	4313      	orrs	r3, r2
 8000b54:	600b      	str	r3, [r1, #0]
 8000b56:	e019      	b.n	8000b8c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000b58:	4b1c      	ldr	r3, [pc, #112]	; (8000bcc <HAL_DMA_Init+0x16c>)
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b60:	f003 031c 	and.w	r3, r3, #28
 8000b64:	210f      	movs	r1, #15
 8000b66:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6a:	43db      	mvns	r3, r3
 8000b6c:	4917      	ldr	r1, [pc, #92]	; (8000bcc <HAL_DMA_Init+0x16c>)
 8000b6e:	4013      	ands	r3, r2
 8000b70:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000b72:	4b16      	ldr	r3, [pc, #88]	; (8000bcc <HAL_DMA_Init+0x16c>)
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6859      	ldr	r1, [r3, #4]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7e:	f003 031c 	and.w	r3, r3, #28
 8000b82:	fa01 f303 	lsl.w	r3, r1, r3
 8000b86:	4911      	ldr	r1, [pc, #68]	; (8000bcc <HAL_DMA_Init+0x16c>)
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2200      	movs	r2, #0
 8000b90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2201      	movs	r2, #1
 8000b96:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000ba2:	2300      	movs	r3, #0
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3714      	adds	r7, #20
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	40020407 	.word	0x40020407
 8000bb4:	bffdfff8 	.word	0xbffdfff8
 8000bb8:	cccccccd 	.word	0xcccccccd
 8000bbc:	40020000 	.word	0x40020000
 8000bc0:	bffdfbf8 	.word	0xbffdfbf8
 8000bc4:	40020400 	.word	0x40020400
 8000bc8:	400200a8 	.word	0x400200a8
 8000bcc:	400204a8 	.word	0x400204a8

08000bd0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bec:	f003 031c 	and.w	r3, r3, #28
 8000bf0:	2204      	movs	r2, #4
 8000bf2:	409a      	lsls	r2, r3
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d026      	beq.n	8000c4a <HAL_DMA_IRQHandler+0x7a>
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	f003 0304 	and.w	r3, r3, #4
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d021      	beq.n	8000c4a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f003 0320 	and.w	r3, r3, #32
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d107      	bne.n	8000c24 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f022 0204 	bic.w	r2, r2, #4
 8000c22:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c28:	f003 021c 	and.w	r2, r3, #28
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c30:	2104      	movs	r1, #4
 8000c32:	fa01 f202 	lsl.w	r2, r1, r2
 8000c36:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d071      	beq.n	8000d24 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8000c48:	e06c      	b.n	8000d24 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4e:	f003 031c 	and.w	r3, r3, #28
 8000c52:	2202      	movs	r2, #2
 8000c54:	409a      	lsls	r2, r3
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d02e      	beq.n	8000cbc <HAL_DMA_IRQHandler+0xec>
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	f003 0302 	and.w	r3, r3, #2
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d029      	beq.n	8000cbc <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f003 0320 	and.w	r3, r3, #32
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d10b      	bne.n	8000c8e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f022 020a 	bic.w	r2, r2, #10
 8000c84:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2201      	movs	r2, #1
 8000c8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c92:	f003 021c 	and.w	r2, r3, #28
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	2102      	movs	r1, #2
 8000c9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000ca0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d038      	beq.n	8000d24 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000cba:	e033      	b.n	8000d24 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc0:	f003 031c 	and.w	r3, r3, #28
 8000cc4:	2208      	movs	r2, #8
 8000cc6:	409a      	lsls	r2, r3
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d02a      	beq.n	8000d26 <HAL_DMA_IRQHandler+0x156>
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	f003 0308 	and.w	r3, r3, #8
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d025      	beq.n	8000d26 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f022 020e 	bic.w	r2, r2, #14
 8000ce8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cee:	f003 021c 	and.w	r2, r3, #28
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cfc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2201      	movs	r2, #1
 8000d02:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2201      	movs	r2, #1
 8000d08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d004      	beq.n	8000d26 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000d24:	bf00      	nop
 8000d26:	bf00      	nop
}
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b087      	sub	sp, #28
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d3e:	e17f      	b.n	8001040 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	2101      	movs	r1, #1
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	f000 8171 	beq.w	800103a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d00b      	beq.n	8000d78 <HAL_GPIO_Init+0x48>
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d007      	beq.n	8000d78 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d6c:	2b11      	cmp	r3, #17
 8000d6e:	d003      	beq.n	8000d78 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	2b12      	cmp	r3, #18
 8000d76:	d130      	bne.n	8000dda <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	2203      	movs	r2, #3
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	68da      	ldr	r2, [r3, #12]
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dae:	2201      	movs	r2, #1
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43db      	mvns	r3, r3
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	091b      	lsrs	r3, r3, #4
 8000dc4:	f003 0201 	and.w	r2, r3, #1
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f003 0303 	and.w	r3, r3, #3
 8000de2:	2b03      	cmp	r3, #3
 8000de4:	d118      	bne.n	8000e18 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000dec:	2201      	movs	r2, #1
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	08db      	lsrs	r3, r3, #3
 8000e02:	f003 0201 	and.w	r2, r3, #1
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	2203      	movs	r2, #3
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	689a      	ldr	r2, [r3, #8]
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d003      	beq.n	8000e58 <HAL_GPIO_Init+0x128>
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	2b12      	cmp	r3, #18
 8000e56:	d123      	bne.n	8000ea0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	08da      	lsrs	r2, r3, #3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3208      	adds	r2, #8
 8000e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e64:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	f003 0307 	and.w	r3, r3, #7
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	220f      	movs	r2, #15
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	691a      	ldr	r2, [r3, #16]
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	08da      	lsrs	r2, r3, #3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	3208      	adds	r2, #8
 8000e9a:	6939      	ldr	r1, [r7, #16]
 8000e9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	2203      	movs	r2, #3
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f003 0203 	and.w	r2, r3, #3
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	f000 80ac 	beq.w	800103a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee2:	4b5e      	ldr	r3, [pc, #376]	; (800105c <HAL_GPIO_Init+0x32c>)
 8000ee4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ee6:	4a5d      	ldr	r2, [pc, #372]	; (800105c <HAL_GPIO_Init+0x32c>)
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	6613      	str	r3, [r2, #96]	; 0x60
 8000eee:	4b5b      	ldr	r3, [pc, #364]	; (800105c <HAL_GPIO_Init+0x32c>)
 8000ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000efa:	4a59      	ldr	r2, [pc, #356]	; (8001060 <HAL_GPIO_Init+0x330>)
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	089b      	lsrs	r3, r3, #2
 8000f00:	3302      	adds	r3, #2
 8000f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f06:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	f003 0303 	and.w	r3, r3, #3
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	220f      	movs	r2, #15
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	43db      	mvns	r3, r3
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f24:	d025      	beq.n	8000f72 <HAL_GPIO_Init+0x242>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a4e      	ldr	r2, [pc, #312]	; (8001064 <HAL_GPIO_Init+0x334>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d01f      	beq.n	8000f6e <HAL_GPIO_Init+0x23e>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a4d      	ldr	r2, [pc, #308]	; (8001068 <HAL_GPIO_Init+0x338>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d019      	beq.n	8000f6a <HAL_GPIO_Init+0x23a>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a4c      	ldr	r2, [pc, #304]	; (800106c <HAL_GPIO_Init+0x33c>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d013      	beq.n	8000f66 <HAL_GPIO_Init+0x236>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a4b      	ldr	r2, [pc, #300]	; (8001070 <HAL_GPIO_Init+0x340>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d00d      	beq.n	8000f62 <HAL_GPIO_Init+0x232>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a4a      	ldr	r2, [pc, #296]	; (8001074 <HAL_GPIO_Init+0x344>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d007      	beq.n	8000f5e <HAL_GPIO_Init+0x22e>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a49      	ldr	r2, [pc, #292]	; (8001078 <HAL_GPIO_Init+0x348>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d101      	bne.n	8000f5a <HAL_GPIO_Init+0x22a>
 8000f56:	2306      	movs	r3, #6
 8000f58:	e00c      	b.n	8000f74 <HAL_GPIO_Init+0x244>
 8000f5a:	2307      	movs	r3, #7
 8000f5c:	e00a      	b.n	8000f74 <HAL_GPIO_Init+0x244>
 8000f5e:	2305      	movs	r3, #5
 8000f60:	e008      	b.n	8000f74 <HAL_GPIO_Init+0x244>
 8000f62:	2304      	movs	r3, #4
 8000f64:	e006      	b.n	8000f74 <HAL_GPIO_Init+0x244>
 8000f66:	2303      	movs	r3, #3
 8000f68:	e004      	b.n	8000f74 <HAL_GPIO_Init+0x244>
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	e002      	b.n	8000f74 <HAL_GPIO_Init+0x244>
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e000      	b.n	8000f74 <HAL_GPIO_Init+0x244>
 8000f72:	2300      	movs	r3, #0
 8000f74:	697a      	ldr	r2, [r7, #20]
 8000f76:	f002 0203 	and.w	r2, r2, #3
 8000f7a:	0092      	lsls	r2, r2, #2
 8000f7c:	4093      	lsls	r3, r2
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f84:	4936      	ldr	r1, [pc, #216]	; (8001060 <HAL_GPIO_Init+0x330>)
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	089b      	lsrs	r3, r3, #2
 8000f8a:	3302      	adds	r3, #2
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000f92:	4b3a      	ldr	r3, [pc, #232]	; (800107c <HAL_GPIO_Init+0x34c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d003      	beq.n	8000fb6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fb6:	4a31      	ldr	r2, [pc, #196]	; (800107c <HAL_GPIO_Init+0x34c>)
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000fbc:	4b2f      	ldr	r3, [pc, #188]	; (800107c <HAL_GPIO_Init+0x34c>)
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d003      	beq.n	8000fe0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fe0:	4a26      	ldr	r2, [pc, #152]	; (800107c <HAL_GPIO_Init+0x34c>)
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fe6:	4b25      	ldr	r3, [pc, #148]	; (800107c <HAL_GPIO_Init+0x34c>)
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d003      	beq.n	800100a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	4313      	orrs	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800100a:	4a1c      	ldr	r2, [pc, #112]	; (800107c <HAL_GPIO_Init+0x34c>)
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001010:	4b1a      	ldr	r3, [pc, #104]	; (800107c <HAL_GPIO_Init+0x34c>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	43db      	mvns	r3, r3
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4013      	ands	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d003      	beq.n	8001034 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	4313      	orrs	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001034:	4a11      	ldr	r2, [pc, #68]	; (800107c <HAL_GPIO_Init+0x34c>)
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	3301      	adds	r3, #1
 800103e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	fa22 f303 	lsr.w	r3, r2, r3
 800104a:	2b00      	cmp	r3, #0
 800104c:	f47f ae78 	bne.w	8000d40 <HAL_GPIO_Init+0x10>
  }
}
 8001050:	bf00      	nop
 8001052:	371c      	adds	r7, #28
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	40021000 	.word	0x40021000
 8001060:	40010000 	.word	0x40010000
 8001064:	48000400 	.word	0x48000400
 8001068:	48000800 	.word	0x48000800
 800106c:	48000c00 	.word	0x48000c00
 8001070:	48001000 	.word	0x48001000
 8001074:	48001400 	.word	0x48001400
 8001078:	48001800 	.word	0x48001800
 800107c:	40010400 	.word	0x40010400

08001080 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001080:	b480      	push	{r7}
 8001082:	b087      	sub	sp, #28
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800108e:	e0cd      	b.n	800122c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001090:	2201      	movs	r2, #1
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	683a      	ldr	r2, [r7, #0]
 800109a:	4013      	ands	r3, r2
 800109c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	f000 80c0 	beq.w	8001226 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80010a6:	4a68      	ldr	r2, [pc, #416]	; (8001248 <HAL_GPIO_DeInit+0x1c8>)
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	089b      	lsrs	r3, r3, #2
 80010ac:	3302      	adds	r3, #2
 80010ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	f003 0303 	and.w	r3, r3, #3
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	220f      	movs	r2, #15
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	68fa      	ldr	r2, [r7, #12]
 80010c4:	4013      	ands	r3, r2
 80010c6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010ce:	d025      	beq.n	800111c <HAL_GPIO_DeInit+0x9c>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4a5e      	ldr	r2, [pc, #376]	; (800124c <HAL_GPIO_DeInit+0x1cc>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d01f      	beq.n	8001118 <HAL_GPIO_DeInit+0x98>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4a5d      	ldr	r2, [pc, #372]	; (8001250 <HAL_GPIO_DeInit+0x1d0>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d019      	beq.n	8001114 <HAL_GPIO_DeInit+0x94>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a5c      	ldr	r2, [pc, #368]	; (8001254 <HAL_GPIO_DeInit+0x1d4>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d013      	beq.n	8001110 <HAL_GPIO_DeInit+0x90>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4a5b      	ldr	r2, [pc, #364]	; (8001258 <HAL_GPIO_DeInit+0x1d8>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d00d      	beq.n	800110c <HAL_GPIO_DeInit+0x8c>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4a5a      	ldr	r2, [pc, #360]	; (800125c <HAL_GPIO_DeInit+0x1dc>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d007      	beq.n	8001108 <HAL_GPIO_DeInit+0x88>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4a59      	ldr	r2, [pc, #356]	; (8001260 <HAL_GPIO_DeInit+0x1e0>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d101      	bne.n	8001104 <HAL_GPIO_DeInit+0x84>
 8001100:	2306      	movs	r3, #6
 8001102:	e00c      	b.n	800111e <HAL_GPIO_DeInit+0x9e>
 8001104:	2307      	movs	r3, #7
 8001106:	e00a      	b.n	800111e <HAL_GPIO_DeInit+0x9e>
 8001108:	2305      	movs	r3, #5
 800110a:	e008      	b.n	800111e <HAL_GPIO_DeInit+0x9e>
 800110c:	2304      	movs	r3, #4
 800110e:	e006      	b.n	800111e <HAL_GPIO_DeInit+0x9e>
 8001110:	2303      	movs	r3, #3
 8001112:	e004      	b.n	800111e <HAL_GPIO_DeInit+0x9e>
 8001114:	2302      	movs	r3, #2
 8001116:	e002      	b.n	800111e <HAL_GPIO_DeInit+0x9e>
 8001118:	2301      	movs	r3, #1
 800111a:	e000      	b.n	800111e <HAL_GPIO_DeInit+0x9e>
 800111c:	2300      	movs	r3, #0
 800111e:	697a      	ldr	r2, [r7, #20]
 8001120:	f002 0203 	and.w	r2, r2, #3
 8001124:	0092      	lsls	r2, r2, #2
 8001126:	4093      	lsls	r3, r2
 8001128:	68fa      	ldr	r2, [r7, #12]
 800112a:	429a      	cmp	r2, r3
 800112c:	d132      	bne.n	8001194 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800112e:	4b4d      	ldr	r3, [pc, #308]	; (8001264 <HAL_GPIO_DeInit+0x1e4>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	43db      	mvns	r3, r3
 8001136:	494b      	ldr	r1, [pc, #300]	; (8001264 <HAL_GPIO_DeInit+0x1e4>)
 8001138:	4013      	ands	r3, r2
 800113a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800113c:	4b49      	ldr	r3, [pc, #292]	; (8001264 <HAL_GPIO_DeInit+0x1e4>)
 800113e:	685a      	ldr	r2, [r3, #4]
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	43db      	mvns	r3, r3
 8001144:	4947      	ldr	r1, [pc, #284]	; (8001264 <HAL_GPIO_DeInit+0x1e4>)
 8001146:	4013      	ands	r3, r2
 8001148:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800114a:	4b46      	ldr	r3, [pc, #280]	; (8001264 <HAL_GPIO_DeInit+0x1e4>)
 800114c:	689a      	ldr	r2, [r3, #8]
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	43db      	mvns	r3, r3
 8001152:	4944      	ldr	r1, [pc, #272]	; (8001264 <HAL_GPIO_DeInit+0x1e4>)
 8001154:	4013      	ands	r3, r2
 8001156:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8001158:	4b42      	ldr	r3, [pc, #264]	; (8001264 <HAL_GPIO_DeInit+0x1e4>)
 800115a:	68da      	ldr	r2, [r3, #12]
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	43db      	mvns	r3, r3
 8001160:	4940      	ldr	r1, [pc, #256]	; (8001264 <HAL_GPIO_DeInit+0x1e4>)
 8001162:	4013      	ands	r3, r2
 8001164:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	f003 0303 	and.w	r3, r3, #3
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	220f      	movs	r2, #15
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001176:	4a34      	ldr	r2, [pc, #208]	; (8001248 <HAL_GPIO_DeInit+0x1c8>)
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	089b      	lsrs	r3, r3, #2
 800117c:	3302      	adds	r3, #2
 800117e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	43da      	mvns	r2, r3
 8001186:	4830      	ldr	r0, [pc, #192]	; (8001248 <HAL_GPIO_DeInit+0x1c8>)
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	089b      	lsrs	r3, r3, #2
 800118c:	400a      	ands	r2, r1
 800118e:	3302      	adds	r3, #2
 8001190:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	2103      	movs	r1, #3
 800119e:	fa01 f303 	lsl.w	r3, r1, r3
 80011a2:	431a      	orrs	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	08da      	lsrs	r2, r3, #3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3208      	adds	r2, #8
 80011b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	220f      	movs	r2, #15
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43db      	mvns	r3, r3
 80011c4:	697a      	ldr	r2, [r7, #20]
 80011c6:	08d2      	lsrs	r2, r2, #3
 80011c8:	4019      	ands	r1, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	3208      	adds	r2, #8
 80011ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	689a      	ldr	r2, [r3, #8]
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	2103      	movs	r1, #3
 80011dc:	fa01 f303 	lsl.w	r3, r1, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	401a      	ands	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	685a      	ldr	r2, [r3, #4]
 80011ec:	2101      	movs	r1, #1
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	fa01 f303 	lsl.w	r3, r1, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	401a      	ands	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	68da      	ldr	r2, [r3, #12]
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	2103      	movs	r1, #3
 8001206:	fa01 f303 	lsl.w	r3, r1, r3
 800120a:	43db      	mvns	r3, r3
 800120c:	401a      	ands	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001216:	2101      	movs	r1, #1
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	fa01 f303 	lsl.w	r3, r1, r3
 800121e:	43db      	mvns	r3, r3
 8001220:	401a      	ands	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	3301      	adds	r3, #1
 800122a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800122c:	683a      	ldr	r2, [r7, #0]
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	fa22 f303 	lsr.w	r3, r2, r3
 8001234:	2b00      	cmp	r3, #0
 8001236:	f47f af2b 	bne.w	8001090 <HAL_GPIO_DeInit+0x10>
  }
}
 800123a:	bf00      	nop
 800123c:	371c      	adds	r7, #28
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	40010000 	.word	0x40010000
 800124c:	48000400 	.word	0x48000400
 8001250:	48000800 	.word	0x48000800
 8001254:	48000c00 	.word	0x48000c00
 8001258:	48001000 	.word	0x48001000
 800125c:	48001400 	.word	0x48001400
 8001260:	48001800 	.word	0x48001800
 8001264:	40010400 	.word	0x40010400

08001268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	460b      	mov	r3, r1
 8001272:	807b      	strh	r3, [r7, #2]
 8001274:	4613      	mov	r3, r2
 8001276:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001278:	787b      	ldrb	r3, [r7, #1]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800127e:	887a      	ldrh	r2, [r7, #2]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001284:	e002      	b.n	800128c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001286:	887a      	ldrh	r2, [r7, #2]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d101      	bne.n	80012aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e081      	b.n	80013ae <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d106      	bne.n	80012c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2200      	movs	r2, #0
 80012ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f004 f8e4 	bl	800548c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2224      	movs	r2, #36	; 0x24
 80012c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f022 0201 	bic.w	r2, r2, #1
 80012da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685a      	ldr	r2, [r3, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80012e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	689a      	ldr	r2, [r3, #8]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	68db      	ldr	r3, [r3, #12]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d107      	bne.n	8001312 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	689a      	ldr	r2, [r3, #8]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	e006      	b.n	8001320 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	689a      	ldr	r2, [r3, #8]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800131e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	2b02      	cmp	r3, #2
 8001326:	d104      	bne.n	8001332 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001330:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	6812      	ldr	r2, [r2, #0]
 800133c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001340:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001344:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	68da      	ldr	r2, [r3, #12]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001354:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	691a      	ldr	r2, [r3, #16]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	ea42 0103 	orr.w	r1, r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	021a      	lsls	r2, r3, #8
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	430a      	orrs	r2, r1
 800136e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	69d9      	ldr	r1, [r3, #28]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a1a      	ldr	r2, [r3, #32]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	430a      	orrs	r2, r1
 800137e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f042 0201 	orr.w	r2, r2, #1
 800138e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2220      	movs	r2, #32
 800139a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2200      	movs	r2, #0
 80013a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d101      	bne.n	80013c8 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e021      	b.n	800140c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2224      	movs	r2, #36	; 0x24
 80013cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f022 0201 	bic.w	r2, r2, #1
 80013de:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f004 f897 	bl	8005514 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b088      	sub	sp, #32
 8001418:	af02      	add	r7, sp, #8
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	4608      	mov	r0, r1
 800141e:	4611      	mov	r1, r2
 8001420:	461a      	mov	r2, r3
 8001422:	4603      	mov	r3, r0
 8001424:	817b      	strh	r3, [r7, #10]
 8001426:	460b      	mov	r3, r1
 8001428:	813b      	strh	r3, [r7, #8]
 800142a:	4613      	mov	r3, r2
 800142c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b20      	cmp	r3, #32
 8001438:	f040 80f9 	bne.w	800162e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800143c:	6a3b      	ldr	r3, [r7, #32]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d002      	beq.n	8001448 <HAL_I2C_Mem_Write+0x34>
 8001442:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001444:	2b00      	cmp	r3, #0
 8001446:	d105      	bne.n	8001454 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800144e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e0ed      	b.n	8001630 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800145a:	2b01      	cmp	r3, #1
 800145c:	d101      	bne.n	8001462 <HAL_I2C_Mem_Write+0x4e>
 800145e:	2302      	movs	r3, #2
 8001460:	e0e6      	b.n	8001630 <HAL_I2C_Mem_Write+0x21c>
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2201      	movs	r2, #1
 8001466:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800146a:	f7ff f8ad 	bl	80005c8 <HAL_GetTick>
 800146e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	9300      	str	r3, [sp, #0]
 8001474:	2319      	movs	r3, #25
 8001476:	2201      	movs	r2, #1
 8001478:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800147c:	68f8      	ldr	r0, [r7, #12]
 800147e:	f000 fac3 	bl	8001a08 <I2C_WaitOnFlagUntilTimeout>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e0d1      	b.n	8001630 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2221      	movs	r2, #33	; 0x21
 8001490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2240      	movs	r2, #64	; 0x40
 8001498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2200      	movs	r2, #0
 80014a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	6a3a      	ldr	r2, [r7, #32]
 80014a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80014ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	2200      	movs	r2, #0
 80014b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80014b4:	88f8      	ldrh	r0, [r7, #6]
 80014b6:	893a      	ldrh	r2, [r7, #8]
 80014b8:	8979      	ldrh	r1, [r7, #10]
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	9301      	str	r3, [sp, #4]
 80014be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c0:	9300      	str	r3, [sp, #0]
 80014c2:	4603      	mov	r3, r0
 80014c4:	68f8      	ldr	r0, [r7, #12]
 80014c6:	f000 f9d3 	bl	8001870 <I2C_RequestMemoryWrite>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d005      	beq.n	80014dc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2200      	movs	r2, #0
 80014d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e0a9      	b.n	8001630 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	2bff      	cmp	r3, #255	; 0xff
 80014e4:	d90e      	bls.n	8001504 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	22ff      	movs	r2, #255	; 0xff
 80014ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	8979      	ldrh	r1, [r7, #10]
 80014f4:	2300      	movs	r3, #0
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014fc:	68f8      	ldr	r0, [r7, #12]
 80014fe:	f000 fba5 	bl	8001c4c <I2C_TransferConfig>
 8001502:	e00f      	b.n	8001524 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001508:	b29a      	uxth	r2, r3
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001512:	b2da      	uxtb	r2, r3
 8001514:	8979      	ldrh	r1, [r7, #10]
 8001516:	2300      	movs	r3, #0
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800151e:	68f8      	ldr	r0, [r7, #12]
 8001520:	f000 fb94 	bl	8001c4c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001524:	697a      	ldr	r2, [r7, #20]
 8001526:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001528:	68f8      	ldr	r0, [r7, #12]
 800152a:	f000 faad 	bl	8001a88 <I2C_WaitOnTXISFlagUntilTimeout>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e07b      	b.n	8001630 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153c:	781a      	ldrb	r2, [r3, #0]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001548:	1c5a      	adds	r2, r3, #1
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001552:	b29b      	uxth	r3, r3
 8001554:	3b01      	subs	r3, #1
 8001556:	b29a      	uxth	r2, r3
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001560:	3b01      	subs	r3, #1
 8001562:	b29a      	uxth	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800156c:	b29b      	uxth	r3, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	d034      	beq.n	80015dc <HAL_I2C_Mem_Write+0x1c8>
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001576:	2b00      	cmp	r3, #0
 8001578:	d130      	bne.n	80015dc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001580:	2200      	movs	r2, #0
 8001582:	2180      	movs	r1, #128	; 0x80
 8001584:	68f8      	ldr	r0, [r7, #12]
 8001586:	f000 fa3f 	bl	8001a08 <I2C_WaitOnFlagUntilTimeout>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e04d      	b.n	8001630 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001598:	b29b      	uxth	r3, r3
 800159a:	2bff      	cmp	r3, #255	; 0xff
 800159c:	d90e      	bls.n	80015bc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	22ff      	movs	r2, #255	; 0xff
 80015a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	8979      	ldrh	r1, [r7, #10]
 80015ac:	2300      	movs	r3, #0
 80015ae:	9300      	str	r3, [sp, #0]
 80015b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015b4:	68f8      	ldr	r0, [r7, #12]
 80015b6:	f000 fb49 	bl	8001c4c <I2C_TransferConfig>
 80015ba:	e00f      	b.n	80015dc <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	8979      	ldrh	r1, [r7, #10]
 80015ce:	2300      	movs	r3, #0
 80015d0:	9300      	str	r3, [sp, #0]
 80015d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015d6:	68f8      	ldr	r0, [r7, #12]
 80015d8:	f000 fb38 	bl	8001c4c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d19e      	bne.n	8001524 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015e6:	697a      	ldr	r2, [r7, #20]
 80015e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015ea:	68f8      	ldr	r0, [r7, #12]
 80015ec:	f000 fa8c 	bl	8001b08 <I2C_WaitOnSTOPFlagUntilTimeout>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e01a      	b.n	8001630 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2220      	movs	r2, #32
 8001600:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	6859      	ldr	r1, [r3, #4]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <HAL_I2C_Mem_Write+0x224>)
 800160e:	400b      	ands	r3, r1
 8001610:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2220      	movs	r2, #32
 8001616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2200      	movs	r2, #0
 8001626:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800162a:	2300      	movs	r3, #0
 800162c:	e000      	b.n	8001630 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800162e:	2302      	movs	r3, #2
  }
}
 8001630:	4618      	mov	r0, r3
 8001632:	3718      	adds	r7, #24
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	fe00e800 	.word	0xfe00e800

0800163c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b088      	sub	sp, #32
 8001640:	af02      	add	r7, sp, #8
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	4608      	mov	r0, r1
 8001646:	4611      	mov	r1, r2
 8001648:	461a      	mov	r2, r3
 800164a:	4603      	mov	r3, r0
 800164c:	817b      	strh	r3, [r7, #10]
 800164e:	460b      	mov	r3, r1
 8001650:	813b      	strh	r3, [r7, #8]
 8001652:	4613      	mov	r3, r2
 8001654:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2b20      	cmp	r3, #32
 8001660:	f040 80fd 	bne.w	800185e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001664:	6a3b      	ldr	r3, [r7, #32]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d002      	beq.n	8001670 <HAL_I2C_Mem_Read+0x34>
 800166a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800166c:	2b00      	cmp	r3, #0
 800166e:	d105      	bne.n	800167c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001676:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e0f1      	b.n	8001860 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001682:	2b01      	cmp	r3, #1
 8001684:	d101      	bne.n	800168a <HAL_I2C_Mem_Read+0x4e>
 8001686:	2302      	movs	r3, #2
 8001688:	e0ea      	b.n	8001860 <HAL_I2C_Mem_Read+0x224>
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2201      	movs	r2, #1
 800168e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001692:	f7fe ff99 	bl	80005c8 <HAL_GetTick>
 8001696:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	2319      	movs	r3, #25
 800169e:	2201      	movs	r2, #1
 80016a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016a4:	68f8      	ldr	r0, [r7, #12]
 80016a6:	f000 f9af 	bl	8001a08 <I2C_WaitOnFlagUntilTimeout>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e0d5      	b.n	8001860 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2222      	movs	r2, #34	; 0x22
 80016b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2240      	movs	r2, #64	; 0x40
 80016c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2200      	movs	r2, #0
 80016c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	6a3a      	ldr	r2, [r7, #32]
 80016ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80016d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2200      	movs	r2, #0
 80016da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80016dc:	88f8      	ldrh	r0, [r7, #6]
 80016de:	893a      	ldrh	r2, [r7, #8]
 80016e0:	8979      	ldrh	r1, [r7, #10]
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	9301      	str	r3, [sp, #4]
 80016e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	4603      	mov	r3, r0
 80016ec:	68f8      	ldr	r0, [r7, #12]
 80016ee:	f000 f913 	bl	8001918 <I2C_RequestMemoryRead>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d005      	beq.n	8001704 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e0ad      	b.n	8001860 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001708:	b29b      	uxth	r3, r3
 800170a:	2bff      	cmp	r3, #255	; 0xff
 800170c:	d90e      	bls.n	800172c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	22ff      	movs	r2, #255	; 0xff
 8001712:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001718:	b2da      	uxtb	r2, r3
 800171a:	8979      	ldrh	r1, [r7, #10]
 800171c:	4b52      	ldr	r3, [pc, #328]	; (8001868 <HAL_I2C_Mem_Read+0x22c>)
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001724:	68f8      	ldr	r0, [r7, #12]
 8001726:	f000 fa91 	bl	8001c4c <I2C_TransferConfig>
 800172a:	e00f      	b.n	800174c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001730:	b29a      	uxth	r2, r3
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800173a:	b2da      	uxtb	r2, r3
 800173c:	8979      	ldrh	r1, [r7, #10]
 800173e:	4b4a      	ldr	r3, [pc, #296]	; (8001868 <HAL_I2C_Mem_Read+0x22c>)
 8001740:	9300      	str	r3, [sp, #0]
 8001742:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001746:	68f8      	ldr	r0, [r7, #12]
 8001748:	f000 fa80 	bl	8001c4c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001752:	2200      	movs	r2, #0
 8001754:	2104      	movs	r1, #4
 8001756:	68f8      	ldr	r0, [r7, #12]
 8001758:	f000 f956 	bl	8001a08 <I2C_WaitOnFlagUntilTimeout>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e07c      	b.n	8001860 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001770:	b2d2      	uxtb	r2, r2
 8001772:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001778:	1c5a      	adds	r2, r3, #1
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001782:	3b01      	subs	r3, #1
 8001784:	b29a      	uxth	r2, r3
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800178e:	b29b      	uxth	r3, r3
 8001790:	3b01      	subs	r3, #1
 8001792:	b29a      	uxth	r2, r3
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800179c:	b29b      	uxth	r3, r3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d034      	beq.n	800180c <HAL_I2C_Mem_Read+0x1d0>
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d130      	bne.n	800180c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	9300      	str	r3, [sp, #0]
 80017ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017b0:	2200      	movs	r2, #0
 80017b2:	2180      	movs	r1, #128	; 0x80
 80017b4:	68f8      	ldr	r0, [r7, #12]
 80017b6:	f000 f927 	bl	8001a08 <I2C_WaitOnFlagUntilTimeout>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e04d      	b.n	8001860 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	2bff      	cmp	r3, #255	; 0xff
 80017cc:	d90e      	bls.n	80017ec <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	22ff      	movs	r2, #255	; 0xff
 80017d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	8979      	ldrh	r1, [r7, #10]
 80017dc:	2300      	movs	r3, #0
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017e4:	68f8      	ldr	r0, [r7, #12]
 80017e6:	f000 fa31 	bl	8001c4c <I2C_TransferConfig>
 80017ea:	e00f      	b.n	800180c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	8979      	ldrh	r1, [r7, #10]
 80017fe:	2300      	movs	r3, #0
 8001800:	9300      	str	r3, [sp, #0]
 8001802:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001806:	68f8      	ldr	r0, [r7, #12]
 8001808:	f000 fa20 	bl	8001c4c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001810:	b29b      	uxth	r3, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	d19a      	bne.n	800174c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001816:	697a      	ldr	r2, [r7, #20]
 8001818:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800181a:	68f8      	ldr	r0, [r7, #12]
 800181c:	f000 f974 	bl	8001b08 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e01a      	b.n	8001860 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2220      	movs	r2, #32
 8001830:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6859      	ldr	r1, [r3, #4]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	4b0b      	ldr	r3, [pc, #44]	; (800186c <HAL_I2C_Mem_Read+0x230>)
 800183e:	400b      	ands	r3, r1
 8001840:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2220      	movs	r2, #32
 8001846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2200      	movs	r2, #0
 800184e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800185a:	2300      	movs	r3, #0
 800185c:	e000      	b.n	8001860 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800185e:	2302      	movs	r3, #2
  }
}
 8001860:	4618      	mov	r0, r3
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	80002400 	.word	0x80002400
 800186c:	fe00e800 	.word	0xfe00e800

08001870 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af02      	add	r7, sp, #8
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	4608      	mov	r0, r1
 800187a:	4611      	mov	r1, r2
 800187c:	461a      	mov	r2, r3
 800187e:	4603      	mov	r3, r0
 8001880:	817b      	strh	r3, [r7, #10]
 8001882:	460b      	mov	r3, r1
 8001884:	813b      	strh	r3, [r7, #8]
 8001886:	4613      	mov	r3, r2
 8001888:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800188a:	88fb      	ldrh	r3, [r7, #6]
 800188c:	b2da      	uxtb	r2, r3
 800188e:	8979      	ldrh	r1, [r7, #10]
 8001890:	4b20      	ldr	r3, [pc, #128]	; (8001914 <I2C_RequestMemoryWrite+0xa4>)
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001898:	68f8      	ldr	r0, [r7, #12]
 800189a:	f000 f9d7 	bl	8001c4c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800189e:	69fa      	ldr	r2, [r7, #28]
 80018a0:	69b9      	ldr	r1, [r7, #24]
 80018a2:	68f8      	ldr	r0, [r7, #12]
 80018a4:	f000 f8f0 	bl	8001a88 <I2C_WaitOnTXISFlagUntilTimeout>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e02c      	b.n	800190c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80018b2:	88fb      	ldrh	r3, [r7, #6]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d105      	bne.n	80018c4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80018b8:	893b      	ldrh	r3, [r7, #8]
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	629a      	str	r2, [r3, #40]	; 0x28
 80018c2:	e015      	b.n	80018f0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80018c4:	893b      	ldrh	r3, [r7, #8]
 80018c6:	0a1b      	lsrs	r3, r3, #8
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018d2:	69fa      	ldr	r2, [r7, #28]
 80018d4:	69b9      	ldr	r1, [r7, #24]
 80018d6:	68f8      	ldr	r0, [r7, #12]
 80018d8:	f000 f8d6 	bl	8001a88 <I2C_WaitOnTXISFlagUntilTimeout>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e012      	b.n	800190c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80018e6:	893b      	ldrh	r3, [r7, #8]
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	9300      	str	r3, [sp, #0]
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	2200      	movs	r2, #0
 80018f8:	2180      	movs	r1, #128	; 0x80
 80018fa:	68f8      	ldr	r0, [r7, #12]
 80018fc:	f000 f884 	bl	8001a08 <I2C_WaitOnFlagUntilTimeout>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e000      	b.n	800190c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800190a:	2300      	movs	r3, #0
}
 800190c:	4618      	mov	r0, r3
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	80002000 	.word	0x80002000

08001918 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af02      	add	r7, sp, #8
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	4608      	mov	r0, r1
 8001922:	4611      	mov	r1, r2
 8001924:	461a      	mov	r2, r3
 8001926:	4603      	mov	r3, r0
 8001928:	817b      	strh	r3, [r7, #10]
 800192a:	460b      	mov	r3, r1
 800192c:	813b      	strh	r3, [r7, #8]
 800192e:	4613      	mov	r3, r2
 8001930:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001932:	88fb      	ldrh	r3, [r7, #6]
 8001934:	b2da      	uxtb	r2, r3
 8001936:	8979      	ldrh	r1, [r7, #10]
 8001938:	4b20      	ldr	r3, [pc, #128]	; (80019bc <I2C_RequestMemoryRead+0xa4>)
 800193a:	9300      	str	r3, [sp, #0]
 800193c:	2300      	movs	r3, #0
 800193e:	68f8      	ldr	r0, [r7, #12]
 8001940:	f000 f984 	bl	8001c4c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001944:	69fa      	ldr	r2, [r7, #28]
 8001946:	69b9      	ldr	r1, [r7, #24]
 8001948:	68f8      	ldr	r0, [r7, #12]
 800194a:	f000 f89d 	bl	8001a88 <I2C_WaitOnTXISFlagUntilTimeout>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e02c      	b.n	80019b2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001958:	88fb      	ldrh	r3, [r7, #6]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d105      	bne.n	800196a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800195e:	893b      	ldrh	r3, [r7, #8]
 8001960:	b2da      	uxtb	r2, r3
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	629a      	str	r2, [r3, #40]	; 0x28
 8001968:	e015      	b.n	8001996 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800196a:	893b      	ldrh	r3, [r7, #8]
 800196c:	0a1b      	lsrs	r3, r3, #8
 800196e:	b29b      	uxth	r3, r3
 8001970:	b2da      	uxtb	r2, r3
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001978:	69fa      	ldr	r2, [r7, #28]
 800197a:	69b9      	ldr	r1, [r7, #24]
 800197c:	68f8      	ldr	r0, [r7, #12]
 800197e:	f000 f883 	bl	8001a88 <I2C_WaitOnTXISFlagUntilTimeout>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e012      	b.n	80019b2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800198c:	893b      	ldrh	r3, [r7, #8]
 800198e:	b2da      	uxtb	r2, r3
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	9300      	str	r3, [sp, #0]
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	2200      	movs	r2, #0
 800199e:	2140      	movs	r1, #64	; 0x40
 80019a0:	68f8      	ldr	r0, [r7, #12]
 80019a2:	f000 f831 	bl	8001a08 <I2C_WaitOnFlagUntilTimeout>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e000      	b.n	80019b2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	80002000 	.word	0x80002000

080019c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d103      	bne.n	80019de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2200      	movs	r2, #0
 80019dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d007      	beq.n	80019fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	699a      	ldr	r2, [r3, #24]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f042 0201 	orr.w	r2, r2, #1
 80019fa:	619a      	str	r2, [r3, #24]
  }
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	603b      	str	r3, [r7, #0]
 8001a14:	4613      	mov	r3, r2
 8001a16:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a18:	e022      	b.n	8001a60 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a20:	d01e      	beq.n	8001a60 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a22:	f7fe fdd1 	bl	80005c8 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d302      	bcc.n	8001a38 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d113      	bne.n	8001a60 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3c:	f043 0220 	orr.w	r2, r3, #32
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2220      	movs	r2, #32
 8001a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e00f      	b.n	8001a80 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	699a      	ldr	r2, [r3, #24]
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	68ba      	ldr	r2, [r7, #8]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	bf0c      	ite	eq
 8001a70:	2301      	moveq	r3, #1
 8001a72:	2300      	movne	r3, #0
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	461a      	mov	r2, r3
 8001a78:	79fb      	ldrb	r3, [r7, #7]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d0cd      	beq.n	8001a1a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3710      	adds	r7, #16
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a94:	e02c      	b.n	8001af0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	68b9      	ldr	r1, [r7, #8]
 8001a9a:	68f8      	ldr	r0, [r7, #12]
 8001a9c:	f000 f870 	bl	8001b80 <I2C_IsAcknowledgeFailed>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e02a      	b.n	8001b00 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab0:	d01e      	beq.n	8001af0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ab2:	f7fe fd89 	bl	80005c8 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	68ba      	ldr	r2, [r7, #8]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d302      	bcc.n	8001ac8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d113      	bne.n	8001af0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001acc:	f043 0220 	orr.w	r2, r3, #32
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2220      	movs	r2, #32
 8001ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e007      	b.n	8001b00 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d1cb      	bne.n	8001a96 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3710      	adds	r7, #16
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b14:	e028      	b.n	8001b68 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	68b9      	ldr	r1, [r7, #8]
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f000 f830 	bl	8001b80 <I2C_IsAcknowledgeFailed>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e026      	b.n	8001b78 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b2a:	f7fe fd4d 	bl	80005c8 <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	68ba      	ldr	r2, [r7, #8]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d302      	bcc.n	8001b40 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d113      	bne.n	8001b68 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b44:	f043 0220 	orr.w	r2, r3, #32
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2220      	movs	r2, #32
 8001b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e007      	b.n	8001b78 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	f003 0320 	and.w	r3, r3, #32
 8001b72:	2b20      	cmp	r3, #32
 8001b74:	d1cf      	bne.n	8001b16 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	f003 0310 	and.w	r3, r3, #16
 8001b96:	2b10      	cmp	r3, #16
 8001b98:	d151      	bne.n	8001c3e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b9a:	e022      	b.n	8001be2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba2:	d01e      	beq.n	8001be2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ba4:	f7fe fd10 	bl	80005c8 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d302      	bcc.n	8001bba <I2C_IsAcknowledgeFailed+0x3a>
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d113      	bne.n	8001be2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbe:	f043 0220 	orr.w	r2, r3, #32
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2220      	movs	r2, #32
 8001bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e02e      	b.n	8001c40 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	f003 0320 	and.w	r3, r3, #32
 8001bec:	2b20      	cmp	r3, #32
 8001bee:	d1d5      	bne.n	8001b9c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2210      	movs	r2, #16
 8001bf6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2220      	movs	r2, #32
 8001bfe:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001c00:	68f8      	ldr	r0, [r7, #12]
 8001c02:	f7ff fedd 	bl	80019c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	6859      	ldr	r1, [r3, #4]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	4b0d      	ldr	r3, [pc, #52]	; (8001c48 <I2C_IsAcknowledgeFailed+0xc8>)
 8001c12:	400b      	ands	r3, r1
 8001c14:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1a:	f043 0204 	orr.w	r2, r3, #4
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2220      	movs	r2, #32
 8001c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e000      	b.n	8001c40 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	fe00e800 	.word	0xfe00e800

08001c4c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	607b      	str	r3, [r7, #4]
 8001c56:	460b      	mov	r3, r1
 8001c58:	817b      	strh	r3, [r7, #10]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	0d5b      	lsrs	r3, r3, #21
 8001c68:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001c6c:	4b0d      	ldr	r3, [pc, #52]	; (8001ca4 <I2C_TransferConfig+0x58>)
 8001c6e:	430b      	orrs	r3, r1
 8001c70:	43db      	mvns	r3, r3
 8001c72:	ea02 0103 	and.w	r1, r2, r3
 8001c76:	897b      	ldrh	r3, [r7, #10]
 8001c78:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c7c:	7a7b      	ldrb	r3, [r7, #9]
 8001c7e:	041b      	lsls	r3, r3, #16
 8001c80:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001c84:	431a      	orrs	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	431a      	orrs	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001c96:	bf00      	nop
 8001c98:	3714      	adds	r7, #20
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	03ff63ff 	.word	0x03ff63ff

08001ca8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b20      	cmp	r3, #32
 8001cbc:	d138      	bne.n	8001d30 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d101      	bne.n	8001ccc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001cc8:	2302      	movs	r3, #2
 8001cca:	e032      	b.n	8001d32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2224      	movs	r2, #36	; 0x24
 8001cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 0201 	bic.w	r2, r2, #1
 8001cea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001cfa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6819      	ldr	r1, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f042 0201 	orr.w	r2, r2, #1
 8001d1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2220      	movs	r2, #32
 8001d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	e000      	b.n	8001d32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d30:	2302      	movs	r3, #2
  }
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b085      	sub	sp, #20
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
 8001d46:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b20      	cmp	r3, #32
 8001d52:	d139      	bne.n	8001dc8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d101      	bne.n	8001d62 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d5e:	2302      	movs	r3, #2
 8001d60:	e033      	b.n	8001dca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2201      	movs	r2, #1
 8001d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2224      	movs	r2, #36	; 0x24
 8001d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f022 0201 	bic.w	r2, r2, #1
 8001d80:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d90:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	021b      	lsls	r3, r3, #8
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f042 0201 	orr.w	r2, r2, #1
 8001db2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2220      	movs	r2, #32
 8001db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	e000      	b.n	8001dca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001dc8:	2302      	movs	r3, #2
  }
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
	...

08001dd8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ddc:	4b04      	ldr	r3, [pc, #16]	; (8001df0 <HAL_PWREx_GetVoltageRange+0x18>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	40007000 	.word	0x40007000

08001df4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e02:	d130      	bne.n	8001e66 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e04:	4b23      	ldr	r3, [pc, #140]	; (8001e94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e10:	d038      	beq.n	8001e84 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e12:	4b20      	ldr	r3, [pc, #128]	; (8001e94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e1a:	4a1e      	ldr	r2, [pc, #120]	; (8001e94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e20:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e22:	4b1d      	ldr	r3, [pc, #116]	; (8001e98 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2232      	movs	r2, #50	; 0x32
 8001e28:	fb02 f303 	mul.w	r3, r2, r3
 8001e2c:	4a1b      	ldr	r2, [pc, #108]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e32:	0c9b      	lsrs	r3, r3, #18
 8001e34:	3301      	adds	r3, #1
 8001e36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e38:	e002      	b.n	8001e40 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e40:	4b14      	ldr	r3, [pc, #80]	; (8001e94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e42:	695b      	ldr	r3, [r3, #20]
 8001e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e4c:	d102      	bne.n	8001e54 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1f2      	bne.n	8001e3a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e54:	4b0f      	ldr	r3, [pc, #60]	; (8001e94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e56:	695b      	ldr	r3, [r3, #20]
 8001e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e60:	d110      	bne.n	8001e84 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e00f      	b.n	8001e86 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e66:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e72:	d007      	beq.n	8001e84 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e74:	4b07      	ldr	r3, [pc, #28]	; (8001e94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e7c:	4a05      	ldr	r2, [pc, #20]	; (8001e94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e82:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	40007000 	.word	0x40007000
 8001e98:	2000003c 	.word	0x2000003c
 8001e9c:	431bde83 	.word	0x431bde83

08001ea0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af02      	add	r7, sp, #8
 8001ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001ea8:	f7fe fb8e 	bl	80005c8 <HAL_GetTick>
 8001eac:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d101      	bne.n	8001eb8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e063      	b.n	8001f80 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d10b      	bne.n	8001edc <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f003 fb45 	bl	800555c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8001ed2:	f241 3188 	movw	r1, #5000	; 0x1388
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f858 	bl	8001f8c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	3b01      	subs	r3, #1
 8001eec:	021a      	lsls	r2, r3, #8
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	9300      	str	r3, [sp, #0]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2200      	movs	r2, #0
 8001f00:	2120      	movs	r1, #32
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 f850 	bl	8001fa8 <QSPI_WaitFlagStateUntilTimeout>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8001f0c:	7afb      	ldrb	r3, [r7, #11]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d131      	bne.n	8001f76 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001f1c:	f023 0310 	bic.w	r3, r3, #16
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	6852      	ldr	r2, [r2, #4]
 8001f24:	0611      	lsls	r1, r2, #24
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	68d2      	ldr	r2, [r2, #12]
 8001f2a:	4311      	orrs	r1, r2
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	6812      	ldr	r2, [r2, #0]
 8001f30:	430b      	orrs	r3, r1
 8001f32:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	4b13      	ldr	r3, [pc, #76]	; (8001f88 <HAL_QSPI_Init+0xe8>)
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	6912      	ldr	r2, [r2, #16]
 8001f42:	0411      	lsls	r1, r2, #16
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	6952      	ldr	r2, [r2, #20]
 8001f48:	4311      	orrs	r1, r2
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	6992      	ldr	r2, [r2, #24]
 8001f4e:	4311      	orrs	r1, r2
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	6812      	ldr	r2, [r2, #0]
 8001f54:	430b      	orrs	r3, r1
 8001f56:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f042 0201 	orr.w	r2, r2, #1
 8001f66:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8001f7e:	7afb      	ldrb	r3, [r7, #11]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3710      	adds	r7, #16
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	ffe0f8fe 	.word	0xffe0f8fe

08001f8c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	603b      	str	r3, [r7, #0]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8001fb8:	e01a      	b.n	8001ff0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc0:	d016      	beq.n	8001ff0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fc2:	f7fe fb01 	bl	80005c8 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d302      	bcc.n	8001fd8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d10b      	bne.n	8001ff0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2204      	movs	r2, #4
 8001fdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe4:	f043 0201 	orr.w	r2, r3, #1
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e00e      	b.n	800200e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	689a      	ldr	r2, [r3, #8]
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	bf14      	ite	ne
 8001ffe:	2301      	movne	r3, #1
 8002000:	2300      	moveq	r3, #0
 8002002:	b2db      	uxtb	r3, r3
 8002004:	461a      	mov	r2, r3
 8002006:	79fb      	ldrb	r3, [r7, #7]
 8002008:	429a      	cmp	r2, r3
 800200a:	d1d6      	bne.n	8001fba <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
	...

08002018 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b088      	sub	sp, #32
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e3d4      	b.n	80027d4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800202a:	4ba1      	ldr	r3, [pc, #644]	; (80022b0 <HAL_RCC_OscConfig+0x298>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 030c 	and.w	r3, r3, #12
 8002032:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002034:	4b9e      	ldr	r3, [pc, #632]	; (80022b0 <HAL_RCC_OscConfig+0x298>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	f003 0303 	and.w	r3, r3, #3
 800203c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0310 	and.w	r3, r3, #16
 8002046:	2b00      	cmp	r3, #0
 8002048:	f000 80e4 	beq.w	8002214 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d007      	beq.n	8002062 <HAL_RCC_OscConfig+0x4a>
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	2b0c      	cmp	r3, #12
 8002056:	f040 808b 	bne.w	8002170 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	2b01      	cmp	r3, #1
 800205e:	f040 8087 	bne.w	8002170 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002062:	4b93      	ldr	r3, [pc, #588]	; (80022b0 <HAL_RCC_OscConfig+0x298>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d005      	beq.n	800207a <HAL_RCC_OscConfig+0x62>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e3ac      	b.n	80027d4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a1a      	ldr	r2, [r3, #32]
 800207e:	4b8c      	ldr	r3, [pc, #560]	; (80022b0 <HAL_RCC_OscConfig+0x298>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0308 	and.w	r3, r3, #8
 8002086:	2b00      	cmp	r3, #0
 8002088:	d004      	beq.n	8002094 <HAL_RCC_OscConfig+0x7c>
 800208a:	4b89      	ldr	r3, [pc, #548]	; (80022b0 <HAL_RCC_OscConfig+0x298>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002092:	e005      	b.n	80020a0 <HAL_RCC_OscConfig+0x88>
 8002094:	4b86      	ldr	r3, [pc, #536]	; (80022b0 <HAL_RCC_OscConfig+0x298>)
 8002096:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800209a:	091b      	lsrs	r3, r3, #4
 800209c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d223      	bcs.n	80020ec <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f000 fd71 	bl	8002b90 <RCC_SetFlashLatencyFromMSIRange>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e38d      	b.n	80027d4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020b8:	4b7d      	ldr	r3, [pc, #500]	; (80022b0 <HAL_RCC_OscConfig+0x298>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a7c      	ldr	r2, [pc, #496]	; (80022b0 <HAL_RCC_OscConfig+0x298>)
 80020be:	f043 0308 	orr.w	r3, r3, #8
 80020c2:	6013      	str	r3, [r2, #0]
 80020c4:	4b7a      	ldr	r3, [pc, #488]	; (80022b0 <HAL_RCC_OscConfig+0x298>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	4977      	ldr	r1, [pc, #476]	; (80022b0 <HAL_RCC_OscConfig+0x298>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020d6:	4b76      	ldr	r3, [pc, #472]	; (80022b0 <HAL_RCC_OscConfig+0x298>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	021b      	lsls	r3, r3, #8
 80020e4:	4972      	ldr	r1, [pc, #456]	; (80022b0 <HAL_RCC_OscConfig+0x298>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	604b      	str	r3, [r1, #4]
 80020ea:	e025      	b.n	8002138 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020ec:	4b70      	ldr	r3, [pc, #448]	; (80022b0 <HAL_RCC_OscConfig+0x298>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a6f      	ldr	r2, [pc, #444]	; (80022b0 <HAL_RCC_OscConfig+0x298>)
 80020f2:	f043 0308 	orr.w	r3, r3, #8
 80020f6:	6013      	str	r3, [r2, #0]
 80020f8:	4b6d      	ldr	r3, [pc, #436]	; (80022b0 <HAL_RCC_OscConfig+0x298>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a1b      	ldr	r3, [r3, #32]
 8002104:	496a      	ldr	r1, [pc, #424]	; (80022b0 <HAL_RCC_OscConfig+0x298>)
 8002106:	4313      	orrs	r3, r2
 8002108:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800210a:	4b69      	ldr	r3, [pc, #420]	; (80022b0 <HAL_RCC_OscConfig+0x298>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	021b      	lsls	r3, r3, #8
 8002118:	4965      	ldr	r1, [pc, #404]	; (80022b0 <HAL_RCC_OscConfig+0x298>)
 800211a:	4313      	orrs	r3, r2
 800211c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d109      	bne.n	8002138 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	4618      	mov	r0, r3
 800212a:	f000 fd31 	bl	8002b90 <RCC_SetFlashLatencyFromMSIRange>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e34d      	b.n	80027d4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002138:	f000 fc36 	bl	80029a8 <HAL_RCC_GetSysClockFreq>
 800213c:	4601      	mov	r1, r0
 800213e:	4b5c      	ldr	r3, [pc, #368]	; (80022b0 <HAL_RCC_OscConfig+0x298>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	091b      	lsrs	r3, r3, #4
 8002144:	f003 030f 	and.w	r3, r3, #15
 8002148:	4a5a      	ldr	r2, [pc, #360]	; (80022b4 <HAL_RCC_OscConfig+0x29c>)
 800214a:	5cd3      	ldrb	r3, [r2, r3]
 800214c:	f003 031f 	and.w	r3, r3, #31
 8002150:	fa21 f303 	lsr.w	r3, r1, r3
 8002154:	4a58      	ldr	r2, [pc, #352]	; (80022b8 <HAL_RCC_OscConfig+0x2a0>)
 8002156:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002158:	4b58      	ldr	r3, [pc, #352]	; (80022bc <HAL_RCC_OscConfig+0x2a4>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f003 faa9 	bl	80056b4 <HAL_InitTick>
 8002162:	4603      	mov	r3, r0
 8002164:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002166:	7bfb      	ldrb	r3, [r7, #15]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d052      	beq.n	8002212 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800216c:	7bfb      	ldrb	r3, [r7, #15]
 800216e:	e331      	b.n	80027d4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d032      	beq.n	80021de <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002178:	4b4d      	ldr	r3, [pc, #308]	; (80022b0 <HAL_RCC_OscConfig+0x298>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a4c      	ldr	r2, [pc, #304]	; (80022b0 <HAL_RCC_OscConfig+0x298>)
 800217e:	f043 0301 	orr.w	r3, r3, #1
 8002182:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002184:	f7fe fa20 	bl	80005c8 <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800218c:	f7fe fa1c 	bl	80005c8 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e31a      	b.n	80027d4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800219e:	4b44      	ldr	r3, [pc, #272]	; (80022b0 <HAL_RCC_OscConfig+0x298>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0f0      	beq.n	800218c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021aa:	4b41      	ldr	r3, [pc, #260]	; (80022b0 <HAL_RCC_OscConfig+0x298>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a40      	ldr	r2, [pc, #256]	; (80022b0 <HAL_RCC_OscConfig+0x298>)
 80021b0:	f043 0308 	orr.w	r3, r3, #8
 80021b4:	6013      	str	r3, [r2, #0]
 80021b6:	4b3e      	ldr	r3, [pc, #248]	; (80022b0 <HAL_RCC_OscConfig+0x298>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	493b      	ldr	r1, [pc, #236]	; (80022b0 <HAL_RCC_OscConfig+0x298>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021c8:	4b39      	ldr	r3, [pc, #228]	; (80022b0 <HAL_RCC_OscConfig+0x298>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	69db      	ldr	r3, [r3, #28]
 80021d4:	021b      	lsls	r3, r3, #8
 80021d6:	4936      	ldr	r1, [pc, #216]	; (80022b0 <HAL_RCC_OscConfig+0x298>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	604b      	str	r3, [r1, #4]
 80021dc:	e01a      	b.n	8002214 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80021de:	4b34      	ldr	r3, [pc, #208]	; (80022b0 <HAL_RCC_OscConfig+0x298>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a33      	ldr	r2, [pc, #204]	; (80022b0 <HAL_RCC_OscConfig+0x298>)
 80021e4:	f023 0301 	bic.w	r3, r3, #1
 80021e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021ea:	f7fe f9ed 	bl	80005c8 <HAL_GetTick>
 80021ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021f0:	e008      	b.n	8002204 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021f2:	f7fe f9e9 	bl	80005c8 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e2e7      	b.n	80027d4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002204:	4b2a      	ldr	r3, [pc, #168]	; (80022b0 <HAL_RCC_OscConfig+0x298>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1f0      	bne.n	80021f2 <HAL_RCC_OscConfig+0x1da>
 8002210:	e000      	b.n	8002214 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002212:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	2b00      	cmp	r3, #0
 800221e:	d074      	beq.n	800230a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	2b08      	cmp	r3, #8
 8002224:	d005      	beq.n	8002232 <HAL_RCC_OscConfig+0x21a>
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	2b0c      	cmp	r3, #12
 800222a:	d10e      	bne.n	800224a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	2b03      	cmp	r3, #3
 8002230:	d10b      	bne.n	800224a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002232:	4b1f      	ldr	r3, [pc, #124]	; (80022b0 <HAL_RCC_OscConfig+0x298>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d064      	beq.n	8002308 <HAL_RCC_OscConfig+0x2f0>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d160      	bne.n	8002308 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e2c4      	b.n	80027d4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002252:	d106      	bne.n	8002262 <HAL_RCC_OscConfig+0x24a>
 8002254:	4b16      	ldr	r3, [pc, #88]	; (80022b0 <HAL_RCC_OscConfig+0x298>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a15      	ldr	r2, [pc, #84]	; (80022b0 <HAL_RCC_OscConfig+0x298>)
 800225a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800225e:	6013      	str	r3, [r2, #0]
 8002260:	e01d      	b.n	800229e <HAL_RCC_OscConfig+0x286>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800226a:	d10c      	bne.n	8002286 <HAL_RCC_OscConfig+0x26e>
 800226c:	4b10      	ldr	r3, [pc, #64]	; (80022b0 <HAL_RCC_OscConfig+0x298>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a0f      	ldr	r2, [pc, #60]	; (80022b0 <HAL_RCC_OscConfig+0x298>)
 8002272:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002276:	6013      	str	r3, [r2, #0]
 8002278:	4b0d      	ldr	r3, [pc, #52]	; (80022b0 <HAL_RCC_OscConfig+0x298>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a0c      	ldr	r2, [pc, #48]	; (80022b0 <HAL_RCC_OscConfig+0x298>)
 800227e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002282:	6013      	str	r3, [r2, #0]
 8002284:	e00b      	b.n	800229e <HAL_RCC_OscConfig+0x286>
 8002286:	4b0a      	ldr	r3, [pc, #40]	; (80022b0 <HAL_RCC_OscConfig+0x298>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a09      	ldr	r2, [pc, #36]	; (80022b0 <HAL_RCC_OscConfig+0x298>)
 800228c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002290:	6013      	str	r3, [r2, #0]
 8002292:	4b07      	ldr	r3, [pc, #28]	; (80022b0 <HAL_RCC_OscConfig+0x298>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a06      	ldr	r2, [pc, #24]	; (80022b0 <HAL_RCC_OscConfig+0x298>)
 8002298:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800229c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d01c      	beq.n	80022e0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a6:	f7fe f98f 	bl	80005c8 <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022ac:	e011      	b.n	80022d2 <HAL_RCC_OscConfig+0x2ba>
 80022ae:	bf00      	nop
 80022b0:	40021000 	.word	0x40021000
 80022b4:	080061b8 	.word	0x080061b8
 80022b8:	2000003c 	.word	0x2000003c
 80022bc:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c0:	f7fe f982 	bl	80005c8 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b64      	cmp	r3, #100	; 0x64
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e280      	b.n	80027d4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022d2:	4baf      	ldr	r3, [pc, #700]	; (8002590 <HAL_RCC_OscConfig+0x578>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d0f0      	beq.n	80022c0 <HAL_RCC_OscConfig+0x2a8>
 80022de:	e014      	b.n	800230a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e0:	f7fe f972 	bl	80005c8 <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022e8:	f7fe f96e 	bl	80005c8 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b64      	cmp	r3, #100	; 0x64
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e26c      	b.n	80027d4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022fa:	4ba5      	ldr	r3, [pc, #660]	; (8002590 <HAL_RCC_OscConfig+0x578>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1f0      	bne.n	80022e8 <HAL_RCC_OscConfig+0x2d0>
 8002306:	e000      	b.n	800230a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002308:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d060      	beq.n	80023d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	2b04      	cmp	r3, #4
 800231a:	d005      	beq.n	8002328 <HAL_RCC_OscConfig+0x310>
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	2b0c      	cmp	r3, #12
 8002320:	d119      	bne.n	8002356 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	2b02      	cmp	r3, #2
 8002326:	d116      	bne.n	8002356 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002328:	4b99      	ldr	r3, [pc, #612]	; (8002590 <HAL_RCC_OscConfig+0x578>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002330:	2b00      	cmp	r3, #0
 8002332:	d005      	beq.n	8002340 <HAL_RCC_OscConfig+0x328>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e249      	b.n	80027d4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002340:	4b93      	ldr	r3, [pc, #588]	; (8002590 <HAL_RCC_OscConfig+0x578>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	061b      	lsls	r3, r3, #24
 800234e:	4990      	ldr	r1, [pc, #576]	; (8002590 <HAL_RCC_OscConfig+0x578>)
 8002350:	4313      	orrs	r3, r2
 8002352:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002354:	e040      	b.n	80023d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d023      	beq.n	80023a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800235e:	4b8c      	ldr	r3, [pc, #560]	; (8002590 <HAL_RCC_OscConfig+0x578>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a8b      	ldr	r2, [pc, #556]	; (8002590 <HAL_RCC_OscConfig+0x578>)
 8002364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002368:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236a:	f7fe f92d 	bl	80005c8 <HAL_GetTick>
 800236e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002370:	e008      	b.n	8002384 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002372:	f7fe f929 	bl	80005c8 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e227      	b.n	80027d4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002384:	4b82      	ldr	r3, [pc, #520]	; (8002590 <HAL_RCC_OscConfig+0x578>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0f0      	beq.n	8002372 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002390:	4b7f      	ldr	r3, [pc, #508]	; (8002590 <HAL_RCC_OscConfig+0x578>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	061b      	lsls	r3, r3, #24
 800239e:	497c      	ldr	r1, [pc, #496]	; (8002590 <HAL_RCC_OscConfig+0x578>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	604b      	str	r3, [r1, #4]
 80023a4:	e018      	b.n	80023d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023a6:	4b7a      	ldr	r3, [pc, #488]	; (8002590 <HAL_RCC_OscConfig+0x578>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a79      	ldr	r2, [pc, #484]	; (8002590 <HAL_RCC_OscConfig+0x578>)
 80023ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b2:	f7fe f909 	bl	80005c8 <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023b8:	e008      	b.n	80023cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ba:	f7fe f905 	bl	80005c8 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e203      	b.n	80027d4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023cc:	4b70      	ldr	r3, [pc, #448]	; (8002590 <HAL_RCC_OscConfig+0x578>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1f0      	bne.n	80023ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0308 	and.w	r3, r3, #8
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d03c      	beq.n	800245e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d01c      	beq.n	8002426 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ec:	4b68      	ldr	r3, [pc, #416]	; (8002590 <HAL_RCC_OscConfig+0x578>)
 80023ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023f2:	4a67      	ldr	r2, [pc, #412]	; (8002590 <HAL_RCC_OscConfig+0x578>)
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023fc:	f7fe f8e4 	bl	80005c8 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002404:	f7fe f8e0 	bl	80005c8 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e1de      	b.n	80027d4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002416:	4b5e      	ldr	r3, [pc, #376]	; (8002590 <HAL_RCC_OscConfig+0x578>)
 8002418:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d0ef      	beq.n	8002404 <HAL_RCC_OscConfig+0x3ec>
 8002424:	e01b      	b.n	800245e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002426:	4b5a      	ldr	r3, [pc, #360]	; (8002590 <HAL_RCC_OscConfig+0x578>)
 8002428:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800242c:	4a58      	ldr	r2, [pc, #352]	; (8002590 <HAL_RCC_OscConfig+0x578>)
 800242e:	f023 0301 	bic.w	r3, r3, #1
 8002432:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002436:	f7fe f8c7 	bl	80005c8 <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800243c:	e008      	b.n	8002450 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800243e:	f7fe f8c3 	bl	80005c8 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e1c1      	b.n	80027d4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002450:	4b4f      	ldr	r3, [pc, #316]	; (8002590 <HAL_RCC_OscConfig+0x578>)
 8002452:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1ef      	bne.n	800243e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0304 	and.w	r3, r3, #4
 8002466:	2b00      	cmp	r3, #0
 8002468:	f000 80a6 	beq.w	80025b8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800246c:	2300      	movs	r3, #0
 800246e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002470:	4b47      	ldr	r3, [pc, #284]	; (8002590 <HAL_RCC_OscConfig+0x578>)
 8002472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d10d      	bne.n	8002498 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800247c:	4b44      	ldr	r3, [pc, #272]	; (8002590 <HAL_RCC_OscConfig+0x578>)
 800247e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002480:	4a43      	ldr	r2, [pc, #268]	; (8002590 <HAL_RCC_OscConfig+0x578>)
 8002482:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002486:	6593      	str	r3, [r2, #88]	; 0x58
 8002488:	4b41      	ldr	r3, [pc, #260]	; (8002590 <HAL_RCC_OscConfig+0x578>)
 800248a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002490:	60bb      	str	r3, [r7, #8]
 8002492:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002494:	2301      	movs	r3, #1
 8002496:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002498:	4b3e      	ldr	r3, [pc, #248]	; (8002594 <HAL_RCC_OscConfig+0x57c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d118      	bne.n	80024d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024a4:	4b3b      	ldr	r3, [pc, #236]	; (8002594 <HAL_RCC_OscConfig+0x57c>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a3a      	ldr	r2, [pc, #232]	; (8002594 <HAL_RCC_OscConfig+0x57c>)
 80024aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024b0:	f7fe f88a 	bl	80005c8 <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024b8:	f7fe f886 	bl	80005c8 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e184      	b.n	80027d4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024ca:	4b32      	ldr	r3, [pc, #200]	; (8002594 <HAL_RCC_OscConfig+0x57c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d0f0      	beq.n	80024b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d108      	bne.n	80024f0 <HAL_RCC_OscConfig+0x4d8>
 80024de:	4b2c      	ldr	r3, [pc, #176]	; (8002590 <HAL_RCC_OscConfig+0x578>)
 80024e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e4:	4a2a      	ldr	r2, [pc, #168]	; (8002590 <HAL_RCC_OscConfig+0x578>)
 80024e6:	f043 0301 	orr.w	r3, r3, #1
 80024ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024ee:	e024      	b.n	800253a <HAL_RCC_OscConfig+0x522>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	2b05      	cmp	r3, #5
 80024f6:	d110      	bne.n	800251a <HAL_RCC_OscConfig+0x502>
 80024f8:	4b25      	ldr	r3, [pc, #148]	; (8002590 <HAL_RCC_OscConfig+0x578>)
 80024fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024fe:	4a24      	ldr	r2, [pc, #144]	; (8002590 <HAL_RCC_OscConfig+0x578>)
 8002500:	f043 0304 	orr.w	r3, r3, #4
 8002504:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002508:	4b21      	ldr	r3, [pc, #132]	; (8002590 <HAL_RCC_OscConfig+0x578>)
 800250a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250e:	4a20      	ldr	r2, [pc, #128]	; (8002590 <HAL_RCC_OscConfig+0x578>)
 8002510:	f043 0301 	orr.w	r3, r3, #1
 8002514:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002518:	e00f      	b.n	800253a <HAL_RCC_OscConfig+0x522>
 800251a:	4b1d      	ldr	r3, [pc, #116]	; (8002590 <HAL_RCC_OscConfig+0x578>)
 800251c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002520:	4a1b      	ldr	r2, [pc, #108]	; (8002590 <HAL_RCC_OscConfig+0x578>)
 8002522:	f023 0301 	bic.w	r3, r3, #1
 8002526:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800252a:	4b19      	ldr	r3, [pc, #100]	; (8002590 <HAL_RCC_OscConfig+0x578>)
 800252c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002530:	4a17      	ldr	r2, [pc, #92]	; (8002590 <HAL_RCC_OscConfig+0x578>)
 8002532:	f023 0304 	bic.w	r3, r3, #4
 8002536:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d016      	beq.n	8002570 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002542:	f7fe f841 	bl	80005c8 <HAL_GetTick>
 8002546:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002548:	e00a      	b.n	8002560 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800254a:	f7fe f83d 	bl	80005c8 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	f241 3288 	movw	r2, #5000	; 0x1388
 8002558:	4293      	cmp	r3, r2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e139      	b.n	80027d4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002560:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <HAL_RCC_OscConfig+0x578>)
 8002562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d0ed      	beq.n	800254a <HAL_RCC_OscConfig+0x532>
 800256e:	e01a      	b.n	80025a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002570:	f7fe f82a 	bl	80005c8 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002576:	e00f      	b.n	8002598 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002578:	f7fe f826 	bl	80005c8 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	f241 3288 	movw	r2, #5000	; 0x1388
 8002586:	4293      	cmp	r3, r2
 8002588:	d906      	bls.n	8002598 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e122      	b.n	80027d4 <HAL_RCC_OscConfig+0x7bc>
 800258e:	bf00      	nop
 8002590:	40021000 	.word	0x40021000
 8002594:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002598:	4b90      	ldr	r3, [pc, #576]	; (80027dc <HAL_RCC_OscConfig+0x7c4>)
 800259a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1e8      	bne.n	8002578 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025a6:	7ffb      	ldrb	r3, [r7, #31]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d105      	bne.n	80025b8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ac:	4b8b      	ldr	r3, [pc, #556]	; (80027dc <HAL_RCC_OscConfig+0x7c4>)
 80025ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b0:	4a8a      	ldr	r2, [pc, #552]	; (80027dc <HAL_RCC_OscConfig+0x7c4>)
 80025b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025b6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f000 8108 	beq.w	80027d2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	f040 80d0 	bne.w	800276c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80025cc:	4b83      	ldr	r3, [pc, #524]	; (80027dc <HAL_RCC_OscConfig+0x7c4>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	f003 0203 	and.w	r2, r3, #3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025dc:	429a      	cmp	r2, r3
 80025de:	d130      	bne.n	8002642 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	3b01      	subs	r3, #1
 80025ec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d127      	bne.n	8002642 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025fc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025fe:	429a      	cmp	r2, r3
 8002600:	d11f      	bne.n	8002642 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800260c:	2a07      	cmp	r2, #7
 800260e:	bf14      	ite	ne
 8002610:	2201      	movne	r2, #1
 8002612:	2200      	moveq	r2, #0
 8002614:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002616:	4293      	cmp	r3, r2
 8002618:	d113      	bne.n	8002642 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002624:	085b      	lsrs	r3, r3, #1
 8002626:	3b01      	subs	r3, #1
 8002628:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800262a:	429a      	cmp	r2, r3
 800262c:	d109      	bne.n	8002642 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002638:	085b      	lsrs	r3, r3, #1
 800263a:	3b01      	subs	r3, #1
 800263c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800263e:	429a      	cmp	r2, r3
 8002640:	d06e      	beq.n	8002720 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	2b0c      	cmp	r3, #12
 8002646:	d069      	beq.n	800271c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002648:	4b64      	ldr	r3, [pc, #400]	; (80027dc <HAL_RCC_OscConfig+0x7c4>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d105      	bne.n	8002660 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002654:	4b61      	ldr	r3, [pc, #388]	; (80027dc <HAL_RCC_OscConfig+0x7c4>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e0b7      	b.n	80027d4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002664:	4b5d      	ldr	r3, [pc, #372]	; (80027dc <HAL_RCC_OscConfig+0x7c4>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a5c      	ldr	r2, [pc, #368]	; (80027dc <HAL_RCC_OscConfig+0x7c4>)
 800266a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800266e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002670:	f7fd ffaa 	bl	80005c8 <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002678:	f7fd ffa6 	bl	80005c8 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b02      	cmp	r3, #2
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e0a4      	b.n	80027d4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800268a:	4b54      	ldr	r3, [pc, #336]	; (80027dc <HAL_RCC_OscConfig+0x7c4>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1f0      	bne.n	8002678 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002696:	4b51      	ldr	r3, [pc, #324]	; (80027dc <HAL_RCC_OscConfig+0x7c4>)
 8002698:	68da      	ldr	r2, [r3, #12]
 800269a:	4b51      	ldr	r3, [pc, #324]	; (80027e0 <HAL_RCC_OscConfig+0x7c8>)
 800269c:	4013      	ands	r3, r2
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80026a6:	3a01      	subs	r2, #1
 80026a8:	0112      	lsls	r2, r2, #4
 80026aa:	4311      	orrs	r1, r2
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80026b0:	0212      	lsls	r2, r2, #8
 80026b2:	4311      	orrs	r1, r2
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80026b8:	0852      	lsrs	r2, r2, #1
 80026ba:	3a01      	subs	r2, #1
 80026bc:	0552      	lsls	r2, r2, #21
 80026be:	4311      	orrs	r1, r2
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80026c4:	0852      	lsrs	r2, r2, #1
 80026c6:	3a01      	subs	r2, #1
 80026c8:	0652      	lsls	r2, r2, #25
 80026ca:	4311      	orrs	r1, r2
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026d0:	0912      	lsrs	r2, r2, #4
 80026d2:	0452      	lsls	r2, r2, #17
 80026d4:	430a      	orrs	r2, r1
 80026d6:	4941      	ldr	r1, [pc, #260]	; (80027dc <HAL_RCC_OscConfig+0x7c4>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80026dc:	4b3f      	ldr	r3, [pc, #252]	; (80027dc <HAL_RCC_OscConfig+0x7c4>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a3e      	ldr	r2, [pc, #248]	; (80027dc <HAL_RCC_OscConfig+0x7c4>)
 80026e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026e6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026e8:	4b3c      	ldr	r3, [pc, #240]	; (80027dc <HAL_RCC_OscConfig+0x7c4>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	4a3b      	ldr	r2, [pc, #236]	; (80027dc <HAL_RCC_OscConfig+0x7c4>)
 80026ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026f4:	f7fd ff68 	bl	80005c8 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026fc:	f7fd ff64 	bl	80005c8 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e062      	b.n	80027d4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800270e:	4b33      	ldr	r3, [pc, #204]	; (80027dc <HAL_RCC_OscConfig+0x7c4>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0f0      	beq.n	80026fc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800271a:	e05a      	b.n	80027d2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e059      	b.n	80027d4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002720:	4b2e      	ldr	r3, [pc, #184]	; (80027dc <HAL_RCC_OscConfig+0x7c4>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d152      	bne.n	80027d2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800272c:	4b2b      	ldr	r3, [pc, #172]	; (80027dc <HAL_RCC_OscConfig+0x7c4>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a2a      	ldr	r2, [pc, #168]	; (80027dc <HAL_RCC_OscConfig+0x7c4>)
 8002732:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002736:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002738:	4b28      	ldr	r3, [pc, #160]	; (80027dc <HAL_RCC_OscConfig+0x7c4>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	4a27      	ldr	r2, [pc, #156]	; (80027dc <HAL_RCC_OscConfig+0x7c4>)
 800273e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002742:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002744:	f7fd ff40 	bl	80005c8 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800274c:	f7fd ff3c 	bl	80005c8 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e03a      	b.n	80027d4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800275e:	4b1f      	ldr	r3, [pc, #124]	; (80027dc <HAL_RCC_OscConfig+0x7c4>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d0f0      	beq.n	800274c <HAL_RCC_OscConfig+0x734>
 800276a:	e032      	b.n	80027d2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	2b0c      	cmp	r3, #12
 8002770:	d02d      	beq.n	80027ce <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002772:	4b1a      	ldr	r3, [pc, #104]	; (80027dc <HAL_RCC_OscConfig+0x7c4>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a19      	ldr	r2, [pc, #100]	; (80027dc <HAL_RCC_OscConfig+0x7c4>)
 8002778:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800277c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800277e:	4b17      	ldr	r3, [pc, #92]	; (80027dc <HAL_RCC_OscConfig+0x7c4>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d105      	bne.n	8002796 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800278a:	4b14      	ldr	r3, [pc, #80]	; (80027dc <HAL_RCC_OscConfig+0x7c4>)
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	4a13      	ldr	r2, [pc, #76]	; (80027dc <HAL_RCC_OscConfig+0x7c4>)
 8002790:	f023 0303 	bic.w	r3, r3, #3
 8002794:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002796:	4b11      	ldr	r3, [pc, #68]	; (80027dc <HAL_RCC_OscConfig+0x7c4>)
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	4a10      	ldr	r2, [pc, #64]	; (80027dc <HAL_RCC_OscConfig+0x7c4>)
 800279c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80027a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027a4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a6:	f7fd ff0f 	bl	80005c8 <HAL_GetTick>
 80027aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027ac:	e008      	b.n	80027c0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ae:	f7fd ff0b 	bl	80005c8 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e009      	b.n	80027d4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027c0:	4b06      	ldr	r3, [pc, #24]	; (80027dc <HAL_RCC_OscConfig+0x7c4>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1f0      	bne.n	80027ae <HAL_RCC_OscConfig+0x796>
 80027cc:	e001      	b.n	80027d2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e000      	b.n	80027d4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3720      	adds	r7, #32
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40021000 	.word	0x40021000
 80027e0:	f99d808c 	.word	0xf99d808c

080027e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d101      	bne.n	80027f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0c8      	b.n	800298a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027f8:	4b66      	ldr	r3, [pc, #408]	; (8002994 <HAL_RCC_ClockConfig+0x1b0>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d910      	bls.n	8002828 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002806:	4b63      	ldr	r3, [pc, #396]	; (8002994 <HAL_RCC_ClockConfig+0x1b0>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f023 0207 	bic.w	r2, r3, #7
 800280e:	4961      	ldr	r1, [pc, #388]	; (8002994 <HAL_RCC_ClockConfig+0x1b0>)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	4313      	orrs	r3, r2
 8002814:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002816:	4b5f      	ldr	r3, [pc, #380]	; (8002994 <HAL_RCC_ClockConfig+0x1b0>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	429a      	cmp	r2, r3
 8002822:	d001      	beq.n	8002828 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e0b0      	b.n	800298a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b00      	cmp	r3, #0
 8002832:	d04c      	beq.n	80028ce <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	2b03      	cmp	r3, #3
 800283a:	d107      	bne.n	800284c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800283c:	4b56      	ldr	r3, [pc, #344]	; (8002998 <HAL_RCC_ClockConfig+0x1b4>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d121      	bne.n	800288c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e09e      	b.n	800298a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	2b02      	cmp	r3, #2
 8002852:	d107      	bne.n	8002864 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002854:	4b50      	ldr	r3, [pc, #320]	; (8002998 <HAL_RCC_ClockConfig+0x1b4>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d115      	bne.n	800288c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e092      	b.n	800298a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d107      	bne.n	800287c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800286c:	4b4a      	ldr	r3, [pc, #296]	; (8002998 <HAL_RCC_ClockConfig+0x1b4>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d109      	bne.n	800288c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e086      	b.n	800298a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800287c:	4b46      	ldr	r3, [pc, #280]	; (8002998 <HAL_RCC_ClockConfig+0x1b4>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002884:	2b00      	cmp	r3, #0
 8002886:	d101      	bne.n	800288c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e07e      	b.n	800298a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800288c:	4b42      	ldr	r3, [pc, #264]	; (8002998 <HAL_RCC_ClockConfig+0x1b4>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f023 0203 	bic.w	r2, r3, #3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	493f      	ldr	r1, [pc, #252]	; (8002998 <HAL_RCC_ClockConfig+0x1b4>)
 800289a:	4313      	orrs	r3, r2
 800289c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800289e:	f7fd fe93 	bl	80005c8 <HAL_GetTick>
 80028a2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028a4:	e00a      	b.n	80028bc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028a6:	f7fd fe8f 	bl	80005c8 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e066      	b.n	800298a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028bc:	4b36      	ldr	r3, [pc, #216]	; (8002998 <HAL_RCC_ClockConfig+0x1b4>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f003 020c 	and.w	r2, r3, #12
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d1eb      	bne.n	80028a6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d008      	beq.n	80028ec <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028da:	4b2f      	ldr	r3, [pc, #188]	; (8002998 <HAL_RCC_ClockConfig+0x1b4>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	492c      	ldr	r1, [pc, #176]	; (8002998 <HAL_RCC_ClockConfig+0x1b4>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028ec:	4b29      	ldr	r3, [pc, #164]	; (8002994 <HAL_RCC_ClockConfig+0x1b0>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0307 	and.w	r3, r3, #7
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d210      	bcs.n	800291c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028fa:	4b26      	ldr	r3, [pc, #152]	; (8002994 <HAL_RCC_ClockConfig+0x1b0>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f023 0207 	bic.w	r2, r3, #7
 8002902:	4924      	ldr	r1, [pc, #144]	; (8002994 <HAL_RCC_ClockConfig+0x1b0>)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	4313      	orrs	r3, r2
 8002908:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800290a:	4b22      	ldr	r3, [pc, #136]	; (8002994 <HAL_RCC_ClockConfig+0x1b0>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	429a      	cmp	r2, r3
 8002916:	d001      	beq.n	800291c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e036      	b.n	800298a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	2b00      	cmp	r3, #0
 8002926:	d008      	beq.n	800293a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002928:	4b1b      	ldr	r3, [pc, #108]	; (8002998 <HAL_RCC_ClockConfig+0x1b4>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	4918      	ldr	r1, [pc, #96]	; (8002998 <HAL_RCC_ClockConfig+0x1b4>)
 8002936:	4313      	orrs	r3, r2
 8002938:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0308 	and.w	r3, r3, #8
 8002942:	2b00      	cmp	r3, #0
 8002944:	d009      	beq.n	800295a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002946:	4b14      	ldr	r3, [pc, #80]	; (8002998 <HAL_RCC_ClockConfig+0x1b4>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	4910      	ldr	r1, [pc, #64]	; (8002998 <HAL_RCC_ClockConfig+0x1b4>)
 8002956:	4313      	orrs	r3, r2
 8002958:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800295a:	f000 f825 	bl	80029a8 <HAL_RCC_GetSysClockFreq>
 800295e:	4601      	mov	r1, r0
 8002960:	4b0d      	ldr	r3, [pc, #52]	; (8002998 <HAL_RCC_ClockConfig+0x1b4>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	091b      	lsrs	r3, r3, #4
 8002966:	f003 030f 	and.w	r3, r3, #15
 800296a:	4a0c      	ldr	r2, [pc, #48]	; (800299c <HAL_RCC_ClockConfig+0x1b8>)
 800296c:	5cd3      	ldrb	r3, [r2, r3]
 800296e:	f003 031f 	and.w	r3, r3, #31
 8002972:	fa21 f303 	lsr.w	r3, r1, r3
 8002976:	4a0a      	ldr	r2, [pc, #40]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002978:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800297a:	4b0a      	ldr	r3, [pc, #40]	; (80029a4 <HAL_RCC_ClockConfig+0x1c0>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f002 fe98 	bl	80056b4 <HAL_InitTick>
 8002984:	4603      	mov	r3, r0
 8002986:	72fb      	strb	r3, [r7, #11]

  return status;
 8002988:	7afb      	ldrb	r3, [r7, #11]
}
 800298a:	4618      	mov	r0, r3
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40022000 	.word	0x40022000
 8002998:	40021000 	.word	0x40021000
 800299c:	080061b8 	.word	0x080061b8
 80029a0:	2000003c 	.word	0x2000003c
 80029a4:	20000000 	.word	0x20000000

080029a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b089      	sub	sp, #36	; 0x24
 80029ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	61fb      	str	r3, [r7, #28]
 80029b2:	2300      	movs	r3, #0
 80029b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029b6:	4b3d      	ldr	r3, [pc, #244]	; (8002aac <HAL_RCC_GetSysClockFreq+0x104>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 030c 	and.w	r3, r3, #12
 80029be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029c0:	4b3a      	ldr	r3, [pc, #232]	; (8002aac <HAL_RCC_GetSysClockFreq+0x104>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	f003 0303 	and.w	r3, r3, #3
 80029c8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d005      	beq.n	80029dc <HAL_RCC_GetSysClockFreq+0x34>
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	2b0c      	cmp	r3, #12
 80029d4:	d121      	bne.n	8002a1a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d11e      	bne.n	8002a1a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80029dc:	4b33      	ldr	r3, [pc, #204]	; (8002aac <HAL_RCC_GetSysClockFreq+0x104>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0308 	and.w	r3, r3, #8
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d107      	bne.n	80029f8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80029e8:	4b30      	ldr	r3, [pc, #192]	; (8002aac <HAL_RCC_GetSysClockFreq+0x104>)
 80029ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029ee:	0a1b      	lsrs	r3, r3, #8
 80029f0:	f003 030f 	and.w	r3, r3, #15
 80029f4:	61fb      	str	r3, [r7, #28]
 80029f6:	e005      	b.n	8002a04 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80029f8:	4b2c      	ldr	r3, [pc, #176]	; (8002aac <HAL_RCC_GetSysClockFreq+0x104>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	091b      	lsrs	r3, r3, #4
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a04:	4a2a      	ldr	r2, [pc, #168]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a0c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10d      	bne.n	8002a30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a18:	e00a      	b.n	8002a30 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	2b04      	cmp	r3, #4
 8002a1e:	d102      	bne.n	8002a26 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a20:	4b24      	ldr	r3, [pc, #144]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a22:	61bb      	str	r3, [r7, #24]
 8002a24:	e004      	b.n	8002a30 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	2b08      	cmp	r3, #8
 8002a2a:	d101      	bne.n	8002a30 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a2c:	4b22      	ldr	r3, [pc, #136]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a2e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	2b0c      	cmp	r3, #12
 8002a34:	d133      	bne.n	8002a9e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a36:	4b1d      	ldr	r3, [pc, #116]	; (8002aac <HAL_RCC_GetSysClockFreq+0x104>)
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	f003 0303 	and.w	r3, r3, #3
 8002a3e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d002      	beq.n	8002a4c <HAL_RCC_GetSysClockFreq+0xa4>
 8002a46:	2b03      	cmp	r3, #3
 8002a48:	d003      	beq.n	8002a52 <HAL_RCC_GetSysClockFreq+0xaa>
 8002a4a:	e005      	b.n	8002a58 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a4c:	4b19      	ldr	r3, [pc, #100]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a4e:	617b      	str	r3, [r7, #20]
      break;
 8002a50:	e005      	b.n	8002a5e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a52:	4b19      	ldr	r3, [pc, #100]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a54:	617b      	str	r3, [r7, #20]
      break;
 8002a56:	e002      	b.n	8002a5e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	617b      	str	r3, [r7, #20]
      break;
 8002a5c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a5e:	4b13      	ldr	r3, [pc, #76]	; (8002aac <HAL_RCC_GetSysClockFreq+0x104>)
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	091b      	lsrs	r3, r3, #4
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	3301      	adds	r3, #1
 8002a6a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a6c:	4b0f      	ldr	r3, [pc, #60]	; (8002aac <HAL_RCC_GetSysClockFreq+0x104>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	0a1b      	lsrs	r3, r3, #8
 8002a72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	fb02 f203 	mul.w	r2, r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a82:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a84:	4b09      	ldr	r3, [pc, #36]	; (8002aac <HAL_RCC_GetSysClockFreq+0x104>)
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	0e5b      	lsrs	r3, r3, #25
 8002a8a:	f003 0303 	and.w	r3, r3, #3
 8002a8e:	3301      	adds	r3, #1
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a9c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a9e:	69bb      	ldr	r3, [r7, #24]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3724      	adds	r7, #36	; 0x24
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	080061d0 	.word	0x080061d0
 8002ab4:	00f42400 	.word	0x00f42400
 8002ab8:	007a1200 	.word	0x007a1200

08002abc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ac0:	4b03      	ldr	r3, [pc, #12]	; (8002ad0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	2000003c 	.word	0x2000003c

08002ad4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ad8:	f7ff fff0 	bl	8002abc <HAL_RCC_GetHCLKFreq>
 8002adc:	4601      	mov	r1, r0
 8002ade:	4b06      	ldr	r3, [pc, #24]	; (8002af8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	0a1b      	lsrs	r3, r3, #8
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	4a04      	ldr	r2, [pc, #16]	; (8002afc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002aea:	5cd3      	ldrb	r3, [r2, r3]
 8002aec:	f003 031f 	and.w	r3, r3, #31
 8002af0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	40021000 	.word	0x40021000
 8002afc:	080061c8 	.word	0x080061c8

08002b00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b04:	f7ff ffda 	bl	8002abc <HAL_RCC_GetHCLKFreq>
 8002b08:	4601      	mov	r1, r0
 8002b0a:	4b06      	ldr	r3, [pc, #24]	; (8002b24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	0adb      	lsrs	r3, r3, #11
 8002b10:	f003 0307 	and.w	r3, r3, #7
 8002b14:	4a04      	ldr	r2, [pc, #16]	; (8002b28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b16:	5cd3      	ldrb	r3, [r2, r3]
 8002b18:	f003 031f 	and.w	r3, r3, #31
 8002b1c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40021000 	.word	0x40021000
 8002b28:	080061c8 	.word	0x080061c8

08002b2c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	220f      	movs	r2, #15
 8002b3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002b3c:	4b12      	ldr	r3, [pc, #72]	; (8002b88 <HAL_RCC_GetClockConfig+0x5c>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f003 0203 	and.w	r2, r3, #3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002b48:	4b0f      	ldr	r3, [pc, #60]	; (8002b88 <HAL_RCC_GetClockConfig+0x5c>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002b54:	4b0c      	ldr	r3, [pc, #48]	; (8002b88 <HAL_RCC_GetClockConfig+0x5c>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002b60:	4b09      	ldr	r3, [pc, #36]	; (8002b88 <HAL_RCC_GetClockConfig+0x5c>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	08db      	lsrs	r3, r3, #3
 8002b66:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002b6e:	4b07      	ldr	r3, [pc, #28]	; (8002b8c <HAL_RCC_GetClockConfig+0x60>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0207 	and.w	r2, r3, #7
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	601a      	str	r2, [r3, #0]
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	40022000 	.word	0x40022000

08002b90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b98:	2300      	movs	r3, #0
 8002b9a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b9c:	4b2a      	ldr	r3, [pc, #168]	; (8002c48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d003      	beq.n	8002bb0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ba8:	f7ff f916 	bl	8001dd8 <HAL_PWREx_GetVoltageRange>
 8002bac:	6178      	str	r0, [r7, #20]
 8002bae:	e014      	b.n	8002bda <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bb0:	4b25      	ldr	r3, [pc, #148]	; (8002c48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb4:	4a24      	ldr	r2, [pc, #144]	; (8002c48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bba:	6593      	str	r3, [r2, #88]	; 0x58
 8002bbc:	4b22      	ldr	r3, [pc, #136]	; (8002c48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002bc8:	f7ff f906 	bl	8001dd8 <HAL_PWREx_GetVoltageRange>
 8002bcc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002bce:	4b1e      	ldr	r3, [pc, #120]	; (8002c48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd2:	4a1d      	ldr	r2, [pc, #116]	; (8002c48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bd8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002be0:	d10b      	bne.n	8002bfa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b80      	cmp	r3, #128	; 0x80
 8002be6:	d919      	bls.n	8002c1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2ba0      	cmp	r3, #160	; 0xa0
 8002bec:	d902      	bls.n	8002bf4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bee:	2302      	movs	r3, #2
 8002bf0:	613b      	str	r3, [r7, #16]
 8002bf2:	e013      	b.n	8002c1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	613b      	str	r3, [r7, #16]
 8002bf8:	e010      	b.n	8002c1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2b80      	cmp	r3, #128	; 0x80
 8002bfe:	d902      	bls.n	8002c06 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c00:	2303      	movs	r3, #3
 8002c02:	613b      	str	r3, [r7, #16]
 8002c04:	e00a      	b.n	8002c1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2b80      	cmp	r3, #128	; 0x80
 8002c0a:	d102      	bne.n	8002c12 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	613b      	str	r3, [r7, #16]
 8002c10:	e004      	b.n	8002c1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2b70      	cmp	r3, #112	; 0x70
 8002c16:	d101      	bne.n	8002c1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c18:	2301      	movs	r3, #1
 8002c1a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c1c:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f023 0207 	bic.w	r2, r3, #7
 8002c24:	4909      	ldr	r1, [pc, #36]	; (8002c4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c2c:	4b07      	ldr	r3, [pc, #28]	; (8002c4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d001      	beq.n	8002c3e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e000      	b.n	8002c40 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3718      	adds	r7, #24
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	40022000 	.word	0x40022000

08002c50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c58:	2300      	movs	r3, #0
 8002c5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d03f      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c74:	d01c      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002c76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c7a:	d802      	bhi.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00e      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002c80:	e01f      	b.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002c82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c86:	d003      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002c88:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c8c:	d01c      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002c8e:	e018      	b.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c90:	4b85      	ldr	r3, [pc, #532]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	4a84      	ldr	r2, [pc, #528]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c9a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c9c:	e015      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f000 fab9 	bl	800321c <RCCEx_PLLSAI1_Config>
 8002caa:	4603      	mov	r3, r0
 8002cac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002cae:	e00c      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	3320      	adds	r3, #32
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 fba0 	bl	80033fc <RCCEx_PLLSAI2_Config>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002cc0:	e003      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	74fb      	strb	r3, [r7, #19]
      break;
 8002cc6:	e000      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002cc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cca:	7cfb      	ldrb	r3, [r7, #19]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10b      	bne.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002cd0:	4b75      	ldr	r3, [pc, #468]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cde:	4972      	ldr	r1, [pc, #456]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002ce6:	e001      	b.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ce8:	7cfb      	ldrb	r3, [r7, #19]
 8002cea:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d03f      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d00:	d01c      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002d02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d06:	d802      	bhi.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00e      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002d0c:	e01f      	b.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002d0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d12:	d003      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002d14:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d18:	d01c      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002d1a:	e018      	b.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d1c:	4b62      	ldr	r3, [pc, #392]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	4a61      	ldr	r2, [pc, #388]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d26:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d28:	e015      	b.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	3304      	adds	r3, #4
 8002d2e:	2100      	movs	r1, #0
 8002d30:	4618      	mov	r0, r3
 8002d32:	f000 fa73 	bl	800321c <RCCEx_PLLSAI1_Config>
 8002d36:	4603      	mov	r3, r0
 8002d38:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d3a:	e00c      	b.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3320      	adds	r3, #32
 8002d40:	2100      	movs	r1, #0
 8002d42:	4618      	mov	r0, r3
 8002d44:	f000 fb5a 	bl	80033fc <RCCEx_PLLSAI2_Config>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d4c:	e003      	b.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	74fb      	strb	r3, [r7, #19]
      break;
 8002d52:	e000      	b.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002d54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d56:	7cfb      	ldrb	r3, [r7, #19]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10b      	bne.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d5c:	4b52      	ldr	r3, [pc, #328]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d62:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d6a:	494f      	ldr	r1, [pc, #316]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d72:	e001      	b.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d74:	7cfb      	ldrb	r3, [r7, #19]
 8002d76:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f000 80a0 	beq.w	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d86:	2300      	movs	r3, #0
 8002d88:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d8a:	4b47      	ldr	r3, [pc, #284]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002d96:	2301      	movs	r3, #1
 8002d98:	e000      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00d      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002da0:	4b41      	ldr	r3, [pc, #260]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da4:	4a40      	ldr	r2, [pc, #256]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002da6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002daa:	6593      	str	r3, [r2, #88]	; 0x58
 8002dac:	4b3e      	ldr	r3, [pc, #248]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db4:	60bb      	str	r3, [r7, #8]
 8002db6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002db8:	2301      	movs	r3, #1
 8002dba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dbc:	4b3b      	ldr	r3, [pc, #236]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a3a      	ldr	r2, [pc, #232]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dc8:	f7fd fbfe 	bl	80005c8 <HAL_GetTick>
 8002dcc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002dce:	e009      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dd0:	f7fd fbfa 	bl	80005c8 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d902      	bls.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	74fb      	strb	r3, [r7, #19]
        break;
 8002de2:	e005      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002de4:	4b31      	ldr	r3, [pc, #196]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d0ef      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002df0:	7cfb      	ldrb	r3, [r7, #19]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d15c      	bne.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002df6:	4b2c      	ldr	r3, [pc, #176]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e00:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d01f      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d019      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e14:	4b24      	ldr	r3, [pc, #144]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e1e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e20:	4b21      	ldr	r3, [pc, #132]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e26:	4a20      	ldr	r2, [pc, #128]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e30:	4b1d      	ldr	r3, [pc, #116]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e36:	4a1c      	ldr	r2, [pc, #112]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e40:	4a19      	ldr	r2, [pc, #100]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d016      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e52:	f7fd fbb9 	bl	80005c8 <HAL_GetTick>
 8002e56:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e58:	e00b      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e5a:	f7fd fbb5 	bl	80005c8 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d902      	bls.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	74fb      	strb	r3, [r7, #19]
            break;
 8002e70:	e006      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e72:	4b0d      	ldr	r3, [pc, #52]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d0ec      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002e80:	7cfb      	ldrb	r3, [r7, #19]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10c      	bne.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e86:	4b08      	ldr	r3, [pc, #32]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e96:	4904      	ldr	r1, [pc, #16]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002e9e:	e009      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ea0:	7cfb      	ldrb	r3, [r7, #19]
 8002ea2:	74bb      	strb	r3, [r7, #18]
 8002ea4:	e006      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002ea6:	bf00      	nop
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eb0:	7cfb      	ldrb	r3, [r7, #19]
 8002eb2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002eb4:	7c7b      	ldrb	r3, [r7, #17]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d105      	bne.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eba:	4b9e      	ldr	r3, [pc, #632]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ebe:	4a9d      	ldr	r2, [pc, #628]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ec0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ec4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00a      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ed2:	4b98      	ldr	r3, [pc, #608]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed8:	f023 0203 	bic.w	r2, r3, #3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee0:	4994      	ldr	r1, [pc, #592]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00a      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ef4:	4b8f      	ldr	r3, [pc, #572]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002efa:	f023 020c 	bic.w	r2, r3, #12
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f02:	498c      	ldr	r1, [pc, #560]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0304 	and.w	r3, r3, #4
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00a      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f16:	4b87      	ldr	r3, [pc, #540]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f1c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f24:	4983      	ldr	r1, [pc, #524]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0308 	and.w	r3, r3, #8
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00a      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f38:	4b7e      	ldr	r3, [pc, #504]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f3e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f46:	497b      	ldr	r1, [pc, #492]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0310 	and.w	r3, r3, #16
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00a      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f5a:	4b76      	ldr	r3, [pc, #472]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f68:	4972      	ldr	r1, [pc, #456]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0320 	and.w	r3, r3, #32
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00a      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f7c:	4b6d      	ldr	r3, [pc, #436]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f82:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f8a:	496a      	ldr	r1, [pc, #424]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00a      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f9e:	4b65      	ldr	r3, [pc, #404]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fac:	4961      	ldr	r1, [pc, #388]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00a      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002fc0:	4b5c      	ldr	r3, [pc, #368]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fce:	4959      	ldr	r1, [pc, #356]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00a      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fe2:	4b54      	ldr	r3, [pc, #336]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ff0:	4950      	ldr	r1, [pc, #320]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00a      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003004:	4b4b      	ldr	r3, [pc, #300]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800300a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003012:	4948      	ldr	r1, [pc, #288]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003014:	4313      	orrs	r3, r2
 8003016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00a      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003026:	4b43      	ldr	r3, [pc, #268]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800302c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003034:	493f      	ldr	r1, [pc, #252]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003036:	4313      	orrs	r3, r2
 8003038:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d028      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003048:	4b3a      	ldr	r3, [pc, #232]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800304a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003056:	4937      	ldr	r1, [pc, #220]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003058:	4313      	orrs	r3, r2
 800305a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003062:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003066:	d106      	bne.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003068:	4b32      	ldr	r3, [pc, #200]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	4a31      	ldr	r2, [pc, #196]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800306e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003072:	60d3      	str	r3, [r2, #12]
 8003074:	e011      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800307a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800307e:	d10c      	bne.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	3304      	adds	r3, #4
 8003084:	2101      	movs	r1, #1
 8003086:	4618      	mov	r0, r3
 8003088:	f000 f8c8 	bl	800321c <RCCEx_PLLSAI1_Config>
 800308c:	4603      	mov	r3, r0
 800308e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003090:	7cfb      	ldrb	r3, [r7, #19]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8003096:	7cfb      	ldrb	r3, [r7, #19]
 8003098:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d028      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80030a6:	4b23      	ldr	r3, [pc, #140]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b4:	491f      	ldr	r1, [pc, #124]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030c4:	d106      	bne.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030c6:	4b1b      	ldr	r3, [pc, #108]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	4a1a      	ldr	r2, [pc, #104]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030d0:	60d3      	str	r3, [r2, #12]
 80030d2:	e011      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030dc:	d10c      	bne.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	3304      	adds	r3, #4
 80030e2:	2101      	movs	r1, #1
 80030e4:	4618      	mov	r0, r3
 80030e6:	f000 f899 	bl	800321c <RCCEx_PLLSAI1_Config>
 80030ea:	4603      	mov	r3, r0
 80030ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030ee:	7cfb      	ldrb	r3, [r7, #19]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80030f4:	7cfb      	ldrb	r3, [r7, #19]
 80030f6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d02b      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003104:	4b0b      	ldr	r3, [pc, #44]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800310a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003112:	4908      	ldr	r1, [pc, #32]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003114:	4313      	orrs	r3, r2
 8003116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800311e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003122:	d109      	bne.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003124:	4b03      	ldr	r3, [pc, #12]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	4a02      	ldr	r2, [pc, #8]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800312a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800312e:	60d3      	str	r3, [r2, #12]
 8003130:	e014      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003132:	bf00      	nop
 8003134:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800313c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003140:	d10c      	bne.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	3304      	adds	r3, #4
 8003146:	2101      	movs	r1, #1
 8003148:	4618      	mov	r0, r3
 800314a:	f000 f867 	bl	800321c <RCCEx_PLLSAI1_Config>
 800314e:	4603      	mov	r3, r0
 8003150:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003152:	7cfb      	ldrb	r3, [r7, #19]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d001      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8003158:	7cfb      	ldrb	r3, [r7, #19]
 800315a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d02f      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003168:	4b2b      	ldr	r3, [pc, #172]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800316a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800316e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003176:	4928      	ldr	r1, [pc, #160]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003178:	4313      	orrs	r3, r2
 800317a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003182:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003186:	d10d      	bne.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3304      	adds	r3, #4
 800318c:	2102      	movs	r1, #2
 800318e:	4618      	mov	r0, r3
 8003190:	f000 f844 	bl	800321c <RCCEx_PLLSAI1_Config>
 8003194:	4603      	mov	r3, r0
 8003196:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003198:	7cfb      	ldrb	r3, [r7, #19]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d014      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800319e:	7cfb      	ldrb	r3, [r7, #19]
 80031a0:	74bb      	strb	r3, [r7, #18]
 80031a2:	e011      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031ac:	d10c      	bne.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	3320      	adds	r3, #32
 80031b2:	2102      	movs	r1, #2
 80031b4:	4618      	mov	r0, r3
 80031b6:	f000 f921 	bl	80033fc <RCCEx_PLLSAI2_Config>
 80031ba:	4603      	mov	r3, r0
 80031bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031be:	7cfb      	ldrb	r3, [r7, #19]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80031c4:	7cfb      	ldrb	r3, [r7, #19]
 80031c6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00a      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80031d4:	4b10      	ldr	r3, [pc, #64]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031da:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031e2:	490d      	ldr	r1, [pc, #52]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00b      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80031f6:	4b08      	ldr	r3, [pc, #32]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003206:	4904      	ldr	r1, [pc, #16]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003208:	4313      	orrs	r3, r2
 800320a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800320e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003210:	4618      	mov	r0, r3
 8003212:	3718      	adds	r7, #24
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	40021000 	.word	0x40021000

0800321c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003226:	2300      	movs	r3, #0
 8003228:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800322a:	4b73      	ldr	r3, [pc, #460]	; (80033f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	f003 0303 	and.w	r3, r3, #3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d018      	beq.n	8003268 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003236:	4b70      	ldr	r3, [pc, #448]	; (80033f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	f003 0203 	and.w	r2, r3, #3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	429a      	cmp	r2, r3
 8003244:	d10d      	bne.n	8003262 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
       ||
 800324a:	2b00      	cmp	r3, #0
 800324c:	d009      	beq.n	8003262 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800324e:	4b6a      	ldr	r3, [pc, #424]	; (80033f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	091b      	lsrs	r3, r3, #4
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	1c5a      	adds	r2, r3, #1
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
       ||
 800325e:	429a      	cmp	r2, r3
 8003260:	d044      	beq.n	80032ec <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	73fb      	strb	r3, [r7, #15]
 8003266:	e041      	b.n	80032ec <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2b02      	cmp	r3, #2
 800326e:	d00c      	beq.n	800328a <RCCEx_PLLSAI1_Config+0x6e>
 8003270:	2b03      	cmp	r3, #3
 8003272:	d013      	beq.n	800329c <RCCEx_PLLSAI1_Config+0x80>
 8003274:	2b01      	cmp	r3, #1
 8003276:	d120      	bne.n	80032ba <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003278:	4b5f      	ldr	r3, [pc, #380]	; (80033f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d11d      	bne.n	80032c0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003288:	e01a      	b.n	80032c0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800328a:	4b5b      	ldr	r3, [pc, #364]	; (80033f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003292:	2b00      	cmp	r3, #0
 8003294:	d116      	bne.n	80032c4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800329a:	e013      	b.n	80032c4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800329c:	4b56      	ldr	r3, [pc, #344]	; (80033f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10f      	bne.n	80032c8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80032a8:	4b53      	ldr	r3, [pc, #332]	; (80033f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d109      	bne.n	80032c8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80032b8:	e006      	b.n	80032c8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	73fb      	strb	r3, [r7, #15]
      break;
 80032be:	e004      	b.n	80032ca <RCCEx_PLLSAI1_Config+0xae>
      break;
 80032c0:	bf00      	nop
 80032c2:	e002      	b.n	80032ca <RCCEx_PLLSAI1_Config+0xae>
      break;
 80032c4:	bf00      	nop
 80032c6:	e000      	b.n	80032ca <RCCEx_PLLSAI1_Config+0xae>
      break;
 80032c8:	bf00      	nop
    }

    if(status == HAL_OK)
 80032ca:	7bfb      	ldrb	r3, [r7, #15]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10d      	bne.n	80032ec <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80032d0:	4b49      	ldr	r3, [pc, #292]	; (80033f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6819      	ldr	r1, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	3b01      	subs	r3, #1
 80032e2:	011b      	lsls	r3, r3, #4
 80032e4:	430b      	orrs	r3, r1
 80032e6:	4944      	ldr	r1, [pc, #272]	; (80033f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80032ec:	7bfb      	ldrb	r3, [r7, #15]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d17d      	bne.n	80033ee <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80032f2:	4b41      	ldr	r3, [pc, #260]	; (80033f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a40      	ldr	r2, [pc, #256]	; (80033f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80032f8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80032fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032fe:	f7fd f963 	bl	80005c8 <HAL_GetTick>
 8003302:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003304:	e009      	b.n	800331a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003306:	f7fd f95f 	bl	80005c8 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d902      	bls.n	800331a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	73fb      	strb	r3, [r7, #15]
        break;
 8003318:	e005      	b.n	8003326 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800331a:	4b37      	ldr	r3, [pc, #220]	; (80033f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1ef      	bne.n	8003306 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003326:	7bfb      	ldrb	r3, [r7, #15]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d160      	bne.n	80033ee <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d111      	bne.n	8003356 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003332:	4b31      	ldr	r3, [pc, #196]	; (80033f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800333a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	6892      	ldr	r2, [r2, #8]
 8003342:	0211      	lsls	r1, r2, #8
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	68d2      	ldr	r2, [r2, #12]
 8003348:	0912      	lsrs	r2, r2, #4
 800334a:	0452      	lsls	r2, r2, #17
 800334c:	430a      	orrs	r2, r1
 800334e:	492a      	ldr	r1, [pc, #168]	; (80033f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003350:	4313      	orrs	r3, r2
 8003352:	610b      	str	r3, [r1, #16]
 8003354:	e027      	b.n	80033a6 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d112      	bne.n	8003382 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800335c:	4b26      	ldr	r3, [pc, #152]	; (80033f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003364:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	6892      	ldr	r2, [r2, #8]
 800336c:	0211      	lsls	r1, r2, #8
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	6912      	ldr	r2, [r2, #16]
 8003372:	0852      	lsrs	r2, r2, #1
 8003374:	3a01      	subs	r2, #1
 8003376:	0552      	lsls	r2, r2, #21
 8003378:	430a      	orrs	r2, r1
 800337a:	491f      	ldr	r1, [pc, #124]	; (80033f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800337c:	4313      	orrs	r3, r2
 800337e:	610b      	str	r3, [r1, #16]
 8003380:	e011      	b.n	80033a6 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003382:	4b1d      	ldr	r3, [pc, #116]	; (80033f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800338a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6892      	ldr	r2, [r2, #8]
 8003392:	0211      	lsls	r1, r2, #8
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	6952      	ldr	r2, [r2, #20]
 8003398:	0852      	lsrs	r2, r2, #1
 800339a:	3a01      	subs	r2, #1
 800339c:	0652      	lsls	r2, r2, #25
 800339e:	430a      	orrs	r2, r1
 80033a0:	4915      	ldr	r1, [pc, #84]	; (80033f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80033a6:	4b14      	ldr	r3, [pc, #80]	; (80033f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a13      	ldr	r2, [pc, #76]	; (80033f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033b0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b2:	f7fd f909 	bl	80005c8 <HAL_GetTick>
 80033b6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80033b8:	e009      	b.n	80033ce <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033ba:	f7fd f905 	bl	80005c8 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d902      	bls.n	80033ce <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	73fb      	strb	r3, [r7, #15]
          break;
 80033cc:	e005      	b.n	80033da <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80033ce:	4b0a      	ldr	r3, [pc, #40]	; (80033f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0ef      	beq.n	80033ba <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80033da:	7bfb      	ldrb	r3, [r7, #15]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d106      	bne.n	80033ee <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80033e0:	4b05      	ldr	r3, [pc, #20]	; (80033f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033e2:	691a      	ldr	r2, [r3, #16]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	4903      	ldr	r1, [pc, #12]	; (80033f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80033ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	40021000 	.word	0x40021000

080033fc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003406:	2300      	movs	r3, #0
 8003408:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800340a:	4b68      	ldr	r3, [pc, #416]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	f003 0303 	and.w	r3, r3, #3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d018      	beq.n	8003448 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003416:	4b65      	ldr	r3, [pc, #404]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	f003 0203 	and.w	r2, r3, #3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	429a      	cmp	r2, r3
 8003424:	d10d      	bne.n	8003442 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
       ||
 800342a:	2b00      	cmp	r3, #0
 800342c:	d009      	beq.n	8003442 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800342e:	4b5f      	ldr	r3, [pc, #380]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	091b      	lsrs	r3, r3, #4
 8003434:	f003 0307 	and.w	r3, r3, #7
 8003438:	1c5a      	adds	r2, r3, #1
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
       ||
 800343e:	429a      	cmp	r2, r3
 8003440:	d044      	beq.n	80034cc <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	73fb      	strb	r3, [r7, #15]
 8003446:	e041      	b.n	80034cc <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2b02      	cmp	r3, #2
 800344e:	d00c      	beq.n	800346a <RCCEx_PLLSAI2_Config+0x6e>
 8003450:	2b03      	cmp	r3, #3
 8003452:	d013      	beq.n	800347c <RCCEx_PLLSAI2_Config+0x80>
 8003454:	2b01      	cmp	r3, #1
 8003456:	d120      	bne.n	800349a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003458:	4b54      	ldr	r3, [pc, #336]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d11d      	bne.n	80034a0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003468:	e01a      	b.n	80034a0 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800346a:	4b50      	ldr	r3, [pc, #320]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003472:	2b00      	cmp	r3, #0
 8003474:	d116      	bne.n	80034a4 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800347a:	e013      	b.n	80034a4 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800347c:	4b4b      	ldr	r3, [pc, #300]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10f      	bne.n	80034a8 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003488:	4b48      	ldr	r3, [pc, #288]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d109      	bne.n	80034a8 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003498:	e006      	b.n	80034a8 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	73fb      	strb	r3, [r7, #15]
      break;
 800349e:	e004      	b.n	80034aa <RCCEx_PLLSAI2_Config+0xae>
      break;
 80034a0:	bf00      	nop
 80034a2:	e002      	b.n	80034aa <RCCEx_PLLSAI2_Config+0xae>
      break;
 80034a4:	bf00      	nop
 80034a6:	e000      	b.n	80034aa <RCCEx_PLLSAI2_Config+0xae>
      break;
 80034a8:	bf00      	nop
    }

    if(status == HAL_OK)
 80034aa:	7bfb      	ldrb	r3, [r7, #15]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d10d      	bne.n	80034cc <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80034b0:	4b3e      	ldr	r3, [pc, #248]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b0>)
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6819      	ldr	r1, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	3b01      	subs	r3, #1
 80034c2:	011b      	lsls	r3, r3, #4
 80034c4:	430b      	orrs	r3, r1
 80034c6:	4939      	ldr	r1, [pc, #228]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b0>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80034cc:	7bfb      	ldrb	r3, [r7, #15]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d167      	bne.n	80035a2 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80034d2:	4b36      	ldr	r3, [pc, #216]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b0>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a35      	ldr	r2, [pc, #212]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b0>)
 80034d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034de:	f7fd f873 	bl	80005c8 <HAL_GetTick>
 80034e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80034e4:	e009      	b.n	80034fa <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80034e6:	f7fd f86f 	bl	80005c8 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d902      	bls.n	80034fa <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	73fb      	strb	r3, [r7, #15]
        break;
 80034f8:	e005      	b.n	8003506 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80034fa:	4b2c      	ldr	r3, [pc, #176]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b0>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1ef      	bne.n	80034e6 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003506:	7bfb      	ldrb	r3, [r7, #15]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d14a      	bne.n	80035a2 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d111      	bne.n	8003536 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003512:	4b26      	ldr	r3, [pc, #152]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800351a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	6892      	ldr	r2, [r2, #8]
 8003522:	0211      	lsls	r1, r2, #8
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	68d2      	ldr	r2, [r2, #12]
 8003528:	0912      	lsrs	r2, r2, #4
 800352a:	0452      	lsls	r2, r2, #17
 800352c:	430a      	orrs	r2, r1
 800352e:	491f      	ldr	r1, [pc, #124]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8003530:	4313      	orrs	r3, r2
 8003532:	614b      	str	r3, [r1, #20]
 8003534:	e011      	b.n	800355a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003536:	4b1d      	ldr	r3, [pc, #116]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800353e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6892      	ldr	r2, [r2, #8]
 8003546:	0211      	lsls	r1, r2, #8
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	6912      	ldr	r2, [r2, #16]
 800354c:	0852      	lsrs	r2, r2, #1
 800354e:	3a01      	subs	r2, #1
 8003550:	0652      	lsls	r2, r2, #25
 8003552:	430a      	orrs	r2, r1
 8003554:	4915      	ldr	r1, [pc, #84]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8003556:	4313      	orrs	r3, r2
 8003558:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800355a:	4b14      	ldr	r3, [pc, #80]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a13      	ldr	r2, [pc, #76]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8003560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003564:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003566:	f7fd f82f 	bl	80005c8 <HAL_GetTick>
 800356a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800356c:	e009      	b.n	8003582 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800356e:	f7fd f82b 	bl	80005c8 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d902      	bls.n	8003582 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	73fb      	strb	r3, [r7, #15]
          break;
 8003580:	e005      	b.n	800358e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003582:	4b0a      	ldr	r3, [pc, #40]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d0ef      	beq.n	800356e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800358e:	7bfb      	ldrb	r3, [r7, #15]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d106      	bne.n	80035a2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003594:	4b05      	ldr	r3, [pc, #20]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8003596:	695a      	ldr	r2, [r3, #20]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	4903      	ldr	r1, [pc, #12]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80035a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3710      	adds	r7, #16
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	40021000 	.word	0x40021000

080035b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e049      	b.n	8003656 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d106      	bne.n	80035dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f002 f804 	bl	80055e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2202      	movs	r2, #2
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3304      	adds	r3, #4
 80035ec:	4619      	mov	r1, r3
 80035ee:	4610      	mov	r0, r2
 80035f0:	f000 fab0 	bl	8003b54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
	...

08003660 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2b01      	cmp	r3, #1
 8003672:	d001      	beq.n	8003678 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e04f      	b.n	8003718 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2202      	movs	r2, #2
 800367c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68da      	ldr	r2, [r3, #12]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f042 0201 	orr.w	r2, r2, #1
 800368e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a23      	ldr	r2, [pc, #140]	; (8003724 <HAL_TIM_Base_Start_IT+0xc4>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d01d      	beq.n	80036d6 <HAL_TIM_Base_Start_IT+0x76>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036a2:	d018      	beq.n	80036d6 <HAL_TIM_Base_Start_IT+0x76>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a1f      	ldr	r2, [pc, #124]	; (8003728 <HAL_TIM_Base_Start_IT+0xc8>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d013      	beq.n	80036d6 <HAL_TIM_Base_Start_IT+0x76>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a1e      	ldr	r2, [pc, #120]	; (800372c <HAL_TIM_Base_Start_IT+0xcc>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d00e      	beq.n	80036d6 <HAL_TIM_Base_Start_IT+0x76>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a1c      	ldr	r2, [pc, #112]	; (8003730 <HAL_TIM_Base_Start_IT+0xd0>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d009      	beq.n	80036d6 <HAL_TIM_Base_Start_IT+0x76>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a1b      	ldr	r2, [pc, #108]	; (8003734 <HAL_TIM_Base_Start_IT+0xd4>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d004      	beq.n	80036d6 <HAL_TIM_Base_Start_IT+0x76>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a19      	ldr	r2, [pc, #100]	; (8003738 <HAL_TIM_Base_Start_IT+0xd8>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d115      	bne.n	8003702 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	4b17      	ldr	r3, [pc, #92]	; (800373c <HAL_TIM_Base_Start_IT+0xdc>)
 80036de:	4013      	ands	r3, r2
 80036e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2b06      	cmp	r3, #6
 80036e6:	d015      	beq.n	8003714 <HAL_TIM_Base_Start_IT+0xb4>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036ee:	d011      	beq.n	8003714 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f042 0201 	orr.w	r2, r2, #1
 80036fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003700:	e008      	b.n	8003714 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f042 0201 	orr.w	r2, r2, #1
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	e000      	b.n	8003716 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003714:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3714      	adds	r7, #20
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	40012c00 	.word	0x40012c00
 8003728:	40000400 	.word	0x40000400
 800372c:	40000800 	.word	0x40000800
 8003730:	40000c00 	.word	0x40000c00
 8003734:	40013400 	.word	0x40013400
 8003738:	40014000 	.word	0x40014000
 800373c:	00010007 	.word	0x00010007

08003740 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b02      	cmp	r3, #2
 8003754:	d122      	bne.n	800379c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b02      	cmp	r3, #2
 8003762:	d11b      	bne.n	800379c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f06f 0202 	mvn.w	r2, #2
 800376c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2201      	movs	r2, #1
 8003772:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	f003 0303 	and.w	r3, r3, #3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d003      	beq.n	800378a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f9c8 	bl	8003b18 <HAL_TIM_IC_CaptureCallback>
 8003788:	e005      	b.n	8003796 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f9ba 	bl	8003b04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f9cb 	bl	8003b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	f003 0304 	and.w	r3, r3, #4
 80037a6:	2b04      	cmp	r3, #4
 80037a8:	d122      	bne.n	80037f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	f003 0304 	and.w	r3, r3, #4
 80037b4:	2b04      	cmp	r3, #4
 80037b6:	d11b      	bne.n	80037f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f06f 0204 	mvn.w	r2, #4
 80037c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2202      	movs	r2, #2
 80037c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d003      	beq.n	80037de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 f99e 	bl	8003b18 <HAL_TIM_IC_CaptureCallback>
 80037dc:	e005      	b.n	80037ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 f990 	bl	8003b04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 f9a1 	bl	8003b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	f003 0308 	and.w	r3, r3, #8
 80037fa:	2b08      	cmp	r3, #8
 80037fc:	d122      	bne.n	8003844 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	f003 0308 	and.w	r3, r3, #8
 8003808:	2b08      	cmp	r3, #8
 800380a:	d11b      	bne.n	8003844 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f06f 0208 	mvn.w	r2, #8
 8003814:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2204      	movs	r2, #4
 800381a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	69db      	ldr	r3, [r3, #28]
 8003822:	f003 0303 	and.w	r3, r3, #3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d003      	beq.n	8003832 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f974 	bl	8003b18 <HAL_TIM_IC_CaptureCallback>
 8003830:	e005      	b.n	800383e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f966 	bl	8003b04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 f977 	bl	8003b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	f003 0310 	and.w	r3, r3, #16
 800384e:	2b10      	cmp	r3, #16
 8003850:	d122      	bne.n	8003898 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	f003 0310 	and.w	r3, r3, #16
 800385c:	2b10      	cmp	r3, #16
 800385e:	d11b      	bne.n	8003898 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f06f 0210 	mvn.w	r2, #16
 8003868:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2208      	movs	r2, #8
 800386e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	69db      	ldr	r3, [r3, #28]
 8003876:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800387a:	2b00      	cmp	r3, #0
 800387c:	d003      	beq.n	8003886 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f94a 	bl	8003b18 <HAL_TIM_IC_CaptureCallback>
 8003884:	e005      	b.n	8003892 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 f93c 	bl	8003b04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 f94d 	bl	8003b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d10e      	bne.n	80038c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	f003 0301 	and.w	r3, r3, #1
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d107      	bne.n	80038c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f06f 0201 	mvn.w	r2, #1
 80038bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f916 	bl	8003af0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ce:	2b80      	cmp	r3, #128	; 0x80
 80038d0:	d10e      	bne.n	80038f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038dc:	2b80      	cmp	r3, #128	; 0x80
 80038de:	d107      	bne.n	80038f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 faf8 	bl	8003ee0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038fe:	d10e      	bne.n	800391e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800390a:	2b80      	cmp	r3, #128	; 0x80
 800390c:	d107      	bne.n	800391e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003916:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 faeb 	bl	8003ef4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003928:	2b40      	cmp	r3, #64	; 0x40
 800392a:	d10e      	bne.n	800394a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003936:	2b40      	cmp	r3, #64	; 0x40
 8003938:	d107      	bne.n	800394a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003942:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 f8fb 	bl	8003b40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	f003 0320 	and.w	r3, r3, #32
 8003954:	2b20      	cmp	r3, #32
 8003956:	d10e      	bne.n	8003976 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	f003 0320 	and.w	r3, r3, #32
 8003962:	2b20      	cmp	r3, #32
 8003964:	d107      	bne.n	8003976 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f06f 0220 	mvn.w	r2, #32
 800396e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 faab 	bl	8003ecc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003976:	bf00      	nop
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b084      	sub	sp, #16
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
 8003986:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800398e:	2b01      	cmp	r3, #1
 8003990:	d101      	bne.n	8003996 <HAL_TIM_ConfigClockSource+0x18>
 8003992:	2302      	movs	r3, #2
 8003994:	e0a8      	b.n	8003ae8 <HAL_TIM_ConfigClockSource+0x16a>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2201      	movs	r2, #1
 800399a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2202      	movs	r2, #2
 80039a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039b4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80039b8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039c0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2b40      	cmp	r3, #64	; 0x40
 80039d0:	d067      	beq.n	8003aa2 <HAL_TIM_ConfigClockSource+0x124>
 80039d2:	2b40      	cmp	r3, #64	; 0x40
 80039d4:	d80b      	bhi.n	80039ee <HAL_TIM_ConfigClockSource+0x70>
 80039d6:	2b10      	cmp	r3, #16
 80039d8:	d073      	beq.n	8003ac2 <HAL_TIM_ConfigClockSource+0x144>
 80039da:	2b10      	cmp	r3, #16
 80039dc:	d802      	bhi.n	80039e4 <HAL_TIM_ConfigClockSource+0x66>
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d06f      	beq.n	8003ac2 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80039e2:	e078      	b.n	8003ad6 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80039e4:	2b20      	cmp	r3, #32
 80039e6:	d06c      	beq.n	8003ac2 <HAL_TIM_ConfigClockSource+0x144>
 80039e8:	2b30      	cmp	r3, #48	; 0x30
 80039ea:	d06a      	beq.n	8003ac2 <HAL_TIM_ConfigClockSource+0x144>
      break;
 80039ec:	e073      	b.n	8003ad6 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80039ee:	2b70      	cmp	r3, #112	; 0x70
 80039f0:	d00d      	beq.n	8003a0e <HAL_TIM_ConfigClockSource+0x90>
 80039f2:	2b70      	cmp	r3, #112	; 0x70
 80039f4:	d804      	bhi.n	8003a00 <HAL_TIM_ConfigClockSource+0x82>
 80039f6:	2b50      	cmp	r3, #80	; 0x50
 80039f8:	d033      	beq.n	8003a62 <HAL_TIM_ConfigClockSource+0xe4>
 80039fa:	2b60      	cmp	r3, #96	; 0x60
 80039fc:	d041      	beq.n	8003a82 <HAL_TIM_ConfigClockSource+0x104>
      break;
 80039fe:	e06a      	b.n	8003ad6 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003a00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a04:	d066      	beq.n	8003ad4 <HAL_TIM_ConfigClockSource+0x156>
 8003a06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a0a:	d017      	beq.n	8003a3c <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003a0c:	e063      	b.n	8003ad6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6818      	ldr	r0, [r3, #0]
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	6899      	ldr	r1, [r3, #8]
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685a      	ldr	r2, [r3, #4]
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	f000 f9ad 	bl	8003d7c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a30:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	609a      	str	r2, [r3, #8]
      break;
 8003a3a:	e04c      	b.n	8003ad6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6818      	ldr	r0, [r3, #0]
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	6899      	ldr	r1, [r3, #8]
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	f000 f996 	bl	8003d7c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	689a      	ldr	r2, [r3, #8]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a5e:	609a      	str	r2, [r3, #8]
      break;
 8003a60:	e039      	b.n	8003ad6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6818      	ldr	r0, [r3, #0]
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	6859      	ldr	r1, [r3, #4]
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	461a      	mov	r2, r3
 8003a70:	f000 f90a 	bl	8003c88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2150      	movs	r1, #80	; 0x50
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 f963 	bl	8003d46 <TIM_ITRx_SetConfig>
      break;
 8003a80:	e029      	b.n	8003ad6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6818      	ldr	r0, [r3, #0]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	6859      	ldr	r1, [r3, #4]
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	f000 f929 	bl	8003ce6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2160      	movs	r1, #96	; 0x60
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 f953 	bl	8003d46 <TIM_ITRx_SetConfig>
      break;
 8003aa0:	e019      	b.n	8003ad6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6818      	ldr	r0, [r3, #0]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	6859      	ldr	r1, [r3, #4]
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	f000 f8ea 	bl	8003c88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2140      	movs	r1, #64	; 0x40
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 f943 	bl	8003d46 <TIM_ITRx_SetConfig>
      break;
 8003ac0:	e009      	b.n	8003ad6 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4619      	mov	r1, r3
 8003acc:	4610      	mov	r0, r2
 8003ace:	f000 f93a 	bl	8003d46 <TIM_ITRx_SetConfig>
        break;
 8003ad2:	e000      	b.n	8003ad6 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8003ad4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a40      	ldr	r2, [pc, #256]	; (8003c68 <TIM_Base_SetConfig+0x114>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d013      	beq.n	8003b94 <TIM_Base_SetConfig+0x40>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b72:	d00f      	beq.n	8003b94 <TIM_Base_SetConfig+0x40>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a3d      	ldr	r2, [pc, #244]	; (8003c6c <TIM_Base_SetConfig+0x118>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d00b      	beq.n	8003b94 <TIM_Base_SetConfig+0x40>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a3c      	ldr	r2, [pc, #240]	; (8003c70 <TIM_Base_SetConfig+0x11c>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d007      	beq.n	8003b94 <TIM_Base_SetConfig+0x40>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a3b      	ldr	r2, [pc, #236]	; (8003c74 <TIM_Base_SetConfig+0x120>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d003      	beq.n	8003b94 <TIM_Base_SetConfig+0x40>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a3a      	ldr	r2, [pc, #232]	; (8003c78 <TIM_Base_SetConfig+0x124>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d108      	bne.n	8003ba6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a2f      	ldr	r2, [pc, #188]	; (8003c68 <TIM_Base_SetConfig+0x114>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d01f      	beq.n	8003bee <TIM_Base_SetConfig+0x9a>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bb4:	d01b      	beq.n	8003bee <TIM_Base_SetConfig+0x9a>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a2c      	ldr	r2, [pc, #176]	; (8003c6c <TIM_Base_SetConfig+0x118>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d017      	beq.n	8003bee <TIM_Base_SetConfig+0x9a>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a2b      	ldr	r2, [pc, #172]	; (8003c70 <TIM_Base_SetConfig+0x11c>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d013      	beq.n	8003bee <TIM_Base_SetConfig+0x9a>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a2a      	ldr	r2, [pc, #168]	; (8003c74 <TIM_Base_SetConfig+0x120>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d00f      	beq.n	8003bee <TIM_Base_SetConfig+0x9a>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a29      	ldr	r2, [pc, #164]	; (8003c78 <TIM_Base_SetConfig+0x124>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d00b      	beq.n	8003bee <TIM_Base_SetConfig+0x9a>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a28      	ldr	r2, [pc, #160]	; (8003c7c <TIM_Base_SetConfig+0x128>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d007      	beq.n	8003bee <TIM_Base_SetConfig+0x9a>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a27      	ldr	r2, [pc, #156]	; (8003c80 <TIM_Base_SetConfig+0x12c>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d003      	beq.n	8003bee <TIM_Base_SetConfig+0x9a>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a26      	ldr	r2, [pc, #152]	; (8003c84 <TIM_Base_SetConfig+0x130>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d108      	bne.n	8003c00 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	689a      	ldr	r2, [r3, #8]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a10      	ldr	r2, [pc, #64]	; (8003c68 <TIM_Base_SetConfig+0x114>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d00f      	beq.n	8003c4c <TIM_Base_SetConfig+0xf8>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a12      	ldr	r2, [pc, #72]	; (8003c78 <TIM_Base_SetConfig+0x124>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d00b      	beq.n	8003c4c <TIM_Base_SetConfig+0xf8>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a11      	ldr	r2, [pc, #68]	; (8003c7c <TIM_Base_SetConfig+0x128>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d007      	beq.n	8003c4c <TIM_Base_SetConfig+0xf8>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a10      	ldr	r2, [pc, #64]	; (8003c80 <TIM_Base_SetConfig+0x12c>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d003      	beq.n	8003c4c <TIM_Base_SetConfig+0xf8>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a0f      	ldr	r2, [pc, #60]	; (8003c84 <TIM_Base_SetConfig+0x130>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d103      	bne.n	8003c54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	691a      	ldr	r2, [r3, #16]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	615a      	str	r2, [r3, #20]
}
 8003c5a:	bf00      	nop
 8003c5c:	3714      	adds	r7, #20
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	40012c00 	.word	0x40012c00
 8003c6c:	40000400 	.word	0x40000400
 8003c70:	40000800 	.word	0x40000800
 8003c74:	40000c00 	.word	0x40000c00
 8003c78:	40013400 	.word	0x40013400
 8003c7c:	40014000 	.word	0x40014000
 8003c80:	40014400 	.word	0x40014400
 8003c84:	40014800 	.word	0x40014800

08003c88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b087      	sub	sp, #28
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	f023 0201 	bic.w	r2, r3, #1
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	011b      	lsls	r3, r3, #4
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f023 030a 	bic.w	r3, r3, #10
 8003cc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003cc6:	697a      	ldr	r2, [r7, #20]
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	621a      	str	r2, [r3, #32]
}
 8003cda:	bf00      	nop
 8003cdc:	371c      	adds	r7, #28
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b087      	sub	sp, #28
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	60f8      	str	r0, [r7, #12]
 8003cee:	60b9      	str	r1, [r7, #8]
 8003cf0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	f023 0210 	bic.w	r2, r3, #16
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6a1b      	ldr	r3, [r3, #32]
 8003d08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	031b      	lsls	r3, r3, #12
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	011b      	lsls	r3, r3, #4
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	697a      	ldr	r2, [r7, #20]
 8003d32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	621a      	str	r2, [r3, #32]
}
 8003d3a:	bf00      	nop
 8003d3c:	371c      	adds	r7, #28
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr

08003d46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d46:	b480      	push	{r7}
 8003d48:	b085      	sub	sp, #20
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
 8003d4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d5e:	683a      	ldr	r2, [r7, #0]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	f043 0307 	orr.w	r3, r3, #7
 8003d68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	609a      	str	r2, [r3, #8]
}
 8003d70:	bf00      	nop
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b087      	sub	sp, #28
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
 8003d88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	021a      	lsls	r2, r3, #8
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	609a      	str	r2, [r3, #8]
}
 8003db0:	bf00      	nop
 8003db2:	371c      	adds	r7, #28
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d101      	bne.n	8003dd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	e068      	b.n	8003ea6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2202      	movs	r2, #2
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a2e      	ldr	r2, [pc, #184]	; (8003eb4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d004      	beq.n	8003e08 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a2d      	ldr	r2, [pc, #180]	; (8003eb8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d108      	bne.n	8003e1a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003e0e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e20:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a1e      	ldr	r2, [pc, #120]	; (8003eb4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d01d      	beq.n	8003e7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e46:	d018      	beq.n	8003e7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a1b      	ldr	r2, [pc, #108]	; (8003ebc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d013      	beq.n	8003e7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a1a      	ldr	r2, [pc, #104]	; (8003ec0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d00e      	beq.n	8003e7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a18      	ldr	r2, [pc, #96]	; (8003ec4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d009      	beq.n	8003e7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a13      	ldr	r2, [pc, #76]	; (8003eb8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d004      	beq.n	8003e7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a14      	ldr	r2, [pc, #80]	; (8003ec8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d10c      	bne.n	8003e94 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68ba      	ldr	r2, [r7, #8]
 8003e92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3714      	adds	r7, #20
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	40012c00 	.word	0x40012c00
 8003eb8:	40013400 	.word	0x40013400
 8003ebc:	40000400 	.word	0x40000400
 8003ec0:	40000800 	.word	0x40000800
 8003ec4:	40000c00 	.word	0x40000c00
 8003ec8:	40014000 	.word	0x40014000

08003ecc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003efc:	bf00      	nop
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e040      	b.n	8003f9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d106      	bne.n	8003f30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f001 fb7e 	bl	800562c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2224      	movs	r2, #36	; 0x24
 8003f34:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 0201 	bic.w	r2, r2, #1
 8003f44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f8c0 	bl	80040cc <UART_SetConfig>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d101      	bne.n	8003f56 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e022      	b.n	8003f9c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d002      	beq.n	8003f64 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 fb3e 	bl	80045e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	689a      	ldr	r2, [r3, #8]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f042 0201 	orr.w	r2, r2, #1
 8003f92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 fbc5 	bl	8004724 <UART_CheckIdleState>
 8003f9a:	4603      	mov	r3, r0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3708      	adds	r7, #8
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b08a      	sub	sp, #40	; 0x28
 8003fa8:	af02      	add	r7, sp, #8
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	603b      	str	r3, [r7, #0]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fb8:	2b20      	cmp	r3, #32
 8003fba:	f040 8081 	bne.w	80040c0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d002      	beq.n	8003fca <HAL_UART_Transmit+0x26>
 8003fc4:	88fb      	ldrh	r3, [r7, #6]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d101      	bne.n	8003fce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e079      	b.n	80040c2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d101      	bne.n	8003fdc <HAL_UART_Transmit+0x38>
 8003fd8:	2302      	movs	r3, #2
 8003fda:	e072      	b.n	80040c2 <HAL_UART_Transmit+0x11e>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2221      	movs	r2, #33	; 0x21
 8003fee:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003ff0:	f7fc faea 	bl	80005c8 <HAL_GetTick>
 8003ff4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	88fa      	ldrh	r2, [r7, #6]
 8003ffa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	88fa      	ldrh	r2, [r7, #6]
 8004002:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800400e:	d108      	bne.n	8004022 <HAL_UART_Transmit+0x7e>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d104      	bne.n	8004022 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004018:	2300      	movs	r3, #0
 800401a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	61bb      	str	r3, [r7, #24]
 8004020:	e003      	b.n	800402a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004026:	2300      	movs	r3, #0
 8004028:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8004032:	e02d      	b.n	8004090 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	9300      	str	r3, [sp, #0]
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	2200      	movs	r2, #0
 800403c:	2180      	movs	r1, #128	; 0x80
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 fbb5 	bl	80047ae <UART_WaitOnFlagUntilTimeout>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e039      	b.n	80040c2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d10b      	bne.n	800406c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	881a      	ldrh	r2, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004060:	b292      	uxth	r2, r2
 8004062:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	3302      	adds	r3, #2
 8004068:	61bb      	str	r3, [r7, #24]
 800406a:	e008      	b.n	800407e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	781a      	ldrb	r2, [r3, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	b292      	uxth	r2, r2
 8004076:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	3301      	adds	r3, #1
 800407c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004084:	b29b      	uxth	r3, r3
 8004086:	3b01      	subs	r3, #1
 8004088:	b29a      	uxth	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004096:	b29b      	uxth	r3, r3
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1cb      	bne.n	8004034 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	9300      	str	r3, [sp, #0]
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	2200      	movs	r2, #0
 80040a4:	2140      	movs	r1, #64	; 0x40
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f000 fb81 	bl	80047ae <UART_WaitOnFlagUntilTimeout>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e005      	b.n	80040c2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2220      	movs	r2, #32
 80040ba:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80040bc:	2300      	movs	r3, #0
 80040be:	e000      	b.n	80040c2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80040c0:	2302      	movs	r3, #2
  }
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3720      	adds	r7, #32
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
	...

080040cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040cc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80040d0:	b088      	sub	sp, #32
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040d6:	2300      	movs	r3, #0
 80040d8:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689a      	ldr	r2, [r3, #8]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	431a      	orrs	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	431a      	orrs	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	69db      	ldr	r3, [r3, #28]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	4bac      	ldr	r3, [pc, #688]	; (80043ac <UART_SetConfig+0x2e0>)
 80040fa:	4013      	ands	r3, r2
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	6812      	ldr	r2, [r2, #0]
 8004100:	69f9      	ldr	r1, [r7, #28]
 8004102:	430b      	orrs	r3, r1
 8004104:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68da      	ldr	r2, [r3, #12]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	430a      	orrs	r2, r1
 800411a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4aa2      	ldr	r2, [pc, #648]	; (80043b0 <UART_SetConfig+0x2e4>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d004      	beq.n	8004136 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	69fa      	ldr	r2, [r7, #28]
 8004132:	4313      	orrs	r3, r2
 8004134:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	69fa      	ldr	r2, [r7, #28]
 8004146:	430a      	orrs	r2, r1
 8004148:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a99      	ldr	r2, [pc, #612]	; (80043b4 <UART_SetConfig+0x2e8>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d121      	bne.n	8004198 <UART_SetConfig+0xcc>
 8004154:	4b98      	ldr	r3, [pc, #608]	; (80043b8 <UART_SetConfig+0x2ec>)
 8004156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800415a:	f003 0303 	and.w	r3, r3, #3
 800415e:	2b03      	cmp	r3, #3
 8004160:	d816      	bhi.n	8004190 <UART_SetConfig+0xc4>
 8004162:	a201      	add	r2, pc, #4	; (adr r2, 8004168 <UART_SetConfig+0x9c>)
 8004164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004168:	08004179 	.word	0x08004179
 800416c:	08004185 	.word	0x08004185
 8004170:	0800417f 	.word	0x0800417f
 8004174:	0800418b 	.word	0x0800418b
 8004178:	2301      	movs	r3, #1
 800417a:	76fb      	strb	r3, [r7, #27]
 800417c:	e0e8      	b.n	8004350 <UART_SetConfig+0x284>
 800417e:	2302      	movs	r3, #2
 8004180:	76fb      	strb	r3, [r7, #27]
 8004182:	e0e5      	b.n	8004350 <UART_SetConfig+0x284>
 8004184:	2304      	movs	r3, #4
 8004186:	76fb      	strb	r3, [r7, #27]
 8004188:	e0e2      	b.n	8004350 <UART_SetConfig+0x284>
 800418a:	2308      	movs	r3, #8
 800418c:	76fb      	strb	r3, [r7, #27]
 800418e:	e0df      	b.n	8004350 <UART_SetConfig+0x284>
 8004190:	2310      	movs	r3, #16
 8004192:	76fb      	strb	r3, [r7, #27]
 8004194:	bf00      	nop
 8004196:	e0db      	b.n	8004350 <UART_SetConfig+0x284>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a87      	ldr	r2, [pc, #540]	; (80043bc <UART_SetConfig+0x2f0>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d134      	bne.n	800420c <UART_SetConfig+0x140>
 80041a2:	4b85      	ldr	r3, [pc, #532]	; (80043b8 <UART_SetConfig+0x2ec>)
 80041a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a8:	f003 030c 	and.w	r3, r3, #12
 80041ac:	2b0c      	cmp	r3, #12
 80041ae:	d829      	bhi.n	8004204 <UART_SetConfig+0x138>
 80041b0:	a201      	add	r2, pc, #4	; (adr r2, 80041b8 <UART_SetConfig+0xec>)
 80041b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b6:	bf00      	nop
 80041b8:	080041ed 	.word	0x080041ed
 80041bc:	08004205 	.word	0x08004205
 80041c0:	08004205 	.word	0x08004205
 80041c4:	08004205 	.word	0x08004205
 80041c8:	080041f9 	.word	0x080041f9
 80041cc:	08004205 	.word	0x08004205
 80041d0:	08004205 	.word	0x08004205
 80041d4:	08004205 	.word	0x08004205
 80041d8:	080041f3 	.word	0x080041f3
 80041dc:	08004205 	.word	0x08004205
 80041e0:	08004205 	.word	0x08004205
 80041e4:	08004205 	.word	0x08004205
 80041e8:	080041ff 	.word	0x080041ff
 80041ec:	2300      	movs	r3, #0
 80041ee:	76fb      	strb	r3, [r7, #27]
 80041f0:	e0ae      	b.n	8004350 <UART_SetConfig+0x284>
 80041f2:	2302      	movs	r3, #2
 80041f4:	76fb      	strb	r3, [r7, #27]
 80041f6:	e0ab      	b.n	8004350 <UART_SetConfig+0x284>
 80041f8:	2304      	movs	r3, #4
 80041fa:	76fb      	strb	r3, [r7, #27]
 80041fc:	e0a8      	b.n	8004350 <UART_SetConfig+0x284>
 80041fe:	2308      	movs	r3, #8
 8004200:	76fb      	strb	r3, [r7, #27]
 8004202:	e0a5      	b.n	8004350 <UART_SetConfig+0x284>
 8004204:	2310      	movs	r3, #16
 8004206:	76fb      	strb	r3, [r7, #27]
 8004208:	bf00      	nop
 800420a:	e0a1      	b.n	8004350 <UART_SetConfig+0x284>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a6b      	ldr	r2, [pc, #428]	; (80043c0 <UART_SetConfig+0x2f4>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d120      	bne.n	8004258 <UART_SetConfig+0x18c>
 8004216:	4b68      	ldr	r3, [pc, #416]	; (80043b8 <UART_SetConfig+0x2ec>)
 8004218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800421c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004220:	2b10      	cmp	r3, #16
 8004222:	d00f      	beq.n	8004244 <UART_SetConfig+0x178>
 8004224:	2b10      	cmp	r3, #16
 8004226:	d802      	bhi.n	800422e <UART_SetConfig+0x162>
 8004228:	2b00      	cmp	r3, #0
 800422a:	d005      	beq.n	8004238 <UART_SetConfig+0x16c>
 800422c:	e010      	b.n	8004250 <UART_SetConfig+0x184>
 800422e:	2b20      	cmp	r3, #32
 8004230:	d005      	beq.n	800423e <UART_SetConfig+0x172>
 8004232:	2b30      	cmp	r3, #48	; 0x30
 8004234:	d009      	beq.n	800424a <UART_SetConfig+0x17e>
 8004236:	e00b      	b.n	8004250 <UART_SetConfig+0x184>
 8004238:	2300      	movs	r3, #0
 800423a:	76fb      	strb	r3, [r7, #27]
 800423c:	e088      	b.n	8004350 <UART_SetConfig+0x284>
 800423e:	2302      	movs	r3, #2
 8004240:	76fb      	strb	r3, [r7, #27]
 8004242:	e085      	b.n	8004350 <UART_SetConfig+0x284>
 8004244:	2304      	movs	r3, #4
 8004246:	76fb      	strb	r3, [r7, #27]
 8004248:	e082      	b.n	8004350 <UART_SetConfig+0x284>
 800424a:	2308      	movs	r3, #8
 800424c:	76fb      	strb	r3, [r7, #27]
 800424e:	e07f      	b.n	8004350 <UART_SetConfig+0x284>
 8004250:	2310      	movs	r3, #16
 8004252:	76fb      	strb	r3, [r7, #27]
 8004254:	bf00      	nop
 8004256:	e07b      	b.n	8004350 <UART_SetConfig+0x284>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a59      	ldr	r2, [pc, #356]	; (80043c4 <UART_SetConfig+0x2f8>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d120      	bne.n	80042a4 <UART_SetConfig+0x1d8>
 8004262:	4b55      	ldr	r3, [pc, #340]	; (80043b8 <UART_SetConfig+0x2ec>)
 8004264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004268:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800426c:	2b40      	cmp	r3, #64	; 0x40
 800426e:	d00f      	beq.n	8004290 <UART_SetConfig+0x1c4>
 8004270:	2b40      	cmp	r3, #64	; 0x40
 8004272:	d802      	bhi.n	800427a <UART_SetConfig+0x1ae>
 8004274:	2b00      	cmp	r3, #0
 8004276:	d005      	beq.n	8004284 <UART_SetConfig+0x1b8>
 8004278:	e010      	b.n	800429c <UART_SetConfig+0x1d0>
 800427a:	2b80      	cmp	r3, #128	; 0x80
 800427c:	d005      	beq.n	800428a <UART_SetConfig+0x1be>
 800427e:	2bc0      	cmp	r3, #192	; 0xc0
 8004280:	d009      	beq.n	8004296 <UART_SetConfig+0x1ca>
 8004282:	e00b      	b.n	800429c <UART_SetConfig+0x1d0>
 8004284:	2300      	movs	r3, #0
 8004286:	76fb      	strb	r3, [r7, #27]
 8004288:	e062      	b.n	8004350 <UART_SetConfig+0x284>
 800428a:	2302      	movs	r3, #2
 800428c:	76fb      	strb	r3, [r7, #27]
 800428e:	e05f      	b.n	8004350 <UART_SetConfig+0x284>
 8004290:	2304      	movs	r3, #4
 8004292:	76fb      	strb	r3, [r7, #27]
 8004294:	e05c      	b.n	8004350 <UART_SetConfig+0x284>
 8004296:	2308      	movs	r3, #8
 8004298:	76fb      	strb	r3, [r7, #27]
 800429a:	e059      	b.n	8004350 <UART_SetConfig+0x284>
 800429c:	2310      	movs	r3, #16
 800429e:	76fb      	strb	r3, [r7, #27]
 80042a0:	bf00      	nop
 80042a2:	e055      	b.n	8004350 <UART_SetConfig+0x284>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a47      	ldr	r2, [pc, #284]	; (80043c8 <UART_SetConfig+0x2fc>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d124      	bne.n	80042f8 <UART_SetConfig+0x22c>
 80042ae:	4b42      	ldr	r3, [pc, #264]	; (80043b8 <UART_SetConfig+0x2ec>)
 80042b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042bc:	d012      	beq.n	80042e4 <UART_SetConfig+0x218>
 80042be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042c2:	d802      	bhi.n	80042ca <UART_SetConfig+0x1fe>
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d007      	beq.n	80042d8 <UART_SetConfig+0x20c>
 80042c8:	e012      	b.n	80042f0 <UART_SetConfig+0x224>
 80042ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042ce:	d006      	beq.n	80042de <UART_SetConfig+0x212>
 80042d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042d4:	d009      	beq.n	80042ea <UART_SetConfig+0x21e>
 80042d6:	e00b      	b.n	80042f0 <UART_SetConfig+0x224>
 80042d8:	2300      	movs	r3, #0
 80042da:	76fb      	strb	r3, [r7, #27]
 80042dc:	e038      	b.n	8004350 <UART_SetConfig+0x284>
 80042de:	2302      	movs	r3, #2
 80042e0:	76fb      	strb	r3, [r7, #27]
 80042e2:	e035      	b.n	8004350 <UART_SetConfig+0x284>
 80042e4:	2304      	movs	r3, #4
 80042e6:	76fb      	strb	r3, [r7, #27]
 80042e8:	e032      	b.n	8004350 <UART_SetConfig+0x284>
 80042ea:	2308      	movs	r3, #8
 80042ec:	76fb      	strb	r3, [r7, #27]
 80042ee:	e02f      	b.n	8004350 <UART_SetConfig+0x284>
 80042f0:	2310      	movs	r3, #16
 80042f2:	76fb      	strb	r3, [r7, #27]
 80042f4:	bf00      	nop
 80042f6:	e02b      	b.n	8004350 <UART_SetConfig+0x284>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a2c      	ldr	r2, [pc, #176]	; (80043b0 <UART_SetConfig+0x2e4>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d124      	bne.n	800434c <UART_SetConfig+0x280>
 8004302:	4b2d      	ldr	r3, [pc, #180]	; (80043b8 <UART_SetConfig+0x2ec>)
 8004304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004308:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800430c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004310:	d012      	beq.n	8004338 <UART_SetConfig+0x26c>
 8004312:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004316:	d802      	bhi.n	800431e <UART_SetConfig+0x252>
 8004318:	2b00      	cmp	r3, #0
 800431a:	d007      	beq.n	800432c <UART_SetConfig+0x260>
 800431c:	e012      	b.n	8004344 <UART_SetConfig+0x278>
 800431e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004322:	d006      	beq.n	8004332 <UART_SetConfig+0x266>
 8004324:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004328:	d009      	beq.n	800433e <UART_SetConfig+0x272>
 800432a:	e00b      	b.n	8004344 <UART_SetConfig+0x278>
 800432c:	2300      	movs	r3, #0
 800432e:	76fb      	strb	r3, [r7, #27]
 8004330:	e00e      	b.n	8004350 <UART_SetConfig+0x284>
 8004332:	2302      	movs	r3, #2
 8004334:	76fb      	strb	r3, [r7, #27]
 8004336:	e00b      	b.n	8004350 <UART_SetConfig+0x284>
 8004338:	2304      	movs	r3, #4
 800433a:	76fb      	strb	r3, [r7, #27]
 800433c:	e008      	b.n	8004350 <UART_SetConfig+0x284>
 800433e:	2308      	movs	r3, #8
 8004340:	76fb      	strb	r3, [r7, #27]
 8004342:	e005      	b.n	8004350 <UART_SetConfig+0x284>
 8004344:	2310      	movs	r3, #16
 8004346:	76fb      	strb	r3, [r7, #27]
 8004348:	bf00      	nop
 800434a:	e001      	b.n	8004350 <UART_SetConfig+0x284>
 800434c:	2310      	movs	r3, #16
 800434e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a16      	ldr	r2, [pc, #88]	; (80043b0 <UART_SetConfig+0x2e4>)
 8004356:	4293      	cmp	r3, r2
 8004358:	f040 8087 	bne.w	800446a <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800435c:	7efb      	ldrb	r3, [r7, #27]
 800435e:	2b08      	cmp	r3, #8
 8004360:	d836      	bhi.n	80043d0 <UART_SetConfig+0x304>
 8004362:	a201      	add	r2, pc, #4	; (adr r2, 8004368 <UART_SetConfig+0x29c>)
 8004364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004368:	0800438d 	.word	0x0800438d
 800436c:	080043d1 	.word	0x080043d1
 8004370:	08004395 	.word	0x08004395
 8004374:	080043d1 	.word	0x080043d1
 8004378:	0800439b 	.word	0x0800439b
 800437c:	080043d1 	.word	0x080043d1
 8004380:	080043d1 	.word	0x080043d1
 8004384:	080043d1 	.word	0x080043d1
 8004388:	080043a3 	.word	0x080043a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800438c:	f7fe fba2 	bl	8002ad4 <HAL_RCC_GetPCLK1Freq>
 8004390:	6178      	str	r0, [r7, #20]
        break;
 8004392:	e022      	b.n	80043da <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004394:	4b0d      	ldr	r3, [pc, #52]	; (80043cc <UART_SetConfig+0x300>)
 8004396:	617b      	str	r3, [r7, #20]
        break;
 8004398:	e01f      	b.n	80043da <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800439a:	f7fe fb05 	bl	80029a8 <HAL_RCC_GetSysClockFreq>
 800439e:	6178      	str	r0, [r7, #20]
        break;
 80043a0:	e01b      	b.n	80043da <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043a6:	617b      	str	r3, [r7, #20]
        break;
 80043a8:	e017      	b.n	80043da <UART_SetConfig+0x30e>
 80043aa:	bf00      	nop
 80043ac:	efff69f3 	.word	0xefff69f3
 80043b0:	40008000 	.word	0x40008000
 80043b4:	40013800 	.word	0x40013800
 80043b8:	40021000 	.word	0x40021000
 80043bc:	40004400 	.word	0x40004400
 80043c0:	40004800 	.word	0x40004800
 80043c4:	40004c00 	.word	0x40004c00
 80043c8:	40005000 	.word	0x40005000
 80043cc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80043d0:	2300      	movs	r3, #0
 80043d2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	76bb      	strb	r3, [r7, #26]
        break;
 80043d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f000 80f1 	beq.w	80045c4 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	4613      	mov	r3, r2
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	4413      	add	r3, r2
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d305      	bcc.n	80043fe <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043f8:	697a      	ldr	r2, [r7, #20]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d902      	bls.n	8004404 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	76bb      	strb	r3, [r7, #26]
 8004402:	e0df      	b.n	80045c4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	4619      	mov	r1, r3
 8004408:	f04f 0200 	mov.w	r2, #0
 800440c:	f04f 0300 	mov.w	r3, #0
 8004410:	f04f 0400 	mov.w	r4, #0
 8004414:	0214      	lsls	r4, r2, #8
 8004416:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800441a:	020b      	lsls	r3, r1, #8
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	6852      	ldr	r2, [r2, #4]
 8004420:	0852      	lsrs	r2, r2, #1
 8004422:	4611      	mov	r1, r2
 8004424:	f04f 0200 	mov.w	r2, #0
 8004428:	eb13 0b01 	adds.w	fp, r3, r1
 800442c:	eb44 0c02 	adc.w	ip, r4, r2
 8004430:	4658      	mov	r0, fp
 8004432:	4661      	mov	r1, ip
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f04f 0400 	mov.w	r4, #0
 800443c:	461a      	mov	r2, r3
 800443e:	4623      	mov	r3, r4
 8004440:	f7fb ff16 	bl	8000270 <__aeabi_uldivmod>
 8004444:	4603      	mov	r3, r0
 8004446:	460c      	mov	r4, r1
 8004448:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004450:	d308      	bcc.n	8004464 <UART_SetConfig+0x398>
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004458:	d204      	bcs.n	8004464 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	60da      	str	r2, [r3, #12]
 8004462:	e0af      	b.n	80045c4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	76bb      	strb	r3, [r7, #26]
 8004468:	e0ac      	b.n	80045c4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	69db      	ldr	r3, [r3, #28]
 800446e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004472:	d15b      	bne.n	800452c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004474:	7efb      	ldrb	r3, [r7, #27]
 8004476:	2b08      	cmp	r3, #8
 8004478:	d827      	bhi.n	80044ca <UART_SetConfig+0x3fe>
 800447a:	a201      	add	r2, pc, #4	; (adr r2, 8004480 <UART_SetConfig+0x3b4>)
 800447c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004480:	080044a5 	.word	0x080044a5
 8004484:	080044ad 	.word	0x080044ad
 8004488:	080044b5 	.word	0x080044b5
 800448c:	080044cb 	.word	0x080044cb
 8004490:	080044bb 	.word	0x080044bb
 8004494:	080044cb 	.word	0x080044cb
 8004498:	080044cb 	.word	0x080044cb
 800449c:	080044cb 	.word	0x080044cb
 80044a0:	080044c3 	.word	0x080044c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044a4:	f7fe fb16 	bl	8002ad4 <HAL_RCC_GetPCLK1Freq>
 80044a8:	6178      	str	r0, [r7, #20]
        break;
 80044aa:	e013      	b.n	80044d4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044ac:	f7fe fb28 	bl	8002b00 <HAL_RCC_GetPCLK2Freq>
 80044b0:	6178      	str	r0, [r7, #20]
        break;
 80044b2:	e00f      	b.n	80044d4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044b4:	4b49      	ldr	r3, [pc, #292]	; (80045dc <UART_SetConfig+0x510>)
 80044b6:	617b      	str	r3, [r7, #20]
        break;
 80044b8:	e00c      	b.n	80044d4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044ba:	f7fe fa75 	bl	80029a8 <HAL_RCC_GetSysClockFreq>
 80044be:	6178      	str	r0, [r7, #20]
        break;
 80044c0:	e008      	b.n	80044d4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044c6:	617b      	str	r3, [r7, #20]
        break;
 80044c8:	e004      	b.n	80044d4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80044ca:	2300      	movs	r3, #0
 80044cc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	76bb      	strb	r3, [r7, #26]
        break;
 80044d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d074      	beq.n	80045c4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	005a      	lsls	r2, r3, #1
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	085b      	lsrs	r3, r3, #1
 80044e4:	441a      	add	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	2b0f      	cmp	r3, #15
 80044f6:	d916      	bls.n	8004526 <UART_SetConfig+0x45a>
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044fe:	d212      	bcs.n	8004526 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	b29b      	uxth	r3, r3
 8004504:	f023 030f 	bic.w	r3, r3, #15
 8004508:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	085b      	lsrs	r3, r3, #1
 800450e:	b29b      	uxth	r3, r3
 8004510:	f003 0307 	and.w	r3, r3, #7
 8004514:	b29a      	uxth	r2, r3
 8004516:	89fb      	ldrh	r3, [r7, #14]
 8004518:	4313      	orrs	r3, r2
 800451a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	89fa      	ldrh	r2, [r7, #14]
 8004522:	60da      	str	r2, [r3, #12]
 8004524:	e04e      	b.n	80045c4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	76bb      	strb	r3, [r7, #26]
 800452a:	e04b      	b.n	80045c4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800452c:	7efb      	ldrb	r3, [r7, #27]
 800452e:	2b08      	cmp	r3, #8
 8004530:	d827      	bhi.n	8004582 <UART_SetConfig+0x4b6>
 8004532:	a201      	add	r2, pc, #4	; (adr r2, 8004538 <UART_SetConfig+0x46c>)
 8004534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004538:	0800455d 	.word	0x0800455d
 800453c:	08004565 	.word	0x08004565
 8004540:	0800456d 	.word	0x0800456d
 8004544:	08004583 	.word	0x08004583
 8004548:	08004573 	.word	0x08004573
 800454c:	08004583 	.word	0x08004583
 8004550:	08004583 	.word	0x08004583
 8004554:	08004583 	.word	0x08004583
 8004558:	0800457b 	.word	0x0800457b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800455c:	f7fe faba 	bl	8002ad4 <HAL_RCC_GetPCLK1Freq>
 8004560:	6178      	str	r0, [r7, #20]
        break;
 8004562:	e013      	b.n	800458c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004564:	f7fe facc 	bl	8002b00 <HAL_RCC_GetPCLK2Freq>
 8004568:	6178      	str	r0, [r7, #20]
        break;
 800456a:	e00f      	b.n	800458c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800456c:	4b1b      	ldr	r3, [pc, #108]	; (80045dc <UART_SetConfig+0x510>)
 800456e:	617b      	str	r3, [r7, #20]
        break;
 8004570:	e00c      	b.n	800458c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004572:	f7fe fa19 	bl	80029a8 <HAL_RCC_GetSysClockFreq>
 8004576:	6178      	str	r0, [r7, #20]
        break;
 8004578:	e008      	b.n	800458c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800457a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800457e:	617b      	str	r3, [r7, #20]
        break;
 8004580:	e004      	b.n	800458c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004582:	2300      	movs	r3, #0
 8004584:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	76bb      	strb	r3, [r7, #26]
        break;
 800458a:	bf00      	nop
    }

    if (pclk != 0U)
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d018      	beq.n	80045c4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	085a      	lsrs	r2, r3, #1
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	441a      	add	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	2b0f      	cmp	r3, #15
 80045ac:	d908      	bls.n	80045c0 <UART_SetConfig+0x4f4>
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045b4:	d204      	bcs.n	80045c0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	60da      	str	r2, [r3, #12]
 80045be:	e001      	b.n	80045c4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80045d0:	7ebb      	ldrb	r3, [r7, #26]
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3720      	adds	r7, #32
 80045d6:	46bd      	mov	sp, r7
 80045d8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80045dc:	00f42400 	.word	0x00f42400

080045e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ec:	f003 0301 	and.w	r3, r3, #1
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00a      	beq.n	800460a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	430a      	orrs	r2, r1
 8004608:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00a      	beq.n	800462c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	430a      	orrs	r2, r1
 800462a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004630:	f003 0304 	and.w	r3, r3, #4
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00a      	beq.n	800464e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	430a      	orrs	r2, r1
 800464c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004652:	f003 0308 	and.w	r3, r3, #8
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00a      	beq.n	8004670 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	430a      	orrs	r2, r1
 800466e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004674:	f003 0310 	and.w	r3, r3, #16
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00a      	beq.n	8004692 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	430a      	orrs	r2, r1
 8004690:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004696:	f003 0320 	and.w	r3, r3, #32
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00a      	beq.n	80046b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	430a      	orrs	r2, r1
 80046b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d01a      	beq.n	80046f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046de:	d10a      	bne.n	80046f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	430a      	orrs	r2, r1
 80046f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00a      	beq.n	8004718 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	430a      	orrs	r2, r1
 8004716:	605a      	str	r2, [r3, #4]
  }
}
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b086      	sub	sp, #24
 8004728:	af02      	add	r7, sp, #8
 800472a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004732:	f7fb ff49 	bl	80005c8 <HAL_GetTick>
 8004736:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0308 	and.w	r3, r3, #8
 8004742:	2b08      	cmp	r3, #8
 8004744:	d10e      	bne.n	8004764 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004746:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800474a:	9300      	str	r3, [sp, #0]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 f82a 	bl	80047ae <UART_WaitOnFlagUntilTimeout>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d001      	beq.n	8004764 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e020      	b.n	80047a6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0304 	and.w	r3, r3, #4
 800476e:	2b04      	cmp	r3, #4
 8004770:	d10e      	bne.n	8004790 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004772:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004776:	9300      	str	r3, [sp, #0]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 f814 	bl	80047ae <UART_WaitOnFlagUntilTimeout>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d001      	beq.n	8004790 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e00a      	b.n	80047a6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2220      	movs	r2, #32
 8004794:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2220      	movs	r2, #32
 800479a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b084      	sub	sp, #16
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	60f8      	str	r0, [r7, #12]
 80047b6:	60b9      	str	r1, [r7, #8]
 80047b8:	603b      	str	r3, [r7, #0]
 80047ba:	4613      	mov	r3, r2
 80047bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047be:	e05d      	b.n	800487c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c6:	d059      	beq.n	800487c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047c8:	f7fb fefe 	bl	80005c8 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	69ba      	ldr	r2, [r7, #24]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d302      	bcc.n	80047de <UART_WaitOnFlagUntilTimeout+0x30>
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d11b      	bne.n	8004816 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047ec:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	689a      	ldr	r2, [r3, #8]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f022 0201 	bic.w	r2, r2, #1
 80047fc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2220      	movs	r2, #32
 8004802:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2220      	movs	r2, #32
 8004808:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e042      	b.n	800489c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0304 	and.w	r3, r3, #4
 8004820:	2b00      	cmp	r3, #0
 8004822:	d02b      	beq.n	800487c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	69db      	ldr	r3, [r3, #28]
 800482a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800482e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004832:	d123      	bne.n	800487c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800483c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800484c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	689a      	ldr	r2, [r3, #8]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f022 0201 	bic.w	r2, r2, #1
 800485c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2220      	movs	r2, #32
 8004862:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2220      	movs	r2, #32
 8004868:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2220      	movs	r2, #32
 800486e:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e00f      	b.n	800489c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	69da      	ldr	r2, [r3, #28]
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	4013      	ands	r3, r2
 8004886:	68ba      	ldr	r2, [r7, #8]
 8004888:	429a      	cmp	r2, r3
 800488a:	bf0c      	ite	eq
 800488c:	2301      	moveq	r3, #1
 800488e:	2300      	movne	r3, #0
 8004890:	b2db      	uxtb	r3, r3
 8004892:	461a      	mov	r2, r3
 8004894:	79fb      	ldrb	r3, [r7, #7]
 8004896:	429a      	cmp	r2, r3
 8004898:	d092      	beq.n	80047c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3710      	adds	r7, #16
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	4603      	mov	r3, r0
 80048ac:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80048ae:	2300      	movs	r3, #0
 80048b0:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80048b2:	2110      	movs	r1, #16
 80048b4:	20d4      	movs	r0, #212	; 0xd4
 80048b6:	f000 fcad 	bl	8005214 <SENSOR_IO_Read>
 80048ba:	4603      	mov	r3, r0
 80048bc:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80048be:	88fb      	ldrh	r3, [r7, #6]
 80048c0:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80048c2:	7bbb      	ldrb	r3, [r7, #14]
 80048c4:	f003 0303 	and.w	r3, r3, #3
 80048c8:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80048ca:	7bba      	ldrb	r2, [r7, #14]
 80048cc:	7bfb      	ldrb	r3, [r7, #15]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 80048d2:	7bbb      	ldrb	r3, [r7, #14]
 80048d4:	461a      	mov	r2, r3
 80048d6:	2110      	movs	r1, #16
 80048d8:	20d4      	movs	r0, #212	; 0xd4
 80048da:	f000 fc81 	bl	80051e0 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80048de:	2112      	movs	r1, #18
 80048e0:	20d4      	movs	r0, #212	; 0xd4
 80048e2:	f000 fc97 	bl	8005214 <SENSOR_IO_Read>
 80048e6:	4603      	mov	r3, r0
 80048e8:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 80048ea:	88fb      	ldrh	r3, [r7, #6]
 80048ec:	0a1b      	lsrs	r3, r3, #8
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 80048f2:	7bbb      	ldrb	r3, [r7, #14]
 80048f4:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 80048f8:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 80048fa:	7bba      	ldrb	r2, [r7, #14]
 80048fc:	7bfb      	ldrb	r3, [r7, #15]
 80048fe:	4313      	orrs	r3, r2
 8004900:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8004902:	7bbb      	ldrb	r3, [r7, #14]
 8004904:	461a      	mov	r2, r3
 8004906:	2112      	movs	r1, #18
 8004908:	20d4      	movs	r0, #212	; 0xd4
 800490a:	f000 fc69 	bl	80051e0 <SENSOR_IO_Write>
}
 800490e:	bf00      	nop
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}

08004916 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8004916:	b580      	push	{r7, lr}
 8004918:	b082      	sub	sp, #8
 800491a:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800491c:	2300      	movs	r3, #0
 800491e:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8004920:	2110      	movs	r1, #16
 8004922:	20d4      	movs	r0, #212	; 0xd4
 8004924:	f000 fc76 	bl	8005214 <SENSOR_IO_Read>
 8004928:	4603      	mov	r3, r0
 800492a:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 800492c:	79fb      	ldrb	r3, [r7, #7]
 800492e:	f003 030f 	and.w	r3, r3, #15
 8004932:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8004934:	79fb      	ldrb	r3, [r7, #7]
 8004936:	461a      	mov	r2, r3
 8004938:	2110      	movs	r1, #16
 800493a:	20d4      	movs	r0, #212	; 0xd4
 800493c:	f000 fc50 	bl	80051e0 <SENSOR_IO_Write>
}
 8004940:	bf00      	nop
 8004942:	3708      	adds	r7, #8
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8004948:	b580      	push	{r7, lr}
 800494a:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 800494c:	f000 fc3e 	bl	80051cc <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8004950:	210f      	movs	r1, #15
 8004952:	20d4      	movs	r0, #212	; 0xd4
 8004954:	f000 fc5e 	bl	8005214 <SENSOR_IO_Read>
 8004958:	4603      	mov	r3, r0
}
 800495a:	4618      	mov	r0, r3
 800495c:	bd80      	pop	{r7, pc}

0800495e <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 800495e:	b580      	push	{r7, lr}
 8004960:	b084      	sub	sp, #16
 8004962:	af00      	add	r7, sp, #0
 8004964:	4603      	mov	r3, r0
 8004966:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8004968:	2300      	movs	r3, #0
 800496a:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 800496c:	2115      	movs	r1, #21
 800496e:	20d4      	movs	r0, #212	; 0xd4
 8004970:	f000 fc50 	bl	8005214 <SENSOR_IO_Read>
 8004974:	4603      	mov	r3, r0
 8004976:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8004978:	7bfb      	ldrb	r3, [r7, #15]
 800497a:	f023 0310 	bic.w	r3, r3, #16
 800497e:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8004980:	88fb      	ldrh	r3, [r7, #6]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d003      	beq.n	800498e <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8004986:	7bfb      	ldrb	r3, [r7, #15]
 8004988:	f043 0310 	orr.w	r3, r3, #16
 800498c:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 800498e:	7bfb      	ldrb	r3, [r7, #15]
 8004990:	461a      	mov	r2, r3
 8004992:	2115      	movs	r1, #21
 8004994:	20d4      	movs	r0, #212	; 0xd4
 8004996:	f000 fc23 	bl	80051e0 <SENSOR_IO_Write>
}
 800499a:	bf00      	nop
 800499c:	3710      	adds	r7, #16
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
	...

080049a4 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b088      	sub	sp, #32
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 80049ac:	2300      	movs	r3, #0
 80049ae:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80049b0:	2300      	movs	r3, #0
 80049b2:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80049b4:	f04f 0300 	mov.w	r3, #0
 80049b8:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80049ba:	2110      	movs	r1, #16
 80049bc:	20d4      	movs	r0, #212	; 0xd4
 80049be:	f000 fc29 	bl	8005214 <SENSOR_IO_Read>
 80049c2:	4603      	mov	r3, r0
 80049c4:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 80049c6:	f107 0208 	add.w	r2, r7, #8
 80049ca:	2306      	movs	r3, #6
 80049cc:	2128      	movs	r1, #40	; 0x28
 80049ce:	20d4      	movs	r0, #212	; 0xd4
 80049d0:	f000 fc3e 	bl	8005250 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80049d4:	2300      	movs	r3, #0
 80049d6:	77fb      	strb	r3, [r7, #31]
 80049d8:	e01f      	b.n	8004a1a <LSM6DSL_AccReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80049da:	7ffb      	ldrb	r3, [r7, #31]
 80049dc:	005b      	lsls	r3, r3, #1
 80049de:	3301      	adds	r3, #1
 80049e0:	f107 0220 	add.w	r2, r7, #32
 80049e4:	4413      	add	r3, r2
 80049e6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	021b      	lsls	r3, r3, #8
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	7ffb      	ldrb	r3, [r7, #31]
 80049f2:	005b      	lsls	r3, r3, #1
 80049f4:	f107 0120 	add.w	r1, r7, #32
 80049f8:	440b      	add	r3, r1
 80049fa:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	4413      	add	r3, r2
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	7ffb      	ldrb	r3, [r7, #31]
 8004a06:	b212      	sxth	r2, r2
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	f107 0120 	add.w	r1, r7, #32
 8004a0e:	440b      	add	r3, r1
 8004a10:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8004a14:	7ffb      	ldrb	r3, [r7, #31]
 8004a16:	3301      	adds	r3, #1
 8004a18:	77fb      	strb	r3, [r7, #31]
 8004a1a:	7ffb      	ldrb	r3, [r7, #31]
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d9dc      	bls.n	80049da <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8004a20:	7dfb      	ldrb	r3, [r7, #23]
 8004a22:	f003 030c 	and.w	r3, r3, #12
 8004a26:	2b0c      	cmp	r3, #12
 8004a28:	d828      	bhi.n	8004a7c <LSM6DSL_AccReadXYZ+0xd8>
 8004a2a:	a201      	add	r2, pc, #4	; (adr r2, 8004a30 <LSM6DSL_AccReadXYZ+0x8c>)
 8004a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a30:	08004a65 	.word	0x08004a65
 8004a34:	08004a7d 	.word	0x08004a7d
 8004a38:	08004a7d 	.word	0x08004a7d
 8004a3c:	08004a7d 	.word	0x08004a7d
 8004a40:	08004a77 	.word	0x08004a77
 8004a44:	08004a7d 	.word	0x08004a7d
 8004a48:	08004a7d 	.word	0x08004a7d
 8004a4c:	08004a7d 	.word	0x08004a7d
 8004a50:	08004a6b 	.word	0x08004a6b
 8004a54:	08004a7d 	.word	0x08004a7d
 8004a58:	08004a7d 	.word	0x08004a7d
 8004a5c:	08004a7d 	.word	0x08004a7d
 8004a60:	08004a71 	.word	0x08004a71
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8004a64:	4b18      	ldr	r3, [pc, #96]	; (8004ac8 <LSM6DSL_AccReadXYZ+0x124>)
 8004a66:	61bb      	str	r3, [r7, #24]
    break;
 8004a68:	e008      	b.n	8004a7c <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8004a6a:	4b18      	ldr	r3, [pc, #96]	; (8004acc <LSM6DSL_AccReadXYZ+0x128>)
 8004a6c:	61bb      	str	r3, [r7, #24]
    break;
 8004a6e:	e005      	b.n	8004a7c <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8004a70:	4b17      	ldr	r3, [pc, #92]	; (8004ad0 <LSM6DSL_AccReadXYZ+0x12c>)
 8004a72:	61bb      	str	r3, [r7, #24]
    break;
 8004a74:	e002      	b.n	8004a7c <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8004a76:	4b17      	ldr	r3, [pc, #92]	; (8004ad4 <LSM6DSL_AccReadXYZ+0x130>)
 8004a78:	61bb      	str	r3, [r7, #24]
    break;    
 8004a7a:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	77fb      	strb	r3, [r7, #31]
 8004a80:	e01b      	b.n	8004aba <LSM6DSL_AccReadXYZ+0x116>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8004a82:	7ffb      	ldrb	r3, [r7, #31]
 8004a84:	005b      	lsls	r3, r3, #1
 8004a86:	f107 0220 	add.w	r2, r7, #32
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8004a90:	ee07 3a90 	vmov	s15, r3
 8004a94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a98:	edd7 7a06 	vldr	s15, [r7, #24]
 8004a9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aa0:	7ffb      	ldrb	r3, [r7, #31]
 8004aa2:	005b      	lsls	r3, r3, #1
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004aac:	ee17 2a90 	vmov	r2, s15
 8004ab0:	b212      	sxth	r2, r2
 8004ab2:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8004ab4:	7ffb      	ldrb	r3, [r7, #31]
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	77fb      	strb	r3, [r7, #31]
 8004aba:	7ffb      	ldrb	r3, [r7, #31]
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d9e0      	bls.n	8004a82 <LSM6DSL_AccReadXYZ+0xde>
  }
}
 8004ac0:	bf00      	nop
 8004ac2:	3720      	adds	r7, #32
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	3d79db23 	.word	0x3d79db23
 8004acc:	3df9db23 	.word	0x3df9db23
 8004ad0:	3e79db23 	.word	0x3e79db23
 8004ad4:	3ef9db23 	.word	0x3ef9db23

08004ad8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004ade:	f7fb fd47 	bl	8000570 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004ae2:	f000 f863 	bl	8004bac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004ae6:	f000 fa0f 	bl	8004f08 <MX_GPIO_Init>
  MX_DMA_Init();
 8004aea:	f000 f9ef 	bl	8004ecc <MX_DMA_Init>
  MX_DAC1_Init();
 8004aee:	f000 f8d7 	bl	8004ca0 <MX_DAC1_Init>
  MX_TIM2_Init();
 8004af2:	f000 f96d 	bl	8004dd0 <MX_TIM2_Init>
  MX_QUADSPI_Init();
 8004af6:	f000 f945 	bl	8004d84 <MX_QUADSPI_Init>
  MX_I2C2_Init();
 8004afa:	f000 f903 	bl	8004d04 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8004afe:	f000 f9b5 	bl	8004e6c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* Initialize I2C sensors */
  BSP_ACCELERO_Init();
 8004b02:	f000 fbc3 	bl	800528c <BSP_ACCELERO_Init>
  /* Set low power mode for accelerometer and magnetometer */
  BSP_ACCELERO_LowPower(1);
 8004b06:	2001      	movs	r0, #1
 8004b08:	f000 fbfe 	bl	8005308 <BSP_ACCELERO_LowPower>

    /* USER CODE BEGIN 3 */

	  /*Read Acceleration Value*/
//	  for(int i=0; i<100; i++){
		  BSP_ACCELERO_AccGetXYZ(accelero_XYZ);
 8004b0c:	4822      	ldr	r0, [pc, #136]	; (8004b98 <main+0xc0>)
 8004b0e:	f000 fc15 	bl	800533c <BSP_ACCELERO_AccGetXYZ>
		  if(accelero_XYZ[0] > max_accelero_XYZ[0] ) max_accelero_XYZ[0] = accelero_XYZ[0];
 8004b12:	4b21      	ldr	r3, [pc, #132]	; (8004b98 <main+0xc0>)
 8004b14:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004b18:	4b20      	ldr	r3, [pc, #128]	; (8004b9c <main+0xc4>)
 8004b1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	dd04      	ble.n	8004b2c <main+0x54>
 8004b22:	4b1d      	ldr	r3, [pc, #116]	; (8004b98 <main+0xc0>)
 8004b24:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004b28:	4b1c      	ldr	r3, [pc, #112]	; (8004b9c <main+0xc4>)
 8004b2a:	801a      	strh	r2, [r3, #0]
		  if(accelero_XYZ[1] > max_accelero_XYZ[1] ) max_accelero_XYZ[1] = accelero_XYZ[1];
 8004b2c:	4b1a      	ldr	r3, [pc, #104]	; (8004b98 <main+0xc0>)
 8004b2e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8004b32:	4b1a      	ldr	r3, [pc, #104]	; (8004b9c <main+0xc4>)
 8004b34:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	dd04      	ble.n	8004b46 <main+0x6e>
 8004b3c:	4b16      	ldr	r3, [pc, #88]	; (8004b98 <main+0xc0>)
 8004b3e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8004b42:	4b16      	ldr	r3, [pc, #88]	; (8004b9c <main+0xc4>)
 8004b44:	805a      	strh	r2, [r3, #2]
		  if(accelero_XYZ[2] > max_accelero_XYZ[2] ) max_accelero_XYZ[2] = accelero_XYZ[2];
 8004b46:	4b14      	ldr	r3, [pc, #80]	; (8004b98 <main+0xc0>)
 8004b48:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8004b4c:	4b13      	ldr	r3, [pc, #76]	; (8004b9c <main+0xc4>)
 8004b4e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	dd04      	ble.n	8004b60 <main+0x88>
 8004b56:	4b10      	ldr	r3, [pc, #64]	; (8004b98 <main+0xc0>)
 8004b58:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8004b5c:	4b0f      	ldr	r3, [pc, #60]	; (8004b9c <main+0xc4>)
 8004b5e:	809a      	strh	r2, [r3, #4]
		  sprintf(accelero_XYZ_buffer, "Acceleration: X:%d Y:%d Z:%d", accelero_XYZ[0],accelero_XYZ[1],accelero_XYZ[2]);
 8004b60:	4b0d      	ldr	r3, [pc, #52]	; (8004b98 <main+0xc0>)
 8004b62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b66:	461a      	mov	r2, r3
 8004b68:	4b0b      	ldr	r3, [pc, #44]	; (8004b98 <main+0xc0>)
 8004b6a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004b6e:	4619      	mov	r1, r3
 8004b70:	4b09      	ldr	r3, [pc, #36]	; (8004b98 <main+0xc0>)
 8004b72:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004b76:	9300      	str	r3, [sp, #0]
 8004b78:	460b      	mov	r3, r1
 8004b7a:	4909      	ldr	r1, [pc, #36]	; (8004ba0 <main+0xc8>)
 8004b7c:	4809      	ldr	r0, [pc, #36]	; (8004ba4 <main+0xcc>)
 8004b7e:	f000 fef9 	bl	8005974 <siprintf>
		  HAL_UART_Transmit(&huart1,accelero_XYZ_buffer,50,30000);
 8004b82:	f247 5330 	movw	r3, #30000	; 0x7530
 8004b86:	2232      	movs	r2, #50	; 0x32
 8004b88:	4906      	ldr	r1, [pc, #24]	; (8004ba4 <main+0xcc>)
 8004b8a:	4807      	ldr	r0, [pc, #28]	; (8004ba8 <main+0xd0>)
 8004b8c:	f7ff fa0a 	bl	8003fa4 <HAL_UART_Transmit>
		  HAL_Delay(50); //20Hz
 8004b90:	2032      	movs	r0, #50	; 0x32
 8004b92:	f7fb fd25 	bl	80005e0 <HAL_Delay>
		  BSP_ACCELERO_AccGetXYZ(accelero_XYZ);
 8004b96:	e7b9      	b.n	8004b0c <main+0x34>
 8004b98:	200000d4 	.word	0x200000d4
 8004b9c:	200002b8 	.word	0x200002b8
 8004ba0:	08006198 	.word	0x08006198
 8004ba4:	20000184 	.word	0x20000184
 8004ba8:	200001b8 	.word	0x200001b8

08004bac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b0b8      	sub	sp, #224	; 0xe0
 8004bb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004bb2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004bb6:	2244      	movs	r2, #68	; 0x44
 8004bb8:	2100      	movs	r1, #0
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f000 fed2 	bl	8005964 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004bc0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	601a      	str	r2, [r3, #0]
 8004bc8:	605a      	str	r2, [r3, #4]
 8004bca:	609a      	str	r2, [r3, #8]
 8004bcc:	60da      	str	r2, [r3, #12]
 8004bce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004bd0:	463b      	mov	r3, r7
 8004bd2:	2288      	movs	r2, #136	; 0x88
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 fec4 	bl	8005964 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8004bdc:	2310      	movs	r3, #16
 8004bde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004be2:	2301      	movs	r3, #1
 8004be4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8004be8:	2300      	movs	r3, #0
 8004bea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8004bee:	2360      	movs	r3, #96	; 0x60
 8004bf0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004c00:	2301      	movs	r3, #1
 8004c02:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8004c06:	2328      	movs	r3, #40	; 0x28
 8004c08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8004c0c:	2307      	movs	r3, #7
 8004c0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004c12:	2302      	movs	r3, #2
 8004c14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004c18:	2302      	movs	r3, #2
 8004c1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004c1e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7fd f9f8 	bl	8002018 <HAL_RCC_OscConfig>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d001      	beq.n	8004c32 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8004c2e:	f000 f9d5 	bl	8004fdc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004c32:	230f      	movs	r3, #15
 8004c34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004c44:	2300      	movs	r3, #0
 8004c46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004c50:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004c54:	2104      	movs	r1, #4
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7fd fdc4 	bl	80027e4 <HAL_RCC_ClockConfig>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8004c62:	f000 f9bb 	bl	8004fdc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C2;
 8004c66:	2381      	movs	r3, #129	; 0x81
 8004c68:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004c72:	463b      	mov	r3, r7
 8004c74:	4618      	mov	r0, r3
 8004c76:	f7fd ffeb 	bl	8002c50 <HAL_RCCEx_PeriphCLKConfig>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d001      	beq.n	8004c84 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8004c80:	f000 f9ac 	bl	8004fdc <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004c84:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004c88:	f7fd f8b4 	bl	8001df4 <HAL_PWREx_ControlVoltageScaling>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d001      	beq.n	8004c96 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8004c92:	f000 f9a3 	bl	8004fdc <Error_Handler>
  }
}
 8004c96:	bf00      	nop
 8004c98:	37e0      	adds	r7, #224	; 0xe0
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
	...

08004ca0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b08a      	sub	sp, #40	; 0x28
 8004ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8004ca6:	1d3b      	adds	r3, r7, #4
 8004ca8:	2224      	movs	r2, #36	; 0x24
 8004caa:	2100      	movs	r1, #0
 8004cac:	4618      	mov	r0, r3
 8004cae:	f000 fe59 	bl	8005964 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8004cb2:	4b12      	ldr	r3, [pc, #72]	; (8004cfc <MX_DAC1_Init+0x5c>)
 8004cb4:	4a12      	ldr	r2, [pc, #72]	; (8004d00 <MX_DAC1_Init+0x60>)
 8004cb6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8004cb8:	4810      	ldr	r0, [pc, #64]	; (8004cfc <MX_DAC1_Init+0x5c>)
 8004cba:	f7fb fd95 	bl	80007e8 <HAL_DAC_Init>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d001      	beq.n	8004cc8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8004cc4:	f000 f98a 	bl	8004fdc <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8004ccc:	2324      	movs	r3, #36	; 0x24
 8004cce:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8004cdc:	1d3b      	adds	r3, r7, #4
 8004cde:	2200      	movs	r2, #0
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	4806      	ldr	r0, [pc, #24]	; (8004cfc <MX_DAC1_Init+0x5c>)
 8004ce4:	f7fb fda2 	bl	800082c <HAL_DAC_ConfigChannel>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d001      	beq.n	8004cf2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8004cee:	f000 f975 	bl	8004fdc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8004cf2:	bf00      	nop
 8004cf4:	3728      	adds	r7, #40	; 0x28
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	200000dc 	.word	0x200000dc
 8004d00:	40007400 	.word	0x40007400

08004d04 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004d08:	4b1b      	ldr	r3, [pc, #108]	; (8004d78 <MX_I2C2_Init+0x74>)
 8004d0a:	4a1c      	ldr	r2, [pc, #112]	; (8004d7c <MX_I2C2_Init+0x78>)
 8004d0c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8004d0e:	4b1a      	ldr	r3, [pc, #104]	; (8004d78 <MX_I2C2_Init+0x74>)
 8004d10:	4a1b      	ldr	r2, [pc, #108]	; (8004d80 <MX_I2C2_Init+0x7c>)
 8004d12:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8004d14:	4b18      	ldr	r3, [pc, #96]	; (8004d78 <MX_I2C2_Init+0x74>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004d1a:	4b17      	ldr	r3, [pc, #92]	; (8004d78 <MX_I2C2_Init+0x74>)
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004d20:	4b15      	ldr	r3, [pc, #84]	; (8004d78 <MX_I2C2_Init+0x74>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8004d26:	4b14      	ldr	r3, [pc, #80]	; (8004d78 <MX_I2C2_Init+0x74>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004d2c:	4b12      	ldr	r3, [pc, #72]	; (8004d78 <MX_I2C2_Init+0x74>)
 8004d2e:	2200      	movs	r2, #0
 8004d30:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004d32:	4b11      	ldr	r3, [pc, #68]	; (8004d78 <MX_I2C2_Init+0x74>)
 8004d34:	2200      	movs	r2, #0
 8004d36:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004d38:	4b0f      	ldr	r3, [pc, #60]	; (8004d78 <MX_I2C2_Init+0x74>)
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004d3e:	480e      	ldr	r0, [pc, #56]	; (8004d78 <MX_I2C2_Init+0x74>)
 8004d40:	f7fc faaa 	bl	8001298 <HAL_I2C_Init>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8004d4a:	f000 f947 	bl	8004fdc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004d4e:	2100      	movs	r1, #0
 8004d50:	4809      	ldr	r0, [pc, #36]	; (8004d78 <MX_I2C2_Init+0x74>)
 8004d52:	f7fc ffa9 	bl	8001ca8 <HAL_I2CEx_ConfigAnalogFilter>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d001      	beq.n	8004d60 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8004d5c:	f000 f93e 	bl	8004fdc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8004d60:	2100      	movs	r1, #0
 8004d62:	4805      	ldr	r0, [pc, #20]	; (8004d78 <MX_I2C2_Init+0x74>)
 8004d64:	f7fc ffeb 	bl	8001d3e <HAL_I2CEx_ConfigDigitalFilter>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d001      	beq.n	8004d72 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8004d6e:	f000 f935 	bl	8004fdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004d72:	bf00      	nop
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	200000f0 	.word	0x200000f0
 8004d7c:	40005800 	.word	0x40005800
 8004d80:	10909cec 	.word	0x10909cec

08004d84 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8004d88:	4b0f      	ldr	r3, [pc, #60]	; (8004dc8 <MX_QUADSPI_Init+0x44>)
 8004d8a:	4a10      	ldr	r2, [pc, #64]	; (8004dcc <MX_QUADSPI_Init+0x48>)
 8004d8c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8004d8e:	4b0e      	ldr	r3, [pc, #56]	; (8004dc8 <MX_QUADSPI_Init+0x44>)
 8004d90:	22ff      	movs	r2, #255	; 0xff
 8004d92:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8004d94:	4b0c      	ldr	r3, [pc, #48]	; (8004dc8 <MX_QUADSPI_Init+0x44>)
 8004d96:	2201      	movs	r2, #1
 8004d98:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8004d9a:	4b0b      	ldr	r3, [pc, #44]	; (8004dc8 <MX_QUADSPI_Init+0x44>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8004da0:	4b09      	ldr	r3, [pc, #36]	; (8004dc8 <MX_QUADSPI_Init+0x44>)
 8004da2:	2201      	movs	r2, #1
 8004da4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8004da6:	4b08      	ldr	r3, [pc, #32]	; (8004dc8 <MX_QUADSPI_Init+0x44>)
 8004da8:	2200      	movs	r2, #0
 8004daa:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8004dac:	4b06      	ldr	r3, [pc, #24]	; (8004dc8 <MX_QUADSPI_Init+0x44>)
 8004dae:	2200      	movs	r2, #0
 8004db0:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8004db2:	4805      	ldr	r0, [pc, #20]	; (8004dc8 <MX_QUADSPI_Init+0x44>)
 8004db4:	f7fd f874 	bl	8001ea0 <HAL_QSPI_Init>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d001      	beq.n	8004dc2 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8004dbe:	f000 f90d 	bl	8004fdc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8004dc2:	bf00      	nop
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	200002c0 	.word	0x200002c0
 8004dcc:	a0001000 	.word	0xa0001000

08004dd0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b088      	sub	sp, #32
 8004dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004dd6:	f107 0310 	add.w	r3, r7, #16
 8004dda:	2200      	movs	r2, #0
 8004ddc:	601a      	str	r2, [r3, #0]
 8004dde:	605a      	str	r2, [r3, #4]
 8004de0:	609a      	str	r2, [r3, #8]
 8004de2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004de4:	1d3b      	adds	r3, r7, #4
 8004de6:	2200      	movs	r2, #0
 8004de8:	601a      	str	r2, [r3, #0]
 8004dea:	605a      	str	r2, [r3, #4]
 8004dec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004dee:	4b1e      	ldr	r3, [pc, #120]	; (8004e68 <MX_TIM2_Init+0x98>)
 8004df0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004df4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004df6:	4b1c      	ldr	r3, [pc, #112]	; (8004e68 <MX_TIM2_Init+0x98>)
 8004df8:	2200      	movs	r2, #0
 8004dfa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004dfc:	4b1a      	ldr	r3, [pc, #104]	; (8004e68 <MX_TIM2_Init+0x98>)
 8004dfe:	2200      	movs	r2, #0
 8004e00:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1814;
 8004e02:	4b19      	ldr	r3, [pc, #100]	; (8004e68 <MX_TIM2_Init+0x98>)
 8004e04:	f240 7216 	movw	r2, #1814	; 0x716
 8004e08:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e0a:	4b17      	ldr	r3, [pc, #92]	; (8004e68 <MX_TIM2_Init+0x98>)
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e10:	4b15      	ldr	r3, [pc, #84]	; (8004e68 <MX_TIM2_Init+0x98>)
 8004e12:	2200      	movs	r2, #0
 8004e14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004e16:	4814      	ldr	r0, [pc, #80]	; (8004e68 <MX_TIM2_Init+0x98>)
 8004e18:	f7fe fbca 	bl	80035b0 <HAL_TIM_Base_Init>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d001      	beq.n	8004e26 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8004e22:	f000 f8db 	bl	8004fdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004e26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e2a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004e2c:	f107 0310 	add.w	r3, r7, #16
 8004e30:	4619      	mov	r1, r3
 8004e32:	480d      	ldr	r0, [pc, #52]	; (8004e68 <MX_TIM2_Init+0x98>)
 8004e34:	f7fe fda3 	bl	800397e <HAL_TIM_ConfigClockSource>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d001      	beq.n	8004e42 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8004e3e:	f000 f8cd 	bl	8004fdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004e42:	2320      	movs	r3, #32
 8004e44:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e46:	2300      	movs	r3, #0
 8004e48:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004e4a:	1d3b      	adds	r3, r7, #4
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	4806      	ldr	r0, [pc, #24]	; (8004e68 <MX_TIM2_Init+0x98>)
 8004e50:	f7fe ffb4 	bl	8003dbc <HAL_TIMEx_MasterConfigSynchronization>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d001      	beq.n	8004e5e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8004e5a:	f000 f8bf 	bl	8004fdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004e5e:	bf00      	nop
 8004e60:	3720      	adds	r7, #32
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	2000026c 	.word	0x2000026c

08004e6c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004e70:	4b14      	ldr	r3, [pc, #80]	; (8004ec4 <MX_USART1_UART_Init+0x58>)
 8004e72:	4a15      	ldr	r2, [pc, #84]	; (8004ec8 <MX_USART1_UART_Init+0x5c>)
 8004e74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004e76:	4b13      	ldr	r3, [pc, #76]	; (8004ec4 <MX_USART1_UART_Init+0x58>)
 8004e78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004e7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004e7e:	4b11      	ldr	r3, [pc, #68]	; (8004ec4 <MX_USART1_UART_Init+0x58>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004e84:	4b0f      	ldr	r3, [pc, #60]	; (8004ec4 <MX_USART1_UART_Init+0x58>)
 8004e86:	2200      	movs	r2, #0
 8004e88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004e8a:	4b0e      	ldr	r3, [pc, #56]	; (8004ec4 <MX_USART1_UART_Init+0x58>)
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004e90:	4b0c      	ldr	r3, [pc, #48]	; (8004ec4 <MX_USART1_UART_Init+0x58>)
 8004e92:	220c      	movs	r2, #12
 8004e94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e96:	4b0b      	ldr	r3, [pc, #44]	; (8004ec4 <MX_USART1_UART_Init+0x58>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e9c:	4b09      	ldr	r3, [pc, #36]	; (8004ec4 <MX_USART1_UART_Init+0x58>)
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004ea2:	4b08      	ldr	r3, [pc, #32]	; (8004ec4 <MX_USART1_UART_Init+0x58>)
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004ea8:	4b06      	ldr	r3, [pc, #24]	; (8004ec4 <MX_USART1_UART_Init+0x58>)
 8004eaa:	2200      	movs	r2, #0
 8004eac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004eae:	4805      	ldr	r0, [pc, #20]	; (8004ec4 <MX_USART1_UART_Init+0x58>)
 8004eb0:	f7ff f82a 	bl	8003f08 <HAL_UART_Init>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d001      	beq.n	8004ebe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8004eba:	f000 f88f 	bl	8004fdc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004ebe:	bf00      	nop
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	200001b8 	.word	0x200001b8
 8004ec8:	40013800 	.word	0x40013800

08004ecc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004ed2:	4b0c      	ldr	r3, [pc, #48]	; (8004f04 <MX_DMA_Init+0x38>)
 8004ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ed6:	4a0b      	ldr	r2, [pc, #44]	; (8004f04 <MX_DMA_Init+0x38>)
 8004ed8:	f043 0301 	orr.w	r3, r3, #1
 8004edc:	6493      	str	r3, [r2, #72]	; 0x48
 8004ede:	4b09      	ldr	r3, [pc, #36]	; (8004f04 <MX_DMA_Init+0x38>)
 8004ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	607b      	str	r3, [r7, #4]
 8004ee8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8004eea:	2200      	movs	r2, #0
 8004eec:	2100      	movs	r1, #0
 8004eee:	200d      	movs	r0, #13
 8004ef0:	f7fb fc50 	bl	8000794 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8004ef4:	200d      	movs	r0, #13
 8004ef6:	f7fb fc69 	bl	80007cc <HAL_NVIC_EnableIRQ>

}
 8004efa:	bf00      	nop
 8004efc:	3708      	adds	r7, #8
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	40021000 	.word	0x40021000

08004f08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b08a      	sub	sp, #40	; 0x28
 8004f0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f0e:	f107 0314 	add.w	r3, r7, #20
 8004f12:	2200      	movs	r2, #0
 8004f14:	601a      	str	r2, [r3, #0]
 8004f16:	605a      	str	r2, [r3, #4]
 8004f18:	609a      	str	r2, [r3, #8]
 8004f1a:	60da      	str	r2, [r3, #12]
 8004f1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f1e:	4b2b      	ldr	r3, [pc, #172]	; (8004fcc <MX_GPIO_Init+0xc4>)
 8004f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f22:	4a2a      	ldr	r2, [pc, #168]	; (8004fcc <MX_GPIO_Init+0xc4>)
 8004f24:	f043 0304 	orr.w	r3, r3, #4
 8004f28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f2a:	4b28      	ldr	r3, [pc, #160]	; (8004fcc <MX_GPIO_Init+0xc4>)
 8004f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f2e:	f003 0304 	and.w	r3, r3, #4
 8004f32:	613b      	str	r3, [r7, #16]
 8004f34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f36:	4b25      	ldr	r3, [pc, #148]	; (8004fcc <MX_GPIO_Init+0xc4>)
 8004f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f3a:	4a24      	ldr	r2, [pc, #144]	; (8004fcc <MX_GPIO_Init+0xc4>)
 8004f3c:	f043 0301 	orr.w	r3, r3, #1
 8004f40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f42:	4b22      	ldr	r3, [pc, #136]	; (8004fcc <MX_GPIO_Init+0xc4>)
 8004f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	60fb      	str	r3, [r7, #12]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004f4e:	4b1f      	ldr	r3, [pc, #124]	; (8004fcc <MX_GPIO_Init+0xc4>)
 8004f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f52:	4a1e      	ldr	r2, [pc, #120]	; (8004fcc <MX_GPIO_Init+0xc4>)
 8004f54:	f043 0310 	orr.w	r3, r3, #16
 8004f58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f5a:	4b1c      	ldr	r3, [pc, #112]	; (8004fcc <MX_GPIO_Init+0xc4>)
 8004f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f5e:	f003 0310 	and.w	r3, r3, #16
 8004f62:	60bb      	str	r3, [r7, #8]
 8004f64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f66:	4b19      	ldr	r3, [pc, #100]	; (8004fcc <MX_GPIO_Init+0xc4>)
 8004f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f6a:	4a18      	ldr	r2, [pc, #96]	; (8004fcc <MX_GPIO_Init+0xc4>)
 8004f6c:	f043 0302 	orr.w	r3, r3, #2
 8004f70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f72:	4b16      	ldr	r3, [pc, #88]	; (8004fcc <MX_GPIO_Init+0xc4>)
 8004f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	607b      	str	r3, [r7, #4]
 8004f7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004f84:	4812      	ldr	r0, [pc, #72]	; (8004fd0 <MX_GPIO_Init+0xc8>)
 8004f86:	f7fc f96f 	bl	8001268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004f8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004f90:	4b10      	ldr	r3, [pc, #64]	; (8004fd4 <MX_GPIO_Init+0xcc>)
 8004f92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f94:	2300      	movs	r3, #0
 8004f96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f98:	f107 0314 	add.w	r3, r7, #20
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	480e      	ldr	r0, [pc, #56]	; (8004fd8 <MX_GPIO_Init+0xd0>)
 8004fa0:	f7fb fec6 	bl	8000d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8004fa4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004fa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004faa:	2301      	movs	r3, #1
 8004fac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8004fb6:	f107 0314 	add.w	r3, r7, #20
 8004fba:	4619      	mov	r1, r3
 8004fbc:	4804      	ldr	r0, [pc, #16]	; (8004fd0 <MX_GPIO_Init+0xc8>)
 8004fbe:	f7fb feb7 	bl	8000d30 <HAL_GPIO_Init>

}
 8004fc2:	bf00      	nop
 8004fc4:	3728      	adds	r7, #40	; 0x28
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	40021000 	.word	0x40021000
 8004fd0:	48000400 	.word	0x48000400
 8004fd4:	10210000 	.word	0x10210000
 8004fd8:	48000800 	.word	0x48000800

08004fdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004fe0:	bf00      	nop
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
	...

08004fec <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b08a      	sub	sp, #40	; 0x28
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004ff4:	4b27      	ldr	r3, [pc, #156]	; (8005094 <I2Cx_MspInit+0xa8>)
 8004ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ff8:	4a26      	ldr	r2, [pc, #152]	; (8005094 <I2Cx_MspInit+0xa8>)
 8004ffa:	f043 0302 	orr.w	r3, r3, #2
 8004ffe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005000:	4b24      	ldr	r3, [pc, #144]	; (8005094 <I2Cx_MspInit+0xa8>)
 8005002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005004:	f003 0302 	and.w	r3, r3, #2
 8005008:	613b      	str	r3, [r7, #16]
 800500a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 800500c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005010:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8005012:	2312      	movs	r3, #18
 8005014:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8005016:	2301      	movs	r3, #1
 8005018:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800501a:	2303      	movs	r3, #3
 800501c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800501e:	2304      	movs	r3, #4
 8005020:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8005022:	f107 0314 	add.w	r3, r7, #20
 8005026:	4619      	mov	r1, r3
 8005028:	481b      	ldr	r0, [pc, #108]	; (8005098 <I2Cx_MspInit+0xac>)
 800502a:	f7fb fe81 	bl	8000d30 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800502e:	f107 0314 	add.w	r3, r7, #20
 8005032:	4619      	mov	r1, r3
 8005034:	4818      	ldr	r0, [pc, #96]	; (8005098 <I2Cx_MspInit+0xac>)
 8005036:	f7fb fe7b 	bl	8000d30 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800503a:	4b16      	ldr	r3, [pc, #88]	; (8005094 <I2Cx_MspInit+0xa8>)
 800503c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800503e:	4a15      	ldr	r2, [pc, #84]	; (8005094 <I2Cx_MspInit+0xa8>)
 8005040:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005044:	6593      	str	r3, [r2, #88]	; 0x58
 8005046:	4b13      	ldr	r3, [pc, #76]	; (8005094 <I2Cx_MspInit+0xa8>)
 8005048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800504a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800504e:	60fb      	str	r3, [r7, #12]
 8005050:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8005052:	4b10      	ldr	r3, [pc, #64]	; (8005094 <I2Cx_MspInit+0xa8>)
 8005054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005056:	4a0f      	ldr	r2, [pc, #60]	; (8005094 <I2Cx_MspInit+0xa8>)
 8005058:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800505c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800505e:	4b0d      	ldr	r3, [pc, #52]	; (8005094 <I2Cx_MspInit+0xa8>)
 8005060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005062:	4a0c      	ldr	r2, [pc, #48]	; (8005094 <I2Cx_MspInit+0xa8>)
 8005064:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005068:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800506a:	2200      	movs	r2, #0
 800506c:	210f      	movs	r1, #15
 800506e:	2021      	movs	r0, #33	; 0x21
 8005070:	f7fb fb90 	bl	8000794 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8005074:	2021      	movs	r0, #33	; 0x21
 8005076:	f7fb fba9 	bl	80007cc <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800507a:	2200      	movs	r2, #0
 800507c:	210f      	movs	r1, #15
 800507e:	2022      	movs	r0, #34	; 0x22
 8005080:	f7fb fb88 	bl	8000794 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8005084:	2022      	movs	r0, #34	; 0x22
 8005086:	f7fb fba1 	bl	80007cc <HAL_NVIC_EnableIRQ>
}
 800508a:	bf00      	nop
 800508c:	3728      	adds	r7, #40	; 0x28
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	40021000 	.word	0x40021000
 8005098:	48000400 	.word	0x48000400

0800509c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a12      	ldr	r2, [pc, #72]	; (80050f0 <I2Cx_Init+0x54>)
 80050a8:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a11      	ldr	r2, [pc, #68]	; (80050f4 <I2Cx_Init+0x58>)
 80050ae:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f7ff ff89 	bl	8004fec <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f7fc f8dc 	bl	8001298 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80050e0:	2100      	movs	r1, #0
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f7fc fde0 	bl	8001ca8 <HAL_I2CEx_ConfigAnalogFilter>
}
 80050e8:	bf00      	nop
 80050ea:	3708      	adds	r7, #8
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	40005800 	.word	0x40005800
 80050f4:	00702681 	.word	0x00702681

080050f8 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b08a      	sub	sp, #40	; 0x28
 80050fc:	af04      	add	r7, sp, #16
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	4608      	mov	r0, r1
 8005102:	4611      	mov	r1, r2
 8005104:	461a      	mov	r2, r3
 8005106:	4603      	mov	r3, r0
 8005108:	72fb      	strb	r3, [r7, #11]
 800510a:	460b      	mov	r3, r1
 800510c:	813b      	strh	r3, [r7, #8]
 800510e:	4613      	mov	r3, r2
 8005110:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8005112:	2300      	movs	r3, #0
 8005114:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8005116:	7afb      	ldrb	r3, [r7, #11]
 8005118:	b299      	uxth	r1, r3
 800511a:	88f8      	ldrh	r0, [r7, #6]
 800511c:	893a      	ldrh	r2, [r7, #8]
 800511e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005122:	9302      	str	r3, [sp, #8]
 8005124:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005126:	9301      	str	r3, [sp, #4]
 8005128:	6a3b      	ldr	r3, [r7, #32]
 800512a:	9300      	str	r3, [sp, #0]
 800512c:	4603      	mov	r3, r0
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f7fc fa84 	bl	800163c <HAL_I2C_Mem_Read>
 8005134:	4603      	mov	r3, r0
 8005136:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8005138:	7dfb      	ldrb	r3, [r7, #23]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d004      	beq.n	8005148 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 800513e:	7afb      	ldrb	r3, [r7, #11]
 8005140:	4619      	mov	r1, r3
 8005142:	68f8      	ldr	r0, [r7, #12]
 8005144:	f000 f832 	bl	80051ac <I2Cx_Error>
  }
  return status;
 8005148:	7dfb      	ldrb	r3, [r7, #23]
}
 800514a:	4618      	mov	r0, r3
 800514c:	3718      	adds	r7, #24
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8005152:	b580      	push	{r7, lr}
 8005154:	b08a      	sub	sp, #40	; 0x28
 8005156:	af04      	add	r7, sp, #16
 8005158:	60f8      	str	r0, [r7, #12]
 800515a:	4608      	mov	r0, r1
 800515c:	4611      	mov	r1, r2
 800515e:	461a      	mov	r2, r3
 8005160:	4603      	mov	r3, r0
 8005162:	72fb      	strb	r3, [r7, #11]
 8005164:	460b      	mov	r3, r1
 8005166:	813b      	strh	r3, [r7, #8]
 8005168:	4613      	mov	r3, r2
 800516a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800516c:	2300      	movs	r3, #0
 800516e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8005170:	7afb      	ldrb	r3, [r7, #11]
 8005172:	b299      	uxth	r1, r3
 8005174:	88f8      	ldrh	r0, [r7, #6]
 8005176:	893a      	ldrh	r2, [r7, #8]
 8005178:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800517c:	9302      	str	r3, [sp, #8]
 800517e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005180:	9301      	str	r3, [sp, #4]
 8005182:	6a3b      	ldr	r3, [r7, #32]
 8005184:	9300      	str	r3, [sp, #0]
 8005186:	4603      	mov	r3, r0
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f7fc f943 	bl	8001414 <HAL_I2C_Mem_Write>
 800518e:	4603      	mov	r3, r0
 8005190:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8005192:	7dfb      	ldrb	r3, [r7, #23]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d004      	beq.n	80051a2 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8005198:	7afb      	ldrb	r3, [r7, #11]
 800519a:	4619      	mov	r1, r3
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f000 f805 	bl	80051ac <I2Cx_Error>
  }
  return status;
 80051a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3718      	adds	r7, #24
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	460b      	mov	r3, r1
 80051b6:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f7fc f8fc 	bl	80013b6 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7ff ff6c 	bl	800509c <I2Cx_Init>
}
 80051c4:	bf00      	nop
 80051c6:	3708      	adds	r7, #8
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80051d0:	4802      	ldr	r0, [pc, #8]	; (80051dc <SENSOR_IO_Init+0x10>)
 80051d2:	f7ff ff63 	bl	800509c <I2Cx_Init>
}
 80051d6:	bf00      	nop
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	20000384 	.word	0x20000384

080051e0 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af02      	add	r7, sp, #8
 80051e6:	4603      	mov	r3, r0
 80051e8:	71fb      	strb	r3, [r7, #7]
 80051ea:	460b      	mov	r3, r1
 80051ec:	71bb      	strb	r3, [r7, #6]
 80051ee:	4613      	mov	r3, r2
 80051f0:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80051f2:	79bb      	ldrb	r3, [r7, #6]
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	79f9      	ldrb	r1, [r7, #7]
 80051f8:	2301      	movs	r3, #1
 80051fa:	9301      	str	r3, [sp, #4]
 80051fc:	1d7b      	adds	r3, r7, #5
 80051fe:	9300      	str	r3, [sp, #0]
 8005200:	2301      	movs	r3, #1
 8005202:	4803      	ldr	r0, [pc, #12]	; (8005210 <SENSOR_IO_Write+0x30>)
 8005204:	f7ff ffa5 	bl	8005152 <I2Cx_WriteMultiple>
}
 8005208:	bf00      	nop
 800520a:	3708      	adds	r7, #8
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	20000384 	.word	0x20000384

08005214 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b086      	sub	sp, #24
 8005218:	af02      	add	r7, sp, #8
 800521a:	4603      	mov	r3, r0
 800521c:	460a      	mov	r2, r1
 800521e:	71fb      	strb	r3, [r7, #7]
 8005220:	4613      	mov	r3, r2
 8005222:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8005224:	2300      	movs	r3, #0
 8005226:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8005228:	79bb      	ldrb	r3, [r7, #6]
 800522a:	b29a      	uxth	r2, r3
 800522c:	79f9      	ldrb	r1, [r7, #7]
 800522e:	2301      	movs	r3, #1
 8005230:	9301      	str	r3, [sp, #4]
 8005232:	f107 030f 	add.w	r3, r7, #15
 8005236:	9300      	str	r3, [sp, #0]
 8005238:	2301      	movs	r3, #1
 800523a:	4804      	ldr	r0, [pc, #16]	; (800524c <SENSOR_IO_Read+0x38>)
 800523c:	f7ff ff5c 	bl	80050f8 <I2Cx_ReadMultiple>

  return read_value;
 8005240:	7bfb      	ldrb	r3, [r7, #15]
}
 8005242:	4618      	mov	r0, r3
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	20000384 	.word	0x20000384

08005250 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af02      	add	r7, sp, #8
 8005256:	603a      	str	r2, [r7, #0]
 8005258:	461a      	mov	r2, r3
 800525a:	4603      	mov	r3, r0
 800525c:	71fb      	strb	r3, [r7, #7]
 800525e:	460b      	mov	r3, r1
 8005260:	71bb      	strb	r3, [r7, #6]
 8005262:	4613      	mov	r3, r2
 8005264:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8005266:	79bb      	ldrb	r3, [r7, #6]
 8005268:	b29a      	uxth	r2, r3
 800526a:	79f9      	ldrb	r1, [r7, #7]
 800526c:	88bb      	ldrh	r3, [r7, #4]
 800526e:	9301      	str	r3, [sp, #4]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	9300      	str	r3, [sp, #0]
 8005274:	2301      	movs	r3, #1
 8005276:	4804      	ldr	r0, [pc, #16]	; (8005288 <SENSOR_IO_ReadMultiple+0x38>)
 8005278:	f7ff ff3e 	bl	80050f8 <I2Cx_ReadMultiple>
 800527c:	4603      	mov	r3, r0
 800527e:	b29b      	uxth	r3, r3
}
 8005280:	4618      	mov	r0, r3
 8005282:	3708      	adds	r7, #8
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	20000384 	.word	0x20000384

0800528c <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8005292:	2300      	movs	r3, #0
 8005294:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8005296:	2300      	movs	r3, #0
 8005298:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800529a:	4b19      	ldr	r3, [pc, #100]	; (8005300 <BSP_ACCELERO_Init+0x74>)
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	4798      	blx	r3
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b6a      	cmp	r3, #106	; 0x6a
 80052a4:	d002      	beq.n	80052ac <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	73fb      	strb	r3, [r7, #15]
 80052aa:	e024      	b.n	80052f6 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 80052ac:	4b15      	ldr	r3, [pc, #84]	; (8005304 <BSP_ACCELERO_Init+0x78>)
 80052ae:	4a14      	ldr	r2, [pc, #80]	; (8005300 <BSP_ACCELERO_Init+0x74>)
 80052b0:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 80052b2:	2330      	movs	r3, #48	; 0x30
 80052b4:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80052b6:	2300      	movs	r3, #0
 80052b8:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 80052ba:	2300      	movs	r3, #0
 80052bc:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80052be:	2340      	movs	r3, #64	; 0x40
 80052c0:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 80052c2:	2300      	movs	r3, #0
 80052c4:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 80052c6:	2300      	movs	r3, #0
 80052c8:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 80052ca:	797a      	ldrb	r2, [r7, #5]
 80052cc:	7abb      	ldrb	r3, [r7, #10]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80052d4:	7a3b      	ldrb	r3, [r7, #8]
 80052d6:	f043 0304 	orr.w	r3, r3, #4
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	021b      	lsls	r3, r3, #8
 80052de:	b21a      	sxth	r2, r3
 80052e0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	b21b      	sxth	r3, r3
 80052e8:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80052ea:	4b06      	ldr	r3, [pc, #24]	; (8005304 <BSP_ACCELERO_Init+0x78>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	89ba      	ldrh	r2, [r7, #12]
 80052f2:	4610      	mov	r0, r2
 80052f4:	4798      	blx	r3
  }  

  return ret;
 80052f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	20000008 	.word	0x20000008
 8005304:	200000c0 	.word	0x200000c0

08005308 <BSP_ACCELERO_LowPower>:
  * @brief  Set/Unset the ACCELERO in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  * @retval None
  */
void BSP_ACCELERO_LowPower(uint16_t status)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	4603      	mov	r3, r0
 8005310:	80fb      	strh	r3, [r7, #6]
  /* Set/Unset the ACCELERO in low power mode */
  if(AccelerometerDrv != NULL)
 8005312:	4b09      	ldr	r3, [pc, #36]	; (8005338 <BSP_ACCELERO_LowPower+0x30>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00a      	beq.n	8005330 <BSP_ACCELERO_LowPower+0x28>
  {
    if(AccelerometerDrv->LowPower != NULL)
 800531a:	4b07      	ldr	r3, [pc, #28]	; (8005338 <BSP_ACCELERO_LowPower+0x30>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d005      	beq.n	8005330 <BSP_ACCELERO_LowPower+0x28>
    {
      AccelerometerDrv->LowPower(status);
 8005324:	4b04      	ldr	r3, [pc, #16]	; (8005338 <BSP_ACCELERO_LowPower+0x30>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	88fa      	ldrh	r2, [r7, #6]
 800532c:	4610      	mov	r0, r2
 800532e:	4798      	blx	r3
    }
  }
}
 8005330:	bf00      	nop
 8005332:	3708      	adds	r7, #8
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	200000c0 	.word	0x200000c0

0800533c <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8005344:	4b08      	ldr	r3, [pc, #32]	; (8005368 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d009      	beq.n	8005360 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 800534c:	4b06      	ldr	r3, [pc, #24]	; (8005368 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005352:	2b00      	cmp	r3, #0
 8005354:	d004      	beq.n	8005360 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8005356:	4b04      	ldr	r3, [pc, #16]	; (8005368 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	4798      	blx	r3
    }
  }
}
 8005360:	bf00      	nop
 8005362:	3708      	adds	r7, #8
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	200000c0 	.word	0x200000c0

0800536c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005372:	4b0f      	ldr	r3, [pc, #60]	; (80053b0 <HAL_MspInit+0x44>)
 8005374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005376:	4a0e      	ldr	r2, [pc, #56]	; (80053b0 <HAL_MspInit+0x44>)
 8005378:	f043 0301 	orr.w	r3, r3, #1
 800537c:	6613      	str	r3, [r2, #96]	; 0x60
 800537e:	4b0c      	ldr	r3, [pc, #48]	; (80053b0 <HAL_MspInit+0x44>)
 8005380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	607b      	str	r3, [r7, #4]
 8005388:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800538a:	4b09      	ldr	r3, [pc, #36]	; (80053b0 <HAL_MspInit+0x44>)
 800538c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800538e:	4a08      	ldr	r2, [pc, #32]	; (80053b0 <HAL_MspInit+0x44>)
 8005390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005394:	6593      	str	r3, [r2, #88]	; 0x58
 8005396:	4b06      	ldr	r3, [pc, #24]	; (80053b0 <HAL_MspInit+0x44>)
 8005398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800539a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800539e:	603b      	str	r3, [r7, #0]
 80053a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80053a2:	bf00      	nop
 80053a4:	370c      	adds	r7, #12
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	40021000 	.word	0x40021000

080053b4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b08a      	sub	sp, #40	; 0x28
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053bc:	f107 0314 	add.w	r3, r7, #20
 80053c0:	2200      	movs	r2, #0
 80053c2:	601a      	str	r2, [r3, #0]
 80053c4:	605a      	str	r2, [r3, #4]
 80053c6:	609a      	str	r2, [r3, #8]
 80053c8:	60da      	str	r2, [r3, #12]
 80053ca:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a2a      	ldr	r2, [pc, #168]	; (800547c <HAL_DAC_MspInit+0xc8>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d14d      	bne.n	8005472 <HAL_DAC_MspInit+0xbe>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80053d6:	4b2a      	ldr	r3, [pc, #168]	; (8005480 <HAL_DAC_MspInit+0xcc>)
 80053d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053da:	4a29      	ldr	r2, [pc, #164]	; (8005480 <HAL_DAC_MspInit+0xcc>)
 80053dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80053e0:	6593      	str	r3, [r2, #88]	; 0x58
 80053e2:	4b27      	ldr	r3, [pc, #156]	; (8005480 <HAL_DAC_MspInit+0xcc>)
 80053e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053ea:	613b      	str	r3, [r7, #16]
 80053ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053ee:	4b24      	ldr	r3, [pc, #144]	; (8005480 <HAL_DAC_MspInit+0xcc>)
 80053f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053f2:	4a23      	ldr	r2, [pc, #140]	; (8005480 <HAL_DAC_MspInit+0xcc>)
 80053f4:	f043 0301 	orr.w	r3, r3, #1
 80053f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80053fa:	4b21      	ldr	r3, [pc, #132]	; (8005480 <HAL_DAC_MspInit+0xcc>)
 80053fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053fe:	f003 0301 	and.w	r3, r3, #1
 8005402:	60fb      	str	r3, [r7, #12]
 8005404:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005406:	2310      	movs	r3, #16
 8005408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800540a:	2303      	movs	r3, #3
 800540c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800540e:	2300      	movs	r3, #0
 8005410:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005412:	f107 0314 	add.w	r3, r7, #20
 8005416:	4619      	mov	r1, r3
 8005418:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800541c:	f7fb fc88 	bl	8000d30 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8005420:	4b18      	ldr	r3, [pc, #96]	; (8005484 <HAL_DAC_MspInit+0xd0>)
 8005422:	4a19      	ldr	r2, [pc, #100]	; (8005488 <HAL_DAC_MspInit+0xd4>)
 8005424:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8005426:	4b17      	ldr	r3, [pc, #92]	; (8005484 <HAL_DAC_MspInit+0xd0>)
 8005428:	2206      	movs	r2, #6
 800542a:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800542c:	4b15      	ldr	r3, [pc, #84]	; (8005484 <HAL_DAC_MspInit+0xd0>)
 800542e:	2210      	movs	r2, #16
 8005430:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005432:	4b14      	ldr	r3, [pc, #80]	; (8005484 <HAL_DAC_MspInit+0xd0>)
 8005434:	2200      	movs	r2, #0
 8005436:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8005438:	4b12      	ldr	r3, [pc, #72]	; (8005484 <HAL_DAC_MspInit+0xd0>)
 800543a:	2280      	movs	r2, #128	; 0x80
 800543c:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800543e:	4b11      	ldr	r3, [pc, #68]	; (8005484 <HAL_DAC_MspInit+0xd0>)
 8005440:	2200      	movs	r2, #0
 8005442:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005444:	4b0f      	ldr	r3, [pc, #60]	; (8005484 <HAL_DAC_MspInit+0xd0>)
 8005446:	2200      	movs	r2, #0
 8005448:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_NORMAL;
 800544a:	4b0e      	ldr	r3, [pc, #56]	; (8005484 <HAL_DAC_MspInit+0xd0>)
 800544c:	2200      	movs	r2, #0
 800544e:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8005450:	4b0c      	ldr	r3, [pc, #48]	; (8005484 <HAL_DAC_MspInit+0xd0>)
 8005452:	2200      	movs	r2, #0
 8005454:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8005456:	480b      	ldr	r0, [pc, #44]	; (8005484 <HAL_DAC_MspInit+0xd0>)
 8005458:	f7fb fb02 	bl	8000a60 <HAL_DMA_Init>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d001      	beq.n	8005466 <HAL_DAC_MspInit+0xb2>
    {
      Error_Handler();
 8005462:	f7ff fdbb 	bl	8004fdc <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a06      	ldr	r2, [pc, #24]	; (8005484 <HAL_DAC_MspInit+0xd0>)
 800546a:	609a      	str	r2, [r3, #8]
 800546c:	4a05      	ldr	r2, [pc, #20]	; (8005484 <HAL_DAC_MspInit+0xd0>)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8005472:	bf00      	nop
 8005474:	3728      	adds	r7, #40	; 0x28
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	40007400 	.word	0x40007400
 8005480:	40021000 	.word	0x40021000
 8005484:	2000013c 	.word	0x2000013c
 8005488:	40020030 	.word	0x40020030

0800548c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b08a      	sub	sp, #40	; 0x28
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005494:	f107 0314 	add.w	r3, r7, #20
 8005498:	2200      	movs	r2, #0
 800549a:	601a      	str	r2, [r3, #0]
 800549c:	605a      	str	r2, [r3, #4]
 800549e:	609a      	str	r2, [r3, #8]
 80054a0:	60da      	str	r2, [r3, #12]
 80054a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a17      	ldr	r2, [pc, #92]	; (8005508 <HAL_I2C_MspInit+0x7c>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d128      	bne.n	8005500 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054ae:	4b17      	ldr	r3, [pc, #92]	; (800550c <HAL_I2C_MspInit+0x80>)
 80054b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054b2:	4a16      	ldr	r2, [pc, #88]	; (800550c <HAL_I2C_MspInit+0x80>)
 80054b4:	f043 0302 	orr.w	r3, r3, #2
 80054b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80054ba:	4b14      	ldr	r3, [pc, #80]	; (800550c <HAL_I2C_MspInit+0x80>)
 80054bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054be:	f003 0302 	and.w	r3, r3, #2
 80054c2:	613b      	str	r3, [r7, #16]
 80054c4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80054c6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80054ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80054cc:	2312      	movs	r3, #18
 80054ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80054d0:	2301      	movs	r3, #1
 80054d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054d4:	2303      	movs	r3, #3
 80054d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80054d8:	2304      	movs	r3, #4
 80054da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054dc:	f107 0314 	add.w	r3, r7, #20
 80054e0:	4619      	mov	r1, r3
 80054e2:	480b      	ldr	r0, [pc, #44]	; (8005510 <HAL_I2C_MspInit+0x84>)
 80054e4:	f7fb fc24 	bl	8000d30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80054e8:	4b08      	ldr	r3, [pc, #32]	; (800550c <HAL_I2C_MspInit+0x80>)
 80054ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ec:	4a07      	ldr	r2, [pc, #28]	; (800550c <HAL_I2C_MspInit+0x80>)
 80054ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80054f2:	6593      	str	r3, [r2, #88]	; 0x58
 80054f4:	4b05      	ldr	r3, [pc, #20]	; (800550c <HAL_I2C_MspInit+0x80>)
 80054f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054fc:	60fb      	str	r3, [r7, #12]
 80054fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8005500:	bf00      	nop
 8005502:	3728      	adds	r7, #40	; 0x28
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	40005800 	.word	0x40005800
 800550c:	40021000 	.word	0x40021000
 8005510:	48000400 	.word	0x48000400

08005514 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a0b      	ldr	r2, [pc, #44]	; (8005550 <HAL_I2C_MspDeInit+0x3c>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d10f      	bne.n	8005546 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8005526:	4b0b      	ldr	r3, [pc, #44]	; (8005554 <HAL_I2C_MspDeInit+0x40>)
 8005528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800552a:	4a0a      	ldr	r2, [pc, #40]	; (8005554 <HAL_I2C_MspDeInit+0x40>)
 800552c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005530:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8005532:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005536:	4808      	ldr	r0, [pc, #32]	; (8005558 <HAL_I2C_MspDeInit+0x44>)
 8005538:	f7fb fda2 	bl	8001080 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 800553c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005540:	4805      	ldr	r0, [pc, #20]	; (8005558 <HAL_I2C_MspDeInit+0x44>)
 8005542:	f7fb fd9d 	bl	8001080 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8005546:	bf00      	nop
 8005548:	3708      	adds	r7, #8
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	40005800 	.word	0x40005800
 8005554:	40021000 	.word	0x40021000
 8005558:	48000400 	.word	0x48000400

0800555c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b08a      	sub	sp, #40	; 0x28
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005564:	f107 0314 	add.w	r3, r7, #20
 8005568:	2200      	movs	r2, #0
 800556a:	601a      	str	r2, [r3, #0]
 800556c:	605a      	str	r2, [r3, #4]
 800556e:	609a      	str	r2, [r3, #8]
 8005570:	60da      	str	r2, [r3, #12]
 8005572:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a17      	ldr	r2, [pc, #92]	; (80055d8 <HAL_QSPI_MspInit+0x7c>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d128      	bne.n	80055d0 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800557e:	4b17      	ldr	r3, [pc, #92]	; (80055dc <HAL_QSPI_MspInit+0x80>)
 8005580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005582:	4a16      	ldr	r2, [pc, #88]	; (80055dc <HAL_QSPI_MspInit+0x80>)
 8005584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005588:	6513      	str	r3, [r2, #80]	; 0x50
 800558a:	4b14      	ldr	r3, [pc, #80]	; (80055dc <HAL_QSPI_MspInit+0x80>)
 800558c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800558e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005592:	613b      	str	r3, [r7, #16]
 8005594:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005596:	4b11      	ldr	r3, [pc, #68]	; (80055dc <HAL_QSPI_MspInit+0x80>)
 8005598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800559a:	4a10      	ldr	r2, [pc, #64]	; (80055dc <HAL_QSPI_MspInit+0x80>)
 800559c:	f043 0310 	orr.w	r3, r3, #16
 80055a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80055a2:	4b0e      	ldr	r3, [pc, #56]	; (80055dc <HAL_QSPI_MspInit+0x80>)
 80055a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055a6:	f003 0310 	and.w	r3, r3, #16
 80055aa:	60fb      	str	r3, [r7, #12]
 80055ac:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80055ae:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80055b2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055b4:	2302      	movs	r3, #2
 80055b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055b8:	2300      	movs	r3, #0
 80055ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055bc:	2303      	movs	r3, #3
 80055be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80055c0:	230a      	movs	r3, #10
 80055c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80055c4:	f107 0314 	add.w	r3, r7, #20
 80055c8:	4619      	mov	r1, r3
 80055ca:	4805      	ldr	r0, [pc, #20]	; (80055e0 <HAL_QSPI_MspInit+0x84>)
 80055cc:	f7fb fbb0 	bl	8000d30 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80055d0:	bf00      	nop
 80055d2:	3728      	adds	r7, #40	; 0x28
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	a0001000 	.word	0xa0001000
 80055dc:	40021000 	.word	0x40021000
 80055e0:	48001000 	.word	0x48001000

080055e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055f4:	d113      	bne.n	800561e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80055f6:	4b0c      	ldr	r3, [pc, #48]	; (8005628 <HAL_TIM_Base_MspInit+0x44>)
 80055f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055fa:	4a0b      	ldr	r2, [pc, #44]	; (8005628 <HAL_TIM_Base_MspInit+0x44>)
 80055fc:	f043 0301 	orr.w	r3, r3, #1
 8005600:	6593      	str	r3, [r2, #88]	; 0x58
 8005602:	4b09      	ldr	r3, [pc, #36]	; (8005628 <HAL_TIM_Base_MspInit+0x44>)
 8005604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005606:	f003 0301 	and.w	r3, r3, #1
 800560a:	60fb      	str	r3, [r7, #12]
 800560c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800560e:	2200      	movs	r2, #0
 8005610:	2100      	movs	r1, #0
 8005612:	201c      	movs	r0, #28
 8005614:	f7fb f8be 	bl	8000794 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005618:	201c      	movs	r0, #28
 800561a:	f7fb f8d7 	bl	80007cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800561e:	bf00      	nop
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	40021000 	.word	0x40021000

0800562c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b08a      	sub	sp, #40	; 0x28
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005634:	f107 0314 	add.w	r3, r7, #20
 8005638:	2200      	movs	r2, #0
 800563a:	601a      	str	r2, [r3, #0]
 800563c:	605a      	str	r2, [r3, #4]
 800563e:	609a      	str	r2, [r3, #8]
 8005640:	60da      	str	r2, [r3, #12]
 8005642:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a17      	ldr	r2, [pc, #92]	; (80056a8 <HAL_UART_MspInit+0x7c>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d127      	bne.n	800569e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800564e:	4b17      	ldr	r3, [pc, #92]	; (80056ac <HAL_UART_MspInit+0x80>)
 8005650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005652:	4a16      	ldr	r2, [pc, #88]	; (80056ac <HAL_UART_MspInit+0x80>)
 8005654:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005658:	6613      	str	r3, [r2, #96]	; 0x60
 800565a:	4b14      	ldr	r3, [pc, #80]	; (80056ac <HAL_UART_MspInit+0x80>)
 800565c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800565e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005662:	613b      	str	r3, [r7, #16]
 8005664:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005666:	4b11      	ldr	r3, [pc, #68]	; (80056ac <HAL_UART_MspInit+0x80>)
 8005668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800566a:	4a10      	ldr	r2, [pc, #64]	; (80056ac <HAL_UART_MspInit+0x80>)
 800566c:	f043 0302 	orr.w	r3, r3, #2
 8005670:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005672:	4b0e      	ldr	r3, [pc, #56]	; (80056ac <HAL_UART_MspInit+0x80>)
 8005674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005676:	f003 0302 	and.w	r3, r3, #2
 800567a:	60fb      	str	r3, [r7, #12]
 800567c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800567e:	23c0      	movs	r3, #192	; 0xc0
 8005680:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005682:	2302      	movs	r3, #2
 8005684:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005686:	2300      	movs	r3, #0
 8005688:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800568a:	2303      	movs	r3, #3
 800568c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800568e:	2307      	movs	r3, #7
 8005690:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005692:	f107 0314 	add.w	r3, r7, #20
 8005696:	4619      	mov	r1, r3
 8005698:	4805      	ldr	r0, [pc, #20]	; (80056b0 <HAL_UART_MspInit+0x84>)
 800569a:	f7fb fb49 	bl	8000d30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800569e:	bf00      	nop
 80056a0:	3728      	adds	r7, #40	; 0x28
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	40013800 	.word	0x40013800
 80056ac:	40021000 	.word	0x40021000
 80056b0:	48000400 	.word	0x48000400

080056b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b08c      	sub	sp, #48	; 0x30
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80056bc:	2300      	movs	r3, #0
 80056be:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80056c0:	2300      	movs	r3, #0
 80056c2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80056c4:	2200      	movs	r2, #0
 80056c6:	6879      	ldr	r1, [r7, #4]
 80056c8:	2036      	movs	r0, #54	; 0x36
 80056ca:	f7fb f863 	bl	8000794 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80056ce:	2036      	movs	r0, #54	; 0x36
 80056d0:	f7fb f87c 	bl	80007cc <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80056d4:	4b1e      	ldr	r3, [pc, #120]	; (8005750 <HAL_InitTick+0x9c>)
 80056d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d8:	4a1d      	ldr	r2, [pc, #116]	; (8005750 <HAL_InitTick+0x9c>)
 80056da:	f043 0310 	orr.w	r3, r3, #16
 80056de:	6593      	str	r3, [r2, #88]	; 0x58
 80056e0:	4b1b      	ldr	r3, [pc, #108]	; (8005750 <HAL_InitTick+0x9c>)
 80056e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056e4:	f003 0310 	and.w	r3, r3, #16
 80056e8:	60fb      	str	r3, [r7, #12]
 80056ea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80056ec:	f107 0210 	add.w	r2, r7, #16
 80056f0:	f107 0314 	add.w	r3, r7, #20
 80056f4:	4611      	mov	r1, r2
 80056f6:	4618      	mov	r0, r3
 80056f8:	f7fd fa18 	bl	8002b2c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80056fc:	f7fd f9ea 	bl	8002ad4 <HAL_RCC_GetPCLK1Freq>
 8005700:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8005702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005704:	4a13      	ldr	r2, [pc, #76]	; (8005754 <HAL_InitTick+0xa0>)
 8005706:	fba2 2303 	umull	r2, r3, r2, r3
 800570a:	0c9b      	lsrs	r3, r3, #18
 800570c:	3b01      	subs	r3, #1
 800570e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8005710:	4b11      	ldr	r3, [pc, #68]	; (8005758 <HAL_InitTick+0xa4>)
 8005712:	4a12      	ldr	r2, [pc, #72]	; (800575c <HAL_InitTick+0xa8>)
 8005714:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8005716:	4b10      	ldr	r3, [pc, #64]	; (8005758 <HAL_InitTick+0xa4>)
 8005718:	f240 32e7 	movw	r2, #999	; 0x3e7
 800571c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800571e:	4a0e      	ldr	r2, [pc, #56]	; (8005758 <HAL_InitTick+0xa4>)
 8005720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005722:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8005724:	4b0c      	ldr	r3, [pc, #48]	; (8005758 <HAL_InitTick+0xa4>)
 8005726:	2200      	movs	r2, #0
 8005728:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800572a:	4b0b      	ldr	r3, [pc, #44]	; (8005758 <HAL_InitTick+0xa4>)
 800572c:	2200      	movs	r2, #0
 800572e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8005730:	4809      	ldr	r0, [pc, #36]	; (8005758 <HAL_InitTick+0xa4>)
 8005732:	f7fd ff3d 	bl	80035b0 <HAL_TIM_Base_Init>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d104      	bne.n	8005746 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800573c:	4806      	ldr	r0, [pc, #24]	; (8005758 <HAL_InitTick+0xa4>)
 800573e:	f7fd ff8f 	bl	8003660 <HAL_TIM_Base_Start_IT>
 8005742:	4603      	mov	r3, r0
 8005744:	e000      	b.n	8005748 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
}
 8005748:	4618      	mov	r0, r3
 800574a:	3730      	adds	r7, #48	; 0x30
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	40021000 	.word	0x40021000
 8005754:	431bde83 	.word	0x431bde83
 8005758:	200003d0 	.word	0x200003d0
 800575c:	40001000 	.word	0x40001000

08005760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005760:	b480      	push	{r7}
 8005762:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005764:	bf00      	nop
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr

0800576e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800576e:	b480      	push	{r7}
 8005770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005772:	e7fe      	b.n	8005772 <HardFault_Handler+0x4>

08005774 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005774:	b480      	push	{r7}
 8005776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005778:	e7fe      	b.n	8005778 <MemManage_Handler+0x4>

0800577a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800577a:	b480      	push	{r7}
 800577c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800577e:	e7fe      	b.n	800577e <BusFault_Handler+0x4>

08005780 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005780:	b480      	push	{r7}
 8005782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005784:	e7fe      	b.n	8005784 <UsageFault_Handler+0x4>

08005786 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005786:	b480      	push	{r7}
 8005788:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800578a:	bf00      	nop
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005794:	b480      	push	{r7}
 8005796:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005798:	bf00      	nop
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr

080057a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80057a2:	b480      	push	{r7}
 80057a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80057a6:	bf00      	nop
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80057b4:	f7fa fef4 	bl	80005a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80057b8:	bf00      	nop
 80057ba:	bd80      	pop	{r7, pc}

080057bc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 80057c0:	4802      	ldr	r0, [pc, #8]	; (80057cc <DMA1_Channel3_IRQHandler+0x10>)
 80057c2:	f7fb fa05 	bl	8000bd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80057c6:	bf00      	nop
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	2000013c 	.word	0x2000013c

080057d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80057d4:	4802      	ldr	r0, [pc, #8]	; (80057e0 <TIM2_IRQHandler+0x10>)
 80057d6:	f7fd ffb3 	bl	8003740 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80057da:	bf00      	nop
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	2000026c 	.word	0x2000026c

080057e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b086      	sub	sp, #24
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80057ec:	4a14      	ldr	r2, [pc, #80]	; (8005840 <_sbrk+0x5c>)
 80057ee:	4b15      	ldr	r3, [pc, #84]	; (8005844 <_sbrk+0x60>)
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80057f8:	4b13      	ldr	r3, [pc, #76]	; (8005848 <_sbrk+0x64>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d102      	bne.n	8005806 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005800:	4b11      	ldr	r3, [pc, #68]	; (8005848 <_sbrk+0x64>)
 8005802:	4a12      	ldr	r2, [pc, #72]	; (800584c <_sbrk+0x68>)
 8005804:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005806:	4b10      	ldr	r3, [pc, #64]	; (8005848 <_sbrk+0x64>)
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4413      	add	r3, r2
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	429a      	cmp	r2, r3
 8005812:	d207      	bcs.n	8005824 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005814:	f000 f87c 	bl	8005910 <__errno>
 8005818:	4602      	mov	r2, r0
 800581a:	230c      	movs	r3, #12
 800581c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800581e:	f04f 33ff 	mov.w	r3, #4294967295
 8005822:	e009      	b.n	8005838 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005824:	4b08      	ldr	r3, [pc, #32]	; (8005848 <_sbrk+0x64>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800582a:	4b07      	ldr	r3, [pc, #28]	; (8005848 <_sbrk+0x64>)
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4413      	add	r3, r2
 8005832:	4a05      	ldr	r2, [pc, #20]	; (8005848 <_sbrk+0x64>)
 8005834:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005836:	68fb      	ldr	r3, [r7, #12]
}
 8005838:	4618      	mov	r0, r3
 800583a:	3718      	adds	r7, #24
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	20018000 	.word	0x20018000
 8005844:	00000400 	.word	0x00000400
 8005848:	200000c4 	.word	0x200000c4
 800584c:	20000420 	.word	0x20000420

08005850 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005850:	b480      	push	{r7}
 8005852:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005854:	4b17      	ldr	r3, [pc, #92]	; (80058b4 <SystemInit+0x64>)
 8005856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800585a:	4a16      	ldr	r2, [pc, #88]	; (80058b4 <SystemInit+0x64>)
 800585c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005860:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005864:	4b14      	ldr	r3, [pc, #80]	; (80058b8 <SystemInit+0x68>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a13      	ldr	r2, [pc, #76]	; (80058b8 <SystemInit+0x68>)
 800586a:	f043 0301 	orr.w	r3, r3, #1
 800586e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8005870:	4b11      	ldr	r3, [pc, #68]	; (80058b8 <SystemInit+0x68>)
 8005872:	2200      	movs	r2, #0
 8005874:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8005876:	4b10      	ldr	r3, [pc, #64]	; (80058b8 <SystemInit+0x68>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a0f      	ldr	r2, [pc, #60]	; (80058b8 <SystemInit+0x68>)
 800587c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8005880:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8005884:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8005886:	4b0c      	ldr	r3, [pc, #48]	; (80058b8 <SystemInit+0x68>)
 8005888:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800588c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800588e:	4b0a      	ldr	r3, [pc, #40]	; (80058b8 <SystemInit+0x68>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a09      	ldr	r2, [pc, #36]	; (80058b8 <SystemInit+0x68>)
 8005894:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005898:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800589a:	4b07      	ldr	r3, [pc, #28]	; (80058b8 <SystemInit+0x68>)
 800589c:	2200      	movs	r2, #0
 800589e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80058a0:	4b04      	ldr	r3, [pc, #16]	; (80058b4 <SystemInit+0x64>)
 80058a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80058a6:	609a      	str	r2, [r3, #8]
#endif
}
 80058a8:	bf00      	nop
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	e000ed00 	.word	0xe000ed00
 80058b8:	40021000 	.word	0x40021000

080058bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80058bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80058f4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80058c0:	f7ff ffc6 	bl	8005850 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80058c4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80058c6:	e003      	b.n	80058d0 <LoopCopyDataInit>

080058c8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80058c8:	4b0b      	ldr	r3, [pc, #44]	; (80058f8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80058ca:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80058cc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80058ce:	3104      	adds	r1, #4

080058d0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80058d0:	480a      	ldr	r0, [pc, #40]	; (80058fc <LoopForever+0xa>)
	ldr	r3, =_edata
 80058d2:	4b0b      	ldr	r3, [pc, #44]	; (8005900 <LoopForever+0xe>)
	adds	r2, r0, r1
 80058d4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80058d6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80058d8:	d3f6      	bcc.n	80058c8 <CopyDataInit>
	ldr	r2, =_sbss
 80058da:	4a0a      	ldr	r2, [pc, #40]	; (8005904 <LoopForever+0x12>)
	b	LoopFillZerobss
 80058dc:	e002      	b.n	80058e4 <LoopFillZerobss>

080058de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80058de:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80058e0:	f842 3b04 	str.w	r3, [r2], #4

080058e4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80058e4:	4b08      	ldr	r3, [pc, #32]	; (8005908 <LoopForever+0x16>)
	cmp	r2, r3
 80058e6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80058e8:	d3f9      	bcc.n	80058de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80058ea:	f000 f817 	bl	800591c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80058ee:	f7ff f8f3 	bl	8004ad8 <main>

080058f2 <LoopForever>:

LoopForever:
    b LoopForever
 80058f2:	e7fe      	b.n	80058f2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80058f4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80058f8:	08006244 	.word	0x08006244
	ldr	r0, =_sdata
 80058fc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005900:	200000a4 	.word	0x200000a4
	ldr	r2, =_sbss
 8005904:	200000a4 	.word	0x200000a4
	ldr	r3, = _ebss
 8005908:	20000420 	.word	0x20000420

0800590c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800590c:	e7fe      	b.n	800590c <ADC1_2_IRQHandler>
	...

08005910 <__errno>:
 8005910:	4b01      	ldr	r3, [pc, #4]	; (8005918 <__errno+0x8>)
 8005912:	6818      	ldr	r0, [r3, #0]
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	20000040 	.word	0x20000040

0800591c <__libc_init_array>:
 800591c:	b570      	push	{r4, r5, r6, lr}
 800591e:	4e0d      	ldr	r6, [pc, #52]	; (8005954 <__libc_init_array+0x38>)
 8005920:	4c0d      	ldr	r4, [pc, #52]	; (8005958 <__libc_init_array+0x3c>)
 8005922:	1ba4      	subs	r4, r4, r6
 8005924:	10a4      	asrs	r4, r4, #2
 8005926:	2500      	movs	r5, #0
 8005928:	42a5      	cmp	r5, r4
 800592a:	d109      	bne.n	8005940 <__libc_init_array+0x24>
 800592c:	4e0b      	ldr	r6, [pc, #44]	; (800595c <__libc_init_array+0x40>)
 800592e:	4c0c      	ldr	r4, [pc, #48]	; (8005960 <__libc_init_array+0x44>)
 8005930:	f000 fc26 	bl	8006180 <_init>
 8005934:	1ba4      	subs	r4, r4, r6
 8005936:	10a4      	asrs	r4, r4, #2
 8005938:	2500      	movs	r5, #0
 800593a:	42a5      	cmp	r5, r4
 800593c:	d105      	bne.n	800594a <__libc_init_array+0x2e>
 800593e:	bd70      	pop	{r4, r5, r6, pc}
 8005940:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005944:	4798      	blx	r3
 8005946:	3501      	adds	r5, #1
 8005948:	e7ee      	b.n	8005928 <__libc_init_array+0xc>
 800594a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800594e:	4798      	blx	r3
 8005950:	3501      	adds	r5, #1
 8005952:	e7f2      	b.n	800593a <__libc_init_array+0x1e>
 8005954:	0800623c 	.word	0x0800623c
 8005958:	0800623c 	.word	0x0800623c
 800595c:	0800623c 	.word	0x0800623c
 8005960:	08006240 	.word	0x08006240

08005964 <memset>:
 8005964:	4402      	add	r2, r0
 8005966:	4603      	mov	r3, r0
 8005968:	4293      	cmp	r3, r2
 800596a:	d100      	bne.n	800596e <memset+0xa>
 800596c:	4770      	bx	lr
 800596e:	f803 1b01 	strb.w	r1, [r3], #1
 8005972:	e7f9      	b.n	8005968 <memset+0x4>

08005974 <siprintf>:
 8005974:	b40e      	push	{r1, r2, r3}
 8005976:	b500      	push	{lr}
 8005978:	b09c      	sub	sp, #112	; 0x70
 800597a:	ab1d      	add	r3, sp, #116	; 0x74
 800597c:	9002      	str	r0, [sp, #8]
 800597e:	9006      	str	r0, [sp, #24]
 8005980:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005984:	4809      	ldr	r0, [pc, #36]	; (80059ac <siprintf+0x38>)
 8005986:	9107      	str	r1, [sp, #28]
 8005988:	9104      	str	r1, [sp, #16]
 800598a:	4909      	ldr	r1, [pc, #36]	; (80059b0 <siprintf+0x3c>)
 800598c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005990:	9105      	str	r1, [sp, #20]
 8005992:	6800      	ldr	r0, [r0, #0]
 8005994:	9301      	str	r3, [sp, #4]
 8005996:	a902      	add	r1, sp, #8
 8005998:	f000 f866 	bl	8005a68 <_svfiprintf_r>
 800599c:	9b02      	ldr	r3, [sp, #8]
 800599e:	2200      	movs	r2, #0
 80059a0:	701a      	strb	r2, [r3, #0]
 80059a2:	b01c      	add	sp, #112	; 0x70
 80059a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80059a8:	b003      	add	sp, #12
 80059aa:	4770      	bx	lr
 80059ac:	20000040 	.word	0x20000040
 80059b0:	ffff0208 	.word	0xffff0208

080059b4 <__ssputs_r>:
 80059b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059b8:	688e      	ldr	r6, [r1, #8]
 80059ba:	429e      	cmp	r6, r3
 80059bc:	4682      	mov	sl, r0
 80059be:	460c      	mov	r4, r1
 80059c0:	4690      	mov	r8, r2
 80059c2:	4699      	mov	r9, r3
 80059c4:	d837      	bhi.n	8005a36 <__ssputs_r+0x82>
 80059c6:	898a      	ldrh	r2, [r1, #12]
 80059c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80059cc:	d031      	beq.n	8005a32 <__ssputs_r+0x7e>
 80059ce:	6825      	ldr	r5, [r4, #0]
 80059d0:	6909      	ldr	r1, [r1, #16]
 80059d2:	1a6f      	subs	r7, r5, r1
 80059d4:	6965      	ldr	r5, [r4, #20]
 80059d6:	2302      	movs	r3, #2
 80059d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80059dc:	fb95 f5f3 	sdiv	r5, r5, r3
 80059e0:	f109 0301 	add.w	r3, r9, #1
 80059e4:	443b      	add	r3, r7
 80059e6:	429d      	cmp	r5, r3
 80059e8:	bf38      	it	cc
 80059ea:	461d      	movcc	r5, r3
 80059ec:	0553      	lsls	r3, r2, #21
 80059ee:	d530      	bpl.n	8005a52 <__ssputs_r+0x9e>
 80059f0:	4629      	mov	r1, r5
 80059f2:	f000 fb2b 	bl	800604c <_malloc_r>
 80059f6:	4606      	mov	r6, r0
 80059f8:	b950      	cbnz	r0, 8005a10 <__ssputs_r+0x5c>
 80059fa:	230c      	movs	r3, #12
 80059fc:	f8ca 3000 	str.w	r3, [sl]
 8005a00:	89a3      	ldrh	r3, [r4, #12]
 8005a02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a06:	81a3      	strh	r3, [r4, #12]
 8005a08:	f04f 30ff 	mov.w	r0, #4294967295
 8005a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a10:	463a      	mov	r2, r7
 8005a12:	6921      	ldr	r1, [r4, #16]
 8005a14:	f000 faa8 	bl	8005f68 <memcpy>
 8005a18:	89a3      	ldrh	r3, [r4, #12]
 8005a1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005a1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a22:	81a3      	strh	r3, [r4, #12]
 8005a24:	6126      	str	r6, [r4, #16]
 8005a26:	6165      	str	r5, [r4, #20]
 8005a28:	443e      	add	r6, r7
 8005a2a:	1bed      	subs	r5, r5, r7
 8005a2c:	6026      	str	r6, [r4, #0]
 8005a2e:	60a5      	str	r5, [r4, #8]
 8005a30:	464e      	mov	r6, r9
 8005a32:	454e      	cmp	r6, r9
 8005a34:	d900      	bls.n	8005a38 <__ssputs_r+0x84>
 8005a36:	464e      	mov	r6, r9
 8005a38:	4632      	mov	r2, r6
 8005a3a:	4641      	mov	r1, r8
 8005a3c:	6820      	ldr	r0, [r4, #0]
 8005a3e:	f000 fa9e 	bl	8005f7e <memmove>
 8005a42:	68a3      	ldr	r3, [r4, #8]
 8005a44:	1b9b      	subs	r3, r3, r6
 8005a46:	60a3      	str	r3, [r4, #8]
 8005a48:	6823      	ldr	r3, [r4, #0]
 8005a4a:	441e      	add	r6, r3
 8005a4c:	6026      	str	r6, [r4, #0]
 8005a4e:	2000      	movs	r0, #0
 8005a50:	e7dc      	b.n	8005a0c <__ssputs_r+0x58>
 8005a52:	462a      	mov	r2, r5
 8005a54:	f000 fb54 	bl	8006100 <_realloc_r>
 8005a58:	4606      	mov	r6, r0
 8005a5a:	2800      	cmp	r0, #0
 8005a5c:	d1e2      	bne.n	8005a24 <__ssputs_r+0x70>
 8005a5e:	6921      	ldr	r1, [r4, #16]
 8005a60:	4650      	mov	r0, sl
 8005a62:	f000 faa5 	bl	8005fb0 <_free_r>
 8005a66:	e7c8      	b.n	80059fa <__ssputs_r+0x46>

08005a68 <_svfiprintf_r>:
 8005a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a6c:	461d      	mov	r5, r3
 8005a6e:	898b      	ldrh	r3, [r1, #12]
 8005a70:	061f      	lsls	r7, r3, #24
 8005a72:	b09d      	sub	sp, #116	; 0x74
 8005a74:	4680      	mov	r8, r0
 8005a76:	460c      	mov	r4, r1
 8005a78:	4616      	mov	r6, r2
 8005a7a:	d50f      	bpl.n	8005a9c <_svfiprintf_r+0x34>
 8005a7c:	690b      	ldr	r3, [r1, #16]
 8005a7e:	b96b      	cbnz	r3, 8005a9c <_svfiprintf_r+0x34>
 8005a80:	2140      	movs	r1, #64	; 0x40
 8005a82:	f000 fae3 	bl	800604c <_malloc_r>
 8005a86:	6020      	str	r0, [r4, #0]
 8005a88:	6120      	str	r0, [r4, #16]
 8005a8a:	b928      	cbnz	r0, 8005a98 <_svfiprintf_r+0x30>
 8005a8c:	230c      	movs	r3, #12
 8005a8e:	f8c8 3000 	str.w	r3, [r8]
 8005a92:	f04f 30ff 	mov.w	r0, #4294967295
 8005a96:	e0c8      	b.n	8005c2a <_svfiprintf_r+0x1c2>
 8005a98:	2340      	movs	r3, #64	; 0x40
 8005a9a:	6163      	str	r3, [r4, #20]
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	9309      	str	r3, [sp, #36]	; 0x24
 8005aa0:	2320      	movs	r3, #32
 8005aa2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005aa6:	2330      	movs	r3, #48	; 0x30
 8005aa8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005aac:	9503      	str	r5, [sp, #12]
 8005aae:	f04f 0b01 	mov.w	fp, #1
 8005ab2:	4637      	mov	r7, r6
 8005ab4:	463d      	mov	r5, r7
 8005ab6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005aba:	b10b      	cbz	r3, 8005ac0 <_svfiprintf_r+0x58>
 8005abc:	2b25      	cmp	r3, #37	; 0x25
 8005abe:	d13e      	bne.n	8005b3e <_svfiprintf_r+0xd6>
 8005ac0:	ebb7 0a06 	subs.w	sl, r7, r6
 8005ac4:	d00b      	beq.n	8005ade <_svfiprintf_r+0x76>
 8005ac6:	4653      	mov	r3, sl
 8005ac8:	4632      	mov	r2, r6
 8005aca:	4621      	mov	r1, r4
 8005acc:	4640      	mov	r0, r8
 8005ace:	f7ff ff71 	bl	80059b4 <__ssputs_r>
 8005ad2:	3001      	adds	r0, #1
 8005ad4:	f000 80a4 	beq.w	8005c20 <_svfiprintf_r+0x1b8>
 8005ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ada:	4453      	add	r3, sl
 8005adc:	9309      	str	r3, [sp, #36]	; 0x24
 8005ade:	783b      	ldrb	r3, [r7, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f000 809d 	beq.w	8005c20 <_svfiprintf_r+0x1b8>
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8005aec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005af0:	9304      	str	r3, [sp, #16]
 8005af2:	9307      	str	r3, [sp, #28]
 8005af4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005af8:	931a      	str	r3, [sp, #104]	; 0x68
 8005afa:	462f      	mov	r7, r5
 8005afc:	2205      	movs	r2, #5
 8005afe:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005b02:	4850      	ldr	r0, [pc, #320]	; (8005c44 <_svfiprintf_r+0x1dc>)
 8005b04:	f7fa fb64 	bl	80001d0 <memchr>
 8005b08:	9b04      	ldr	r3, [sp, #16]
 8005b0a:	b9d0      	cbnz	r0, 8005b42 <_svfiprintf_r+0xda>
 8005b0c:	06d9      	lsls	r1, r3, #27
 8005b0e:	bf44      	itt	mi
 8005b10:	2220      	movmi	r2, #32
 8005b12:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005b16:	071a      	lsls	r2, r3, #28
 8005b18:	bf44      	itt	mi
 8005b1a:	222b      	movmi	r2, #43	; 0x2b
 8005b1c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005b20:	782a      	ldrb	r2, [r5, #0]
 8005b22:	2a2a      	cmp	r2, #42	; 0x2a
 8005b24:	d015      	beq.n	8005b52 <_svfiprintf_r+0xea>
 8005b26:	9a07      	ldr	r2, [sp, #28]
 8005b28:	462f      	mov	r7, r5
 8005b2a:	2000      	movs	r0, #0
 8005b2c:	250a      	movs	r5, #10
 8005b2e:	4639      	mov	r1, r7
 8005b30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b34:	3b30      	subs	r3, #48	; 0x30
 8005b36:	2b09      	cmp	r3, #9
 8005b38:	d94d      	bls.n	8005bd6 <_svfiprintf_r+0x16e>
 8005b3a:	b1b8      	cbz	r0, 8005b6c <_svfiprintf_r+0x104>
 8005b3c:	e00f      	b.n	8005b5e <_svfiprintf_r+0xf6>
 8005b3e:	462f      	mov	r7, r5
 8005b40:	e7b8      	b.n	8005ab4 <_svfiprintf_r+0x4c>
 8005b42:	4a40      	ldr	r2, [pc, #256]	; (8005c44 <_svfiprintf_r+0x1dc>)
 8005b44:	1a80      	subs	r0, r0, r2
 8005b46:	fa0b f000 	lsl.w	r0, fp, r0
 8005b4a:	4318      	orrs	r0, r3
 8005b4c:	9004      	str	r0, [sp, #16]
 8005b4e:	463d      	mov	r5, r7
 8005b50:	e7d3      	b.n	8005afa <_svfiprintf_r+0x92>
 8005b52:	9a03      	ldr	r2, [sp, #12]
 8005b54:	1d11      	adds	r1, r2, #4
 8005b56:	6812      	ldr	r2, [r2, #0]
 8005b58:	9103      	str	r1, [sp, #12]
 8005b5a:	2a00      	cmp	r2, #0
 8005b5c:	db01      	blt.n	8005b62 <_svfiprintf_r+0xfa>
 8005b5e:	9207      	str	r2, [sp, #28]
 8005b60:	e004      	b.n	8005b6c <_svfiprintf_r+0x104>
 8005b62:	4252      	negs	r2, r2
 8005b64:	f043 0302 	orr.w	r3, r3, #2
 8005b68:	9207      	str	r2, [sp, #28]
 8005b6a:	9304      	str	r3, [sp, #16]
 8005b6c:	783b      	ldrb	r3, [r7, #0]
 8005b6e:	2b2e      	cmp	r3, #46	; 0x2e
 8005b70:	d10c      	bne.n	8005b8c <_svfiprintf_r+0x124>
 8005b72:	787b      	ldrb	r3, [r7, #1]
 8005b74:	2b2a      	cmp	r3, #42	; 0x2a
 8005b76:	d133      	bne.n	8005be0 <_svfiprintf_r+0x178>
 8005b78:	9b03      	ldr	r3, [sp, #12]
 8005b7a:	1d1a      	adds	r2, r3, #4
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	9203      	str	r2, [sp, #12]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	bfb8      	it	lt
 8005b84:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b88:	3702      	adds	r7, #2
 8005b8a:	9305      	str	r3, [sp, #20]
 8005b8c:	4d2e      	ldr	r5, [pc, #184]	; (8005c48 <_svfiprintf_r+0x1e0>)
 8005b8e:	7839      	ldrb	r1, [r7, #0]
 8005b90:	2203      	movs	r2, #3
 8005b92:	4628      	mov	r0, r5
 8005b94:	f7fa fb1c 	bl	80001d0 <memchr>
 8005b98:	b138      	cbz	r0, 8005baa <_svfiprintf_r+0x142>
 8005b9a:	2340      	movs	r3, #64	; 0x40
 8005b9c:	1b40      	subs	r0, r0, r5
 8005b9e:	fa03 f000 	lsl.w	r0, r3, r0
 8005ba2:	9b04      	ldr	r3, [sp, #16]
 8005ba4:	4303      	orrs	r3, r0
 8005ba6:	3701      	adds	r7, #1
 8005ba8:	9304      	str	r3, [sp, #16]
 8005baa:	7839      	ldrb	r1, [r7, #0]
 8005bac:	4827      	ldr	r0, [pc, #156]	; (8005c4c <_svfiprintf_r+0x1e4>)
 8005bae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005bb2:	2206      	movs	r2, #6
 8005bb4:	1c7e      	adds	r6, r7, #1
 8005bb6:	f7fa fb0b 	bl	80001d0 <memchr>
 8005bba:	2800      	cmp	r0, #0
 8005bbc:	d038      	beq.n	8005c30 <_svfiprintf_r+0x1c8>
 8005bbe:	4b24      	ldr	r3, [pc, #144]	; (8005c50 <_svfiprintf_r+0x1e8>)
 8005bc0:	bb13      	cbnz	r3, 8005c08 <_svfiprintf_r+0x1a0>
 8005bc2:	9b03      	ldr	r3, [sp, #12]
 8005bc4:	3307      	adds	r3, #7
 8005bc6:	f023 0307 	bic.w	r3, r3, #7
 8005bca:	3308      	adds	r3, #8
 8005bcc:	9303      	str	r3, [sp, #12]
 8005bce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bd0:	444b      	add	r3, r9
 8005bd2:	9309      	str	r3, [sp, #36]	; 0x24
 8005bd4:	e76d      	b.n	8005ab2 <_svfiprintf_r+0x4a>
 8005bd6:	fb05 3202 	mla	r2, r5, r2, r3
 8005bda:	2001      	movs	r0, #1
 8005bdc:	460f      	mov	r7, r1
 8005bde:	e7a6      	b.n	8005b2e <_svfiprintf_r+0xc6>
 8005be0:	2300      	movs	r3, #0
 8005be2:	3701      	adds	r7, #1
 8005be4:	9305      	str	r3, [sp, #20]
 8005be6:	4619      	mov	r1, r3
 8005be8:	250a      	movs	r5, #10
 8005bea:	4638      	mov	r0, r7
 8005bec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005bf0:	3a30      	subs	r2, #48	; 0x30
 8005bf2:	2a09      	cmp	r2, #9
 8005bf4:	d903      	bls.n	8005bfe <_svfiprintf_r+0x196>
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d0c8      	beq.n	8005b8c <_svfiprintf_r+0x124>
 8005bfa:	9105      	str	r1, [sp, #20]
 8005bfc:	e7c6      	b.n	8005b8c <_svfiprintf_r+0x124>
 8005bfe:	fb05 2101 	mla	r1, r5, r1, r2
 8005c02:	2301      	movs	r3, #1
 8005c04:	4607      	mov	r7, r0
 8005c06:	e7f0      	b.n	8005bea <_svfiprintf_r+0x182>
 8005c08:	ab03      	add	r3, sp, #12
 8005c0a:	9300      	str	r3, [sp, #0]
 8005c0c:	4622      	mov	r2, r4
 8005c0e:	4b11      	ldr	r3, [pc, #68]	; (8005c54 <_svfiprintf_r+0x1ec>)
 8005c10:	a904      	add	r1, sp, #16
 8005c12:	4640      	mov	r0, r8
 8005c14:	f3af 8000 	nop.w
 8005c18:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005c1c:	4681      	mov	r9, r0
 8005c1e:	d1d6      	bne.n	8005bce <_svfiprintf_r+0x166>
 8005c20:	89a3      	ldrh	r3, [r4, #12]
 8005c22:	065b      	lsls	r3, r3, #25
 8005c24:	f53f af35 	bmi.w	8005a92 <_svfiprintf_r+0x2a>
 8005c28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c2a:	b01d      	add	sp, #116	; 0x74
 8005c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c30:	ab03      	add	r3, sp, #12
 8005c32:	9300      	str	r3, [sp, #0]
 8005c34:	4622      	mov	r2, r4
 8005c36:	4b07      	ldr	r3, [pc, #28]	; (8005c54 <_svfiprintf_r+0x1ec>)
 8005c38:	a904      	add	r1, sp, #16
 8005c3a:	4640      	mov	r0, r8
 8005c3c:	f000 f882 	bl	8005d44 <_printf_i>
 8005c40:	e7ea      	b.n	8005c18 <_svfiprintf_r+0x1b0>
 8005c42:	bf00      	nop
 8005c44:	08006200 	.word	0x08006200
 8005c48:	08006206 	.word	0x08006206
 8005c4c:	0800620a 	.word	0x0800620a
 8005c50:	00000000 	.word	0x00000000
 8005c54:	080059b5 	.word	0x080059b5

08005c58 <_printf_common>:
 8005c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c5c:	4691      	mov	r9, r2
 8005c5e:	461f      	mov	r7, r3
 8005c60:	688a      	ldr	r2, [r1, #8]
 8005c62:	690b      	ldr	r3, [r1, #16]
 8005c64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	bfb8      	it	lt
 8005c6c:	4613      	movlt	r3, r2
 8005c6e:	f8c9 3000 	str.w	r3, [r9]
 8005c72:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c76:	4606      	mov	r6, r0
 8005c78:	460c      	mov	r4, r1
 8005c7a:	b112      	cbz	r2, 8005c82 <_printf_common+0x2a>
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	f8c9 3000 	str.w	r3, [r9]
 8005c82:	6823      	ldr	r3, [r4, #0]
 8005c84:	0699      	lsls	r1, r3, #26
 8005c86:	bf42      	ittt	mi
 8005c88:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005c8c:	3302      	addmi	r3, #2
 8005c8e:	f8c9 3000 	strmi.w	r3, [r9]
 8005c92:	6825      	ldr	r5, [r4, #0]
 8005c94:	f015 0506 	ands.w	r5, r5, #6
 8005c98:	d107      	bne.n	8005caa <_printf_common+0x52>
 8005c9a:	f104 0a19 	add.w	sl, r4, #25
 8005c9e:	68e3      	ldr	r3, [r4, #12]
 8005ca0:	f8d9 2000 	ldr.w	r2, [r9]
 8005ca4:	1a9b      	subs	r3, r3, r2
 8005ca6:	42ab      	cmp	r3, r5
 8005ca8:	dc28      	bgt.n	8005cfc <_printf_common+0xa4>
 8005caa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005cae:	6822      	ldr	r2, [r4, #0]
 8005cb0:	3300      	adds	r3, #0
 8005cb2:	bf18      	it	ne
 8005cb4:	2301      	movne	r3, #1
 8005cb6:	0692      	lsls	r2, r2, #26
 8005cb8:	d42d      	bmi.n	8005d16 <_printf_common+0xbe>
 8005cba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005cbe:	4639      	mov	r1, r7
 8005cc0:	4630      	mov	r0, r6
 8005cc2:	47c0      	blx	r8
 8005cc4:	3001      	adds	r0, #1
 8005cc6:	d020      	beq.n	8005d0a <_printf_common+0xb2>
 8005cc8:	6823      	ldr	r3, [r4, #0]
 8005cca:	68e5      	ldr	r5, [r4, #12]
 8005ccc:	f8d9 2000 	ldr.w	r2, [r9]
 8005cd0:	f003 0306 	and.w	r3, r3, #6
 8005cd4:	2b04      	cmp	r3, #4
 8005cd6:	bf08      	it	eq
 8005cd8:	1aad      	subeq	r5, r5, r2
 8005cda:	68a3      	ldr	r3, [r4, #8]
 8005cdc:	6922      	ldr	r2, [r4, #16]
 8005cde:	bf0c      	ite	eq
 8005ce0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ce4:	2500      	movne	r5, #0
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	bfc4      	itt	gt
 8005cea:	1a9b      	subgt	r3, r3, r2
 8005cec:	18ed      	addgt	r5, r5, r3
 8005cee:	f04f 0900 	mov.w	r9, #0
 8005cf2:	341a      	adds	r4, #26
 8005cf4:	454d      	cmp	r5, r9
 8005cf6:	d11a      	bne.n	8005d2e <_printf_common+0xd6>
 8005cf8:	2000      	movs	r0, #0
 8005cfa:	e008      	b.n	8005d0e <_printf_common+0xb6>
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	4652      	mov	r2, sl
 8005d00:	4639      	mov	r1, r7
 8005d02:	4630      	mov	r0, r6
 8005d04:	47c0      	blx	r8
 8005d06:	3001      	adds	r0, #1
 8005d08:	d103      	bne.n	8005d12 <_printf_common+0xba>
 8005d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d12:	3501      	adds	r5, #1
 8005d14:	e7c3      	b.n	8005c9e <_printf_common+0x46>
 8005d16:	18e1      	adds	r1, r4, r3
 8005d18:	1c5a      	adds	r2, r3, #1
 8005d1a:	2030      	movs	r0, #48	; 0x30
 8005d1c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d20:	4422      	add	r2, r4
 8005d22:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d26:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d2a:	3302      	adds	r3, #2
 8005d2c:	e7c5      	b.n	8005cba <_printf_common+0x62>
 8005d2e:	2301      	movs	r3, #1
 8005d30:	4622      	mov	r2, r4
 8005d32:	4639      	mov	r1, r7
 8005d34:	4630      	mov	r0, r6
 8005d36:	47c0      	blx	r8
 8005d38:	3001      	adds	r0, #1
 8005d3a:	d0e6      	beq.n	8005d0a <_printf_common+0xb2>
 8005d3c:	f109 0901 	add.w	r9, r9, #1
 8005d40:	e7d8      	b.n	8005cf4 <_printf_common+0x9c>
	...

08005d44 <_printf_i>:
 8005d44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005d48:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005d4c:	460c      	mov	r4, r1
 8005d4e:	7e09      	ldrb	r1, [r1, #24]
 8005d50:	b085      	sub	sp, #20
 8005d52:	296e      	cmp	r1, #110	; 0x6e
 8005d54:	4617      	mov	r7, r2
 8005d56:	4606      	mov	r6, r0
 8005d58:	4698      	mov	r8, r3
 8005d5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d5c:	f000 80b3 	beq.w	8005ec6 <_printf_i+0x182>
 8005d60:	d822      	bhi.n	8005da8 <_printf_i+0x64>
 8005d62:	2963      	cmp	r1, #99	; 0x63
 8005d64:	d036      	beq.n	8005dd4 <_printf_i+0x90>
 8005d66:	d80a      	bhi.n	8005d7e <_printf_i+0x3a>
 8005d68:	2900      	cmp	r1, #0
 8005d6a:	f000 80b9 	beq.w	8005ee0 <_printf_i+0x19c>
 8005d6e:	2958      	cmp	r1, #88	; 0x58
 8005d70:	f000 8083 	beq.w	8005e7a <_printf_i+0x136>
 8005d74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d78:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005d7c:	e032      	b.n	8005de4 <_printf_i+0xa0>
 8005d7e:	2964      	cmp	r1, #100	; 0x64
 8005d80:	d001      	beq.n	8005d86 <_printf_i+0x42>
 8005d82:	2969      	cmp	r1, #105	; 0x69
 8005d84:	d1f6      	bne.n	8005d74 <_printf_i+0x30>
 8005d86:	6820      	ldr	r0, [r4, #0]
 8005d88:	6813      	ldr	r3, [r2, #0]
 8005d8a:	0605      	lsls	r5, r0, #24
 8005d8c:	f103 0104 	add.w	r1, r3, #4
 8005d90:	d52a      	bpl.n	8005de8 <_printf_i+0xa4>
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	6011      	str	r1, [r2, #0]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	da03      	bge.n	8005da2 <_printf_i+0x5e>
 8005d9a:	222d      	movs	r2, #45	; 0x2d
 8005d9c:	425b      	negs	r3, r3
 8005d9e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005da2:	486f      	ldr	r0, [pc, #444]	; (8005f60 <_printf_i+0x21c>)
 8005da4:	220a      	movs	r2, #10
 8005da6:	e039      	b.n	8005e1c <_printf_i+0xd8>
 8005da8:	2973      	cmp	r1, #115	; 0x73
 8005daa:	f000 809d 	beq.w	8005ee8 <_printf_i+0x1a4>
 8005dae:	d808      	bhi.n	8005dc2 <_printf_i+0x7e>
 8005db0:	296f      	cmp	r1, #111	; 0x6f
 8005db2:	d020      	beq.n	8005df6 <_printf_i+0xb2>
 8005db4:	2970      	cmp	r1, #112	; 0x70
 8005db6:	d1dd      	bne.n	8005d74 <_printf_i+0x30>
 8005db8:	6823      	ldr	r3, [r4, #0]
 8005dba:	f043 0320 	orr.w	r3, r3, #32
 8005dbe:	6023      	str	r3, [r4, #0]
 8005dc0:	e003      	b.n	8005dca <_printf_i+0x86>
 8005dc2:	2975      	cmp	r1, #117	; 0x75
 8005dc4:	d017      	beq.n	8005df6 <_printf_i+0xb2>
 8005dc6:	2978      	cmp	r1, #120	; 0x78
 8005dc8:	d1d4      	bne.n	8005d74 <_printf_i+0x30>
 8005dca:	2378      	movs	r3, #120	; 0x78
 8005dcc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005dd0:	4864      	ldr	r0, [pc, #400]	; (8005f64 <_printf_i+0x220>)
 8005dd2:	e055      	b.n	8005e80 <_printf_i+0x13c>
 8005dd4:	6813      	ldr	r3, [r2, #0]
 8005dd6:	1d19      	adds	r1, r3, #4
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	6011      	str	r1, [r2, #0]
 8005ddc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005de0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005de4:	2301      	movs	r3, #1
 8005de6:	e08c      	b.n	8005f02 <_printf_i+0x1be>
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	6011      	str	r1, [r2, #0]
 8005dec:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005df0:	bf18      	it	ne
 8005df2:	b21b      	sxthne	r3, r3
 8005df4:	e7cf      	b.n	8005d96 <_printf_i+0x52>
 8005df6:	6813      	ldr	r3, [r2, #0]
 8005df8:	6825      	ldr	r5, [r4, #0]
 8005dfa:	1d18      	adds	r0, r3, #4
 8005dfc:	6010      	str	r0, [r2, #0]
 8005dfe:	0628      	lsls	r0, r5, #24
 8005e00:	d501      	bpl.n	8005e06 <_printf_i+0xc2>
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	e002      	b.n	8005e0c <_printf_i+0xc8>
 8005e06:	0668      	lsls	r0, r5, #25
 8005e08:	d5fb      	bpl.n	8005e02 <_printf_i+0xbe>
 8005e0a:	881b      	ldrh	r3, [r3, #0]
 8005e0c:	4854      	ldr	r0, [pc, #336]	; (8005f60 <_printf_i+0x21c>)
 8005e0e:	296f      	cmp	r1, #111	; 0x6f
 8005e10:	bf14      	ite	ne
 8005e12:	220a      	movne	r2, #10
 8005e14:	2208      	moveq	r2, #8
 8005e16:	2100      	movs	r1, #0
 8005e18:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e1c:	6865      	ldr	r5, [r4, #4]
 8005e1e:	60a5      	str	r5, [r4, #8]
 8005e20:	2d00      	cmp	r5, #0
 8005e22:	f2c0 8095 	blt.w	8005f50 <_printf_i+0x20c>
 8005e26:	6821      	ldr	r1, [r4, #0]
 8005e28:	f021 0104 	bic.w	r1, r1, #4
 8005e2c:	6021      	str	r1, [r4, #0]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d13d      	bne.n	8005eae <_printf_i+0x16a>
 8005e32:	2d00      	cmp	r5, #0
 8005e34:	f040 808e 	bne.w	8005f54 <_printf_i+0x210>
 8005e38:	4665      	mov	r5, ip
 8005e3a:	2a08      	cmp	r2, #8
 8005e3c:	d10b      	bne.n	8005e56 <_printf_i+0x112>
 8005e3e:	6823      	ldr	r3, [r4, #0]
 8005e40:	07db      	lsls	r3, r3, #31
 8005e42:	d508      	bpl.n	8005e56 <_printf_i+0x112>
 8005e44:	6923      	ldr	r3, [r4, #16]
 8005e46:	6862      	ldr	r2, [r4, #4]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	bfde      	ittt	le
 8005e4c:	2330      	movle	r3, #48	; 0x30
 8005e4e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e52:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e56:	ebac 0305 	sub.w	r3, ip, r5
 8005e5a:	6123      	str	r3, [r4, #16]
 8005e5c:	f8cd 8000 	str.w	r8, [sp]
 8005e60:	463b      	mov	r3, r7
 8005e62:	aa03      	add	r2, sp, #12
 8005e64:	4621      	mov	r1, r4
 8005e66:	4630      	mov	r0, r6
 8005e68:	f7ff fef6 	bl	8005c58 <_printf_common>
 8005e6c:	3001      	adds	r0, #1
 8005e6e:	d14d      	bne.n	8005f0c <_printf_i+0x1c8>
 8005e70:	f04f 30ff 	mov.w	r0, #4294967295
 8005e74:	b005      	add	sp, #20
 8005e76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e7a:	4839      	ldr	r0, [pc, #228]	; (8005f60 <_printf_i+0x21c>)
 8005e7c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005e80:	6813      	ldr	r3, [r2, #0]
 8005e82:	6821      	ldr	r1, [r4, #0]
 8005e84:	1d1d      	adds	r5, r3, #4
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	6015      	str	r5, [r2, #0]
 8005e8a:	060a      	lsls	r2, r1, #24
 8005e8c:	d50b      	bpl.n	8005ea6 <_printf_i+0x162>
 8005e8e:	07ca      	lsls	r2, r1, #31
 8005e90:	bf44      	itt	mi
 8005e92:	f041 0120 	orrmi.w	r1, r1, #32
 8005e96:	6021      	strmi	r1, [r4, #0]
 8005e98:	b91b      	cbnz	r3, 8005ea2 <_printf_i+0x15e>
 8005e9a:	6822      	ldr	r2, [r4, #0]
 8005e9c:	f022 0220 	bic.w	r2, r2, #32
 8005ea0:	6022      	str	r2, [r4, #0]
 8005ea2:	2210      	movs	r2, #16
 8005ea4:	e7b7      	b.n	8005e16 <_printf_i+0xd2>
 8005ea6:	064d      	lsls	r5, r1, #25
 8005ea8:	bf48      	it	mi
 8005eaa:	b29b      	uxthmi	r3, r3
 8005eac:	e7ef      	b.n	8005e8e <_printf_i+0x14a>
 8005eae:	4665      	mov	r5, ip
 8005eb0:	fbb3 f1f2 	udiv	r1, r3, r2
 8005eb4:	fb02 3311 	mls	r3, r2, r1, r3
 8005eb8:	5cc3      	ldrb	r3, [r0, r3]
 8005eba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	2900      	cmp	r1, #0
 8005ec2:	d1f5      	bne.n	8005eb0 <_printf_i+0x16c>
 8005ec4:	e7b9      	b.n	8005e3a <_printf_i+0xf6>
 8005ec6:	6813      	ldr	r3, [r2, #0]
 8005ec8:	6825      	ldr	r5, [r4, #0]
 8005eca:	6961      	ldr	r1, [r4, #20]
 8005ecc:	1d18      	adds	r0, r3, #4
 8005ece:	6010      	str	r0, [r2, #0]
 8005ed0:	0628      	lsls	r0, r5, #24
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	d501      	bpl.n	8005eda <_printf_i+0x196>
 8005ed6:	6019      	str	r1, [r3, #0]
 8005ed8:	e002      	b.n	8005ee0 <_printf_i+0x19c>
 8005eda:	066a      	lsls	r2, r5, #25
 8005edc:	d5fb      	bpl.n	8005ed6 <_printf_i+0x192>
 8005ede:	8019      	strh	r1, [r3, #0]
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	6123      	str	r3, [r4, #16]
 8005ee4:	4665      	mov	r5, ip
 8005ee6:	e7b9      	b.n	8005e5c <_printf_i+0x118>
 8005ee8:	6813      	ldr	r3, [r2, #0]
 8005eea:	1d19      	adds	r1, r3, #4
 8005eec:	6011      	str	r1, [r2, #0]
 8005eee:	681d      	ldr	r5, [r3, #0]
 8005ef0:	6862      	ldr	r2, [r4, #4]
 8005ef2:	2100      	movs	r1, #0
 8005ef4:	4628      	mov	r0, r5
 8005ef6:	f7fa f96b 	bl	80001d0 <memchr>
 8005efa:	b108      	cbz	r0, 8005f00 <_printf_i+0x1bc>
 8005efc:	1b40      	subs	r0, r0, r5
 8005efe:	6060      	str	r0, [r4, #4]
 8005f00:	6863      	ldr	r3, [r4, #4]
 8005f02:	6123      	str	r3, [r4, #16]
 8005f04:	2300      	movs	r3, #0
 8005f06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f0a:	e7a7      	b.n	8005e5c <_printf_i+0x118>
 8005f0c:	6923      	ldr	r3, [r4, #16]
 8005f0e:	462a      	mov	r2, r5
 8005f10:	4639      	mov	r1, r7
 8005f12:	4630      	mov	r0, r6
 8005f14:	47c0      	blx	r8
 8005f16:	3001      	adds	r0, #1
 8005f18:	d0aa      	beq.n	8005e70 <_printf_i+0x12c>
 8005f1a:	6823      	ldr	r3, [r4, #0]
 8005f1c:	079b      	lsls	r3, r3, #30
 8005f1e:	d413      	bmi.n	8005f48 <_printf_i+0x204>
 8005f20:	68e0      	ldr	r0, [r4, #12]
 8005f22:	9b03      	ldr	r3, [sp, #12]
 8005f24:	4298      	cmp	r0, r3
 8005f26:	bfb8      	it	lt
 8005f28:	4618      	movlt	r0, r3
 8005f2a:	e7a3      	b.n	8005e74 <_printf_i+0x130>
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	464a      	mov	r2, r9
 8005f30:	4639      	mov	r1, r7
 8005f32:	4630      	mov	r0, r6
 8005f34:	47c0      	blx	r8
 8005f36:	3001      	adds	r0, #1
 8005f38:	d09a      	beq.n	8005e70 <_printf_i+0x12c>
 8005f3a:	3501      	adds	r5, #1
 8005f3c:	68e3      	ldr	r3, [r4, #12]
 8005f3e:	9a03      	ldr	r2, [sp, #12]
 8005f40:	1a9b      	subs	r3, r3, r2
 8005f42:	42ab      	cmp	r3, r5
 8005f44:	dcf2      	bgt.n	8005f2c <_printf_i+0x1e8>
 8005f46:	e7eb      	b.n	8005f20 <_printf_i+0x1dc>
 8005f48:	2500      	movs	r5, #0
 8005f4a:	f104 0919 	add.w	r9, r4, #25
 8005f4e:	e7f5      	b.n	8005f3c <_printf_i+0x1f8>
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d1ac      	bne.n	8005eae <_printf_i+0x16a>
 8005f54:	7803      	ldrb	r3, [r0, #0]
 8005f56:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f5a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f5e:	e76c      	b.n	8005e3a <_printf_i+0xf6>
 8005f60:	08006211 	.word	0x08006211
 8005f64:	08006222 	.word	0x08006222

08005f68 <memcpy>:
 8005f68:	b510      	push	{r4, lr}
 8005f6a:	1e43      	subs	r3, r0, #1
 8005f6c:	440a      	add	r2, r1
 8005f6e:	4291      	cmp	r1, r2
 8005f70:	d100      	bne.n	8005f74 <memcpy+0xc>
 8005f72:	bd10      	pop	{r4, pc}
 8005f74:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f7c:	e7f7      	b.n	8005f6e <memcpy+0x6>

08005f7e <memmove>:
 8005f7e:	4288      	cmp	r0, r1
 8005f80:	b510      	push	{r4, lr}
 8005f82:	eb01 0302 	add.w	r3, r1, r2
 8005f86:	d807      	bhi.n	8005f98 <memmove+0x1a>
 8005f88:	1e42      	subs	r2, r0, #1
 8005f8a:	4299      	cmp	r1, r3
 8005f8c:	d00a      	beq.n	8005fa4 <memmove+0x26>
 8005f8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f92:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005f96:	e7f8      	b.n	8005f8a <memmove+0xc>
 8005f98:	4283      	cmp	r3, r0
 8005f9a:	d9f5      	bls.n	8005f88 <memmove+0xa>
 8005f9c:	1881      	adds	r1, r0, r2
 8005f9e:	1ad2      	subs	r2, r2, r3
 8005fa0:	42d3      	cmn	r3, r2
 8005fa2:	d100      	bne.n	8005fa6 <memmove+0x28>
 8005fa4:	bd10      	pop	{r4, pc}
 8005fa6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005faa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005fae:	e7f7      	b.n	8005fa0 <memmove+0x22>

08005fb0 <_free_r>:
 8005fb0:	b538      	push	{r3, r4, r5, lr}
 8005fb2:	4605      	mov	r5, r0
 8005fb4:	2900      	cmp	r1, #0
 8005fb6:	d045      	beq.n	8006044 <_free_r+0x94>
 8005fb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fbc:	1f0c      	subs	r4, r1, #4
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	bfb8      	it	lt
 8005fc2:	18e4      	addlt	r4, r4, r3
 8005fc4:	f000 f8d2 	bl	800616c <__malloc_lock>
 8005fc8:	4a1f      	ldr	r2, [pc, #124]	; (8006048 <_free_r+0x98>)
 8005fca:	6813      	ldr	r3, [r2, #0]
 8005fcc:	4610      	mov	r0, r2
 8005fce:	b933      	cbnz	r3, 8005fde <_free_r+0x2e>
 8005fd0:	6063      	str	r3, [r4, #4]
 8005fd2:	6014      	str	r4, [r2, #0]
 8005fd4:	4628      	mov	r0, r5
 8005fd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fda:	f000 b8c8 	b.w	800616e <__malloc_unlock>
 8005fde:	42a3      	cmp	r3, r4
 8005fe0:	d90c      	bls.n	8005ffc <_free_r+0x4c>
 8005fe2:	6821      	ldr	r1, [r4, #0]
 8005fe4:	1862      	adds	r2, r4, r1
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	bf04      	itt	eq
 8005fea:	681a      	ldreq	r2, [r3, #0]
 8005fec:	685b      	ldreq	r3, [r3, #4]
 8005fee:	6063      	str	r3, [r4, #4]
 8005ff0:	bf04      	itt	eq
 8005ff2:	1852      	addeq	r2, r2, r1
 8005ff4:	6022      	streq	r2, [r4, #0]
 8005ff6:	6004      	str	r4, [r0, #0]
 8005ff8:	e7ec      	b.n	8005fd4 <_free_r+0x24>
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	685a      	ldr	r2, [r3, #4]
 8005ffe:	b10a      	cbz	r2, 8006004 <_free_r+0x54>
 8006000:	42a2      	cmp	r2, r4
 8006002:	d9fa      	bls.n	8005ffa <_free_r+0x4a>
 8006004:	6819      	ldr	r1, [r3, #0]
 8006006:	1858      	adds	r0, r3, r1
 8006008:	42a0      	cmp	r0, r4
 800600a:	d10b      	bne.n	8006024 <_free_r+0x74>
 800600c:	6820      	ldr	r0, [r4, #0]
 800600e:	4401      	add	r1, r0
 8006010:	1858      	adds	r0, r3, r1
 8006012:	4282      	cmp	r2, r0
 8006014:	6019      	str	r1, [r3, #0]
 8006016:	d1dd      	bne.n	8005fd4 <_free_r+0x24>
 8006018:	6810      	ldr	r0, [r2, #0]
 800601a:	6852      	ldr	r2, [r2, #4]
 800601c:	605a      	str	r2, [r3, #4]
 800601e:	4401      	add	r1, r0
 8006020:	6019      	str	r1, [r3, #0]
 8006022:	e7d7      	b.n	8005fd4 <_free_r+0x24>
 8006024:	d902      	bls.n	800602c <_free_r+0x7c>
 8006026:	230c      	movs	r3, #12
 8006028:	602b      	str	r3, [r5, #0]
 800602a:	e7d3      	b.n	8005fd4 <_free_r+0x24>
 800602c:	6820      	ldr	r0, [r4, #0]
 800602e:	1821      	adds	r1, r4, r0
 8006030:	428a      	cmp	r2, r1
 8006032:	bf04      	itt	eq
 8006034:	6811      	ldreq	r1, [r2, #0]
 8006036:	6852      	ldreq	r2, [r2, #4]
 8006038:	6062      	str	r2, [r4, #4]
 800603a:	bf04      	itt	eq
 800603c:	1809      	addeq	r1, r1, r0
 800603e:	6021      	streq	r1, [r4, #0]
 8006040:	605c      	str	r4, [r3, #4]
 8006042:	e7c7      	b.n	8005fd4 <_free_r+0x24>
 8006044:	bd38      	pop	{r3, r4, r5, pc}
 8006046:	bf00      	nop
 8006048:	200000c8 	.word	0x200000c8

0800604c <_malloc_r>:
 800604c:	b570      	push	{r4, r5, r6, lr}
 800604e:	1ccd      	adds	r5, r1, #3
 8006050:	f025 0503 	bic.w	r5, r5, #3
 8006054:	3508      	adds	r5, #8
 8006056:	2d0c      	cmp	r5, #12
 8006058:	bf38      	it	cc
 800605a:	250c      	movcc	r5, #12
 800605c:	2d00      	cmp	r5, #0
 800605e:	4606      	mov	r6, r0
 8006060:	db01      	blt.n	8006066 <_malloc_r+0x1a>
 8006062:	42a9      	cmp	r1, r5
 8006064:	d903      	bls.n	800606e <_malloc_r+0x22>
 8006066:	230c      	movs	r3, #12
 8006068:	6033      	str	r3, [r6, #0]
 800606a:	2000      	movs	r0, #0
 800606c:	bd70      	pop	{r4, r5, r6, pc}
 800606e:	f000 f87d 	bl	800616c <__malloc_lock>
 8006072:	4a21      	ldr	r2, [pc, #132]	; (80060f8 <_malloc_r+0xac>)
 8006074:	6814      	ldr	r4, [r2, #0]
 8006076:	4621      	mov	r1, r4
 8006078:	b991      	cbnz	r1, 80060a0 <_malloc_r+0x54>
 800607a:	4c20      	ldr	r4, [pc, #128]	; (80060fc <_malloc_r+0xb0>)
 800607c:	6823      	ldr	r3, [r4, #0]
 800607e:	b91b      	cbnz	r3, 8006088 <_malloc_r+0x3c>
 8006080:	4630      	mov	r0, r6
 8006082:	f000 f863 	bl	800614c <_sbrk_r>
 8006086:	6020      	str	r0, [r4, #0]
 8006088:	4629      	mov	r1, r5
 800608a:	4630      	mov	r0, r6
 800608c:	f000 f85e 	bl	800614c <_sbrk_r>
 8006090:	1c43      	adds	r3, r0, #1
 8006092:	d124      	bne.n	80060de <_malloc_r+0x92>
 8006094:	230c      	movs	r3, #12
 8006096:	6033      	str	r3, [r6, #0]
 8006098:	4630      	mov	r0, r6
 800609a:	f000 f868 	bl	800616e <__malloc_unlock>
 800609e:	e7e4      	b.n	800606a <_malloc_r+0x1e>
 80060a0:	680b      	ldr	r3, [r1, #0]
 80060a2:	1b5b      	subs	r3, r3, r5
 80060a4:	d418      	bmi.n	80060d8 <_malloc_r+0x8c>
 80060a6:	2b0b      	cmp	r3, #11
 80060a8:	d90f      	bls.n	80060ca <_malloc_r+0x7e>
 80060aa:	600b      	str	r3, [r1, #0]
 80060ac:	50cd      	str	r5, [r1, r3]
 80060ae:	18cc      	adds	r4, r1, r3
 80060b0:	4630      	mov	r0, r6
 80060b2:	f000 f85c 	bl	800616e <__malloc_unlock>
 80060b6:	f104 000b 	add.w	r0, r4, #11
 80060ba:	1d23      	adds	r3, r4, #4
 80060bc:	f020 0007 	bic.w	r0, r0, #7
 80060c0:	1ac3      	subs	r3, r0, r3
 80060c2:	d0d3      	beq.n	800606c <_malloc_r+0x20>
 80060c4:	425a      	negs	r2, r3
 80060c6:	50e2      	str	r2, [r4, r3]
 80060c8:	e7d0      	b.n	800606c <_malloc_r+0x20>
 80060ca:	428c      	cmp	r4, r1
 80060cc:	684b      	ldr	r3, [r1, #4]
 80060ce:	bf16      	itet	ne
 80060d0:	6063      	strne	r3, [r4, #4]
 80060d2:	6013      	streq	r3, [r2, #0]
 80060d4:	460c      	movne	r4, r1
 80060d6:	e7eb      	b.n	80060b0 <_malloc_r+0x64>
 80060d8:	460c      	mov	r4, r1
 80060da:	6849      	ldr	r1, [r1, #4]
 80060dc:	e7cc      	b.n	8006078 <_malloc_r+0x2c>
 80060de:	1cc4      	adds	r4, r0, #3
 80060e0:	f024 0403 	bic.w	r4, r4, #3
 80060e4:	42a0      	cmp	r0, r4
 80060e6:	d005      	beq.n	80060f4 <_malloc_r+0xa8>
 80060e8:	1a21      	subs	r1, r4, r0
 80060ea:	4630      	mov	r0, r6
 80060ec:	f000 f82e 	bl	800614c <_sbrk_r>
 80060f0:	3001      	adds	r0, #1
 80060f2:	d0cf      	beq.n	8006094 <_malloc_r+0x48>
 80060f4:	6025      	str	r5, [r4, #0]
 80060f6:	e7db      	b.n	80060b0 <_malloc_r+0x64>
 80060f8:	200000c8 	.word	0x200000c8
 80060fc:	200000cc 	.word	0x200000cc

08006100 <_realloc_r>:
 8006100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006102:	4607      	mov	r7, r0
 8006104:	4614      	mov	r4, r2
 8006106:	460e      	mov	r6, r1
 8006108:	b921      	cbnz	r1, 8006114 <_realloc_r+0x14>
 800610a:	4611      	mov	r1, r2
 800610c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006110:	f7ff bf9c 	b.w	800604c <_malloc_r>
 8006114:	b922      	cbnz	r2, 8006120 <_realloc_r+0x20>
 8006116:	f7ff ff4b 	bl	8005fb0 <_free_r>
 800611a:	4625      	mov	r5, r4
 800611c:	4628      	mov	r0, r5
 800611e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006120:	f000 f826 	bl	8006170 <_malloc_usable_size_r>
 8006124:	42a0      	cmp	r0, r4
 8006126:	d20f      	bcs.n	8006148 <_realloc_r+0x48>
 8006128:	4621      	mov	r1, r4
 800612a:	4638      	mov	r0, r7
 800612c:	f7ff ff8e 	bl	800604c <_malloc_r>
 8006130:	4605      	mov	r5, r0
 8006132:	2800      	cmp	r0, #0
 8006134:	d0f2      	beq.n	800611c <_realloc_r+0x1c>
 8006136:	4631      	mov	r1, r6
 8006138:	4622      	mov	r2, r4
 800613a:	f7ff ff15 	bl	8005f68 <memcpy>
 800613e:	4631      	mov	r1, r6
 8006140:	4638      	mov	r0, r7
 8006142:	f7ff ff35 	bl	8005fb0 <_free_r>
 8006146:	e7e9      	b.n	800611c <_realloc_r+0x1c>
 8006148:	4635      	mov	r5, r6
 800614a:	e7e7      	b.n	800611c <_realloc_r+0x1c>

0800614c <_sbrk_r>:
 800614c:	b538      	push	{r3, r4, r5, lr}
 800614e:	4c06      	ldr	r4, [pc, #24]	; (8006168 <_sbrk_r+0x1c>)
 8006150:	2300      	movs	r3, #0
 8006152:	4605      	mov	r5, r0
 8006154:	4608      	mov	r0, r1
 8006156:	6023      	str	r3, [r4, #0]
 8006158:	f7ff fb44 	bl	80057e4 <_sbrk>
 800615c:	1c43      	adds	r3, r0, #1
 800615e:	d102      	bne.n	8006166 <_sbrk_r+0x1a>
 8006160:	6823      	ldr	r3, [r4, #0]
 8006162:	b103      	cbz	r3, 8006166 <_sbrk_r+0x1a>
 8006164:	602b      	str	r3, [r5, #0]
 8006166:	bd38      	pop	{r3, r4, r5, pc}
 8006168:	2000041c 	.word	0x2000041c

0800616c <__malloc_lock>:
 800616c:	4770      	bx	lr

0800616e <__malloc_unlock>:
 800616e:	4770      	bx	lr

08006170 <_malloc_usable_size_r>:
 8006170:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006174:	1f18      	subs	r0, r3, #4
 8006176:	2b00      	cmp	r3, #0
 8006178:	bfbc      	itt	lt
 800617a:	580b      	ldrlt	r3, [r1, r0]
 800617c:	18c0      	addlt	r0, r0, r3
 800617e:	4770      	bx	lr

08006180 <_init>:
 8006180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006182:	bf00      	nop
 8006184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006186:	bc08      	pop	{r3}
 8006188:	469e      	mov	lr, r3
 800618a:	4770      	bx	lr

0800618c <_fini>:
 800618c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800618e:	bf00      	nop
 8006190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006192:	bc08      	pop	{r3}
 8006194:	469e      	mov	lr, r3
 8006196:	4770      	bx	lr
